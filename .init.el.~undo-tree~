(undo-tree-save-format-version . 1)
"96d3929e3ace683c65d7e91457c3248cb9f7f601"
[nil nil nil nil (25273 35949 480254 0) 0 nil]
([nil nil ((apply 9 1255 1399 undo--wrap-and-run-primitive-undo 1255 1399 ((#(";; " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -1358) (#(";; " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -1294) (#(";; " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -1259) 1408)) (t 25273 35926 207343 920000)) nil (25273 35949 480252 0) 0 nil])
([nil nil ((apply 3 1460 1497 undo--wrap-and-run-primitive-undo 1460 1497 ((#(";; " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -1464) 1470))) nil (25273 35949 480247 0) 0 nil])
([nil nil ((apply -3 1290 1357 undo--wrap-and-run-primitive-undo 1290 1357 ((1294 . 1297) 1310)) (t 25273 35949 484843 71000)) nil (25273 36074 624837 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1357) (undo-tree-id186 . -4) (undo-tree-id187 . -4) (undo-tree-id188 . -4) (undo-tree-id189 . -4) (undo-tree-id190 . -4) (undo-tree-id191 . -4) (undo-tree-id192 . -4) (undo-tree-id193 . -4) (undo-tree-id194 . -4) (undo-tree-id195 . -4) (undo-tree-id196 . -4) (undo-tree-id197 . -4) (undo-tree-id198 . -4) (undo-tree-id199 . -4) (undo-tree-id200 . -4) (undo-tree-id201 . -4) (undo-tree-id202 . -4) (undo-tree-id203 . -4) (undo-tree-id204 . -4) (undo-tree-id205 . -4) (undo-tree-id206 . -4) (undo-tree-id207 . -4) (undo-tree-id208 . -4) (undo-tree-id209 . -4) (undo-tree-id210 . -4) (undo-tree-id211 . -4) (undo-tree-id212 . -4) (undo-tree-id213 . -4) (undo-tree-id214 . -4) (undo-tree-id215 . -4) 1361 (1356 . 1361) (t 25273 35999 702613 440000) 1307) nil (25273 36088 62513 0) 0 nil] [nil nil ((1356 . 1361) (t 25273 35999 702613 440000) 1307) ((#("
    " 0 1 (face font-lock-comment-face fontified t) 1 5 (fontified t)) . 1356)) (25273 36074 624602 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1395 . 1396) (nil fontified nil 1357 . 1396) (1357 . 1396)) nil (25273 36088 62480 0) 0 nil])
nil
([nil nil ((1357 . 1361) 1395) nil (25273 36088 62478 0) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -1397) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 1398 (1393 . 1397) (1392 . 1394) (#("'" 0 1 (fontified nil)) . -1392) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (1392 . 1393) (#("[VALUE]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t)) . 1392) (undo-tree-id21 . -6) (undo-tree-id22 . -6) (undo-tree-id23 . -7) (undo-tree-id24 . -7) (undo-tree-id25 . -7) (undo-tree-id26 . -7) (undo-tree-id27 . -7) (undo-tree-id28 . -7) (undo-tree-id29 . -7) (undo-tree-id30 . -7) (undo-tree-id31 . -7) (undo-tree-id32 . -7) (undo-tree-id33 . -7) (undo-tree-id34 . -7) (undo-tree-id35 . -7) (undo-tree-id36 . -7) (undo-tree-id37 . -7) (undo-tree-id38 . -7) (undo-tree-id39 . -7) (undo-tree-id40 . -7) (undo-tree-id41 . -7) (undo-tree-id42 . -7) (undo-tree-id43 . -7) (undo-tree-id44 . -7) (undo-tree-id45 . -7) (undo-tree-id46 . -7) (undo-tree-id47 . -7) (undo-tree-id48 . -7) (undo-tree-id49 . -7) (undo-tree-id50 . -7) (undo-tree-id51 . -7) (undo-tree-id52 . -7) (undo-tree-id53 . -7) (undo-tree-id54 . -7) (undo-tree-id55 . -7) (undo-tree-id56 . -7) (undo-tree-id57 . -7) (undo-tree-id58 . -7) (undo-tree-id59 . -3) (undo-tree-id60 . -3) (undo-tree-id61 . -3) (undo-tree-id62 . -3) (undo-tree-id63 . -3) (undo-tree-id64 . -3) (undo-tree-id65 . -3) (undo-tree-id66 . -3) (undo-tree-id67 . -3) (undo-tree-id68 . -3) (undo-tree-id69 . -3) (undo-tree-id70 . -3) (undo-tree-id71 . -3) (undo-tree-id72 . -3) (undo-tree-id73 . -3) (undo-tree-id74 . -3) (undo-tree-id75 . -3) (undo-tree-id76 . -3) (undo-tree-id77 . -3) (undo-tree-id78 . -3) (undo-tree-id79 . -3) (undo-tree-id80 . -2) (undo-tree-id81 . -2) (undo-tree-id82 . -2) (undo-tree-id83 . -2) (undo-tree-id84 . -2) (undo-tree-id85 . -2) (undo-tree-id86 . -2) (undo-tree-id87 . -2) (undo-tree-id88 . -2) (undo-tree-id89 . -2) (undo-tree-id90 . -2) (undo-tree-id91 . -2) (undo-tree-id92 . -2) (undo-tree-id93 . -2) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -6) (undo-tree-id109 . -7) (undo-tree-id110 . -6) (undo-tree-id111 . -5) (undo-tree-id112 . -5) (undo-tree-id113 . -5) (undo-tree-id114 . -5) (undo-tree-id115 . -5) (undo-tree-id116 . -5) (undo-tree-id117 . -5) (undo-tree-id118 . -5) (undo-tree-id119 . -5) (undo-tree-id120 . -5) (undo-tree-id121 . -5) (undo-tree-id122 . -5) (undo-tree-id123 . -5) (undo-tree-id124 . -5) (undo-tree-id125 . -5) (undo-tree-id126 . -5) (undo-tree-id127 . -5) (undo-tree-id128 . -5) (undo-tree-id129 . -5) (undo-tree-id130 . -5) (undo-tree-id131 . -5) (undo-tree-id132 . -7) (undo-tree-id133 . -7) (undo-tree-id134 . -7) (undo-tree-id135 . -7) (undo-tree-id136 . -7) (undo-tree-id137 . -7) (undo-tree-id138 . -7) (undo-tree-id139 . -7) (undo-tree-id140 . -7) (undo-tree-id141 . -7) (undo-tree-id142 . -7) (undo-tree-id143 . -7) (undo-tree-id144 . -7) (undo-tree-id145 . -7) (undo-tree-id146 . -7) (undo-tree-id147 . -7) (undo-tree-id148 . -7) (undo-tree-id149 . -7) (undo-tree-id150 . -7) (undo-tree-id151 . -7) (undo-tree-id152 . -7) (undo-tree-id153 . 1) (undo-tree-id154 . -7) (undo-tree-id155 . 7) (undo-tree-id156 . -1) (undo-tree-id157 . -7) (undo-tree-id158 . -7) (undo-tree-id159 . -7) (undo-tree-id160 . -7) (undo-tree-id161 . -7) (undo-tree-id162 . -7) (undo-tree-id163 . -7) (undo-tree-id164 . -6) (undo-tree-id165 . -6) (undo-tree-id166 . -6) (undo-tree-id167 . -6) (undo-tree-id168 . -6) (undo-tree-id169 . -6) (undo-tree-id170 . -6) (undo-tree-id171 . -6) (undo-tree-id172 . -6) (undo-tree-id173 . -6) (undo-tree-id174 . -6) (undo-tree-id175 . -6) (undo-tree-id176 . -6) (undo-tree-id177 . -6) (undo-tree-id178 . -6) (undo-tree-id179 . -6) (undo-tree-id180 . -6) (undo-tree-id181 . -6) (undo-tree-id182 . -6) (undo-tree-id183 . -6) (undo-tree-id184 . -6) (undo-tree-id185 . -6) 1398) nil (25273 36088 62468 0) 0 nil])
([nil nil ((1392 . 1393) (#("'logo" 0 5 (fontified t)) . 1392) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -4) (undo-tree-id24 . -5) (undo-tree-id25 . -4) (undo-tree-id26 . -4) (undo-tree-id27 . -4) (undo-tree-id28 . -4) (undo-tree-id29 . -4) (undo-tree-id30 . -4) (undo-tree-id31 . -4) (undo-tree-id32 . -4) (undo-tree-id33 . -4) (undo-tree-id34 . -4) (undo-tree-id35 . -4) (undo-tree-id36 . -4) (undo-tree-id37 . -4) (undo-tree-id38 . -4) (undo-tree-id39 . -4) (undo-tree-id40 . -4) (undo-tree-id41 . -4) (undo-tree-id42 . -4) (undo-tree-id43 . -4) (undo-tree-id44 . -4) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) 1396 (t 25273 36088 66877 979000)) nil (25273 36120 50284 0) 0 nil])
([nil nil ((1392 . 1393) (#("1" 0 1 (fontified t)) . 1392) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (t 25273 36120 54587 559000)) nil (25273 36176 461221 0) 0 nil])
([nil nil ((apply -3 1395 1443 undo--wrap-and-run-primitive-undo 1395 1443 ((1399 . 1402) 1416)) (t 25273 36176 466027 761000)) nil (25273 36207 410540 0) 0 nil])
([nil nil ((1518 . 1527) (#("b" 0 1 (fontified t)) . -1518) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("a" 0 1 (fontified t)) . -1519) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (#("r" 0 1 (fontified t)) . -1520) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) 1521 (1514 . 1521) (1513 . 1515) (#("(" 0 1 (fontified nil)) . -1513) (1513 . 1514) (#("b" 0 1 (fontified t)) . -1513) (undo-tree-id146 . -1) (#("o" 0 1 (fontified t)) . -1514) (undo-tree-id147 . -1) (#("o" 0 1 (fontified t)) . -1515) (undo-tree-id148 . -1) 1516 (1513 . 1516) (1506 . 1513) (1489 . 1493) (1501 . 1502) (t 25273 36207 415554 819000)) nil (25273 36242 34177 0) 0 nil])
([nil nil ((apply -3 1486 1509 undo--wrap-and-run-primitive-undo 1486 1509 ((1493 . 1496) 1504))) nil (25273 36242 33991 0) 0 nil])
([nil nil ((10067 . 10081) (10066 . 10068) (#("\"" 0 1 (fontified nil)) . -10066) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (10066 . 10067) (10045 . 10066) (10043 . 10045) (10042 . 10044) (#("(" 0 1 (fontified nil)) . -10042) (10025 . 10043) (10024 . 10026) (#("(" 0 1 (fontified nil)) . -10024) (10024 . 10025) (#("s" 0 1 (fontified t)) . -10024) (undo-tree-id3 . -1) (#("e" 0 1 (fontified t)) . -10025) (undo-tree-id4 . -1) (#("t" 0 1 (fontified t)) . -10026) (undo-tree-id5 . -1) 10027 (10024 . 10027) (10023 . 10024) (10022 . 10023) (t 25273 36242 39016 241000) 10008) nil (25273 36604 441430 0) 0 nil])
([nil nil ((10114 . 10122) (10113 . 10114) (#("'" 0 1 (fontified nil)) . 10113) (10104 . 10113) (10103 . 10105) (#("'" 0 1 (fontified nil)) . -10103) (10098 . 10104) (#("-" 0 1 (fontified t)) . -10098) (undo-tree-id0 . -1) 10099 (10086 . 10099) (10085 . 10087) (#("(" 0 1 (fontified nil)) . -10085) (10085 . 10086) (10084 . 10085) 10080) nil (25273 36604 441416 0) 0 nil])
([nil nil ((#(";; Emacs stuff
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '(\"745d03d647c4b118f671c49214420639cb3af7152e81f132478ed1c649d4597d\" \"23c806e34594a583ea5bbf5adf9a964afe4f28b4467d28777bcba0d35aa0872e\" \"353ffc8e6b53a91ac87b7e86bebc6796877a0b76ddfc15793e4d7880976132ae\" default))
 '(package-selected-packages
   '(org-ql quelpa-use-package quelpa async evil-numbers general all-the-icons ivy-rich which-key rainbow-delimiters doom-themes evil-collection doom-modeline counsel ivy use-package))
 '(warning-suppress-types '((org))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 15 (face font-lock-comment-face fontified t) 15 16 (face (rainbow-delimiters-depth-1-face) fontified t) 16 38 (fontified t) 38 41 (face font-lock-comment-delimiter-face fontified t) 41 83 (face font-lock-comment-face fontified t) 83 84 (fontified t) 84 87 (face font-lock-comment-delimiter-face fontified t) 87 148 (face font-lock-comment-face fontified t) 148 149 (fontified t) 149 152 (face font-lock-comment-delimiter-face fontified t) 152 206 (face font-lock-comment-face fontified t) 206 207 (fontified t) 207 210 (face font-lock-comment-delimiter-face fontified t) 210 260 (face font-lock-comment-face fontified t) 260 262 (fontified t) 262 263 (face (rainbow-delimiters-depth-2-face) fontified t) 263 286 (fontified t) 286 287 (face (rainbow-delimiters-depth-3-face) fontified t) 287 353 (face font-lock-string-face fontified t) 353 354 (fontified t) 354 420 (face font-lock-string-face fontified t) 420 421 (fontified t) 421 487 (face font-lock-string-face fontified t) 487 495 (fontified t) 495 496 (face (rainbow-delimiters-depth-3-face) fontified t) 496 497 (face (rainbow-delimiters-depth-2-face) fontified t) 497 500 (fontified t) 500 501 (face (rainbow-delimiters-depth-2-face) fontified t) 501 531 (fontified t) 531 532 (face (rainbow-delimiters-depth-3-face) fontified t) 532 709 (fontified t) 709 710 (face (rainbow-delimiters-depth-3-face) fontified t) 710 711 (face (rainbow-delimiters-depth-2-face) fontified t) 711 714 (fontified t) 714 715 (face (rainbow-delimiters-depth-2-face) fontified t) 715 739 (fontified t) 739 740 (face (rainbow-delimiters-depth-3-face) fontified t) 740 741 (face (rainbow-delimiters-depth-4-face) fontified t) 741 744 (fontified t) 744 745 (face (rainbow-delimiters-depth-4-face) fontified t) 745 746 (face (rainbow-delimiters-depth-3-face) fontified t) 746 747 (face (rainbow-delimiters-depth-2-face) fontified t) 747 748 (face (rainbow-delimiters-depth-1-face) fontified t) 748 749 (fontified t) 749 750 (face (rainbow-delimiters-depth-1-face) fontified t) 750 768 (fontified t) 768 771 (face font-lock-comment-delimiter-face fontified t) 771 809 (face font-lock-comment-face fontified t) 809 810 (fontified t) 810 813 (face font-lock-comment-delimiter-face fontified t) 813 874 (face font-lock-comment-face fontified t) 874 875 (fontified t) 875 878 (face font-lock-comment-delimiter-face fontified t) 878 932 (face font-lock-comment-face fontified t) 932 933 (fontified t) 933 936 (face font-lock-comment-delimiter-face fontified t) 936 986 (face font-lock-comment-face fontified t) 986 987 (fontified t) 987 988 (face (rainbow-delimiters-depth-1-face) fontified t) 988 989 (fontified t)) . 10189) (undo-tree-id6 . -986) (undo-tree-id7 . -13) (undo-tree-id8 . -986) (undo-tree-id9 . -83) (undo-tree-id10 . -986) (undo-tree-id11 . -13) (undo-tree-id12 . -13) (undo-tree-id13 . -13) (undo-tree-id14 . -13) (undo-tree-id15 . -13) (undo-tree-id16 . -13) (undo-tree-id17 . -13) (undo-tree-id18 . -13) (undo-tree-id19 . -13) (undo-tree-id20 . -13) (undo-tree-id21 . -13) (undo-tree-id22 . -13) (undo-tree-id23 . -13) (undo-tree-id24 . -13) (undo-tree-id25 . -989) (undo-tree-id26 . -13) (undo-tree-id27 . -986) (undo-tree-id28 . -13) (undo-tree-id29 . -13) (undo-tree-id30 . -13) (undo-tree-id31 . -13) (undo-tree-id32 . -13) (undo-tree-id33 . -13) (undo-tree-id34 . -13) (undo-tree-id35 . -13) (undo-tree-id36 . -13) (undo-tree-id37 . -13) (undo-tree-id38 . -13) (undo-tree-id39 . -13) (undo-tree-id40 . -13) (undo-tree-id41 . -13) (undo-tree-id42 . -13) (undo-tree-id43 . -13) (undo-tree-id44 . -13) (undo-tree-id45 . -13) (undo-tree-id46 . -13) (undo-tree-id47 . -13) (undo-tree-id48 . -13) (undo-tree-id49 . -13) (undo-tree-id50 . -989) (undo-tree-id51 . -989) (undo-tree-id52 . -989) (undo-tree-id53 . -989) (undo-tree-id54 . -989) (undo-tree-id55 . -989) (undo-tree-id56 . -989) (undo-tree-id57 . -989) (undo-tree-id58 . -989) (undo-tree-id59 . -989) (undo-tree-id60 . -989) (undo-tree-id61 . -989) (undo-tree-id62 . -989) (undo-tree-id63 . -989) (undo-tree-id64 . -989) (undo-tree-id65 . -989) (undo-tree-id66 . -989) (undo-tree-id67 . -989) (undo-tree-id68 . -989) (undo-tree-id69 . -989) (undo-tree-id70 . -989) (undo-tree-id71 . -989) (undo-tree-id72 . -989) (undo-tree-id73 . -989) (undo-tree-id74 . -989) (undo-tree-id75 . -989) (undo-tree-id76 . -989) (undo-tree-id77 . -989) (undo-tree-id78 . -989) (undo-tree-id79 . -989) (undo-tree-id80 . -989) (undo-tree-id81 . -989) (undo-tree-id82 . -989) (undo-tree-id83 . -989) (undo-tree-id84 . -989) (undo-tree-id85 . -986) (undo-tree-id86 . -986) (undo-tree-id87 . -986) (undo-tree-id88 . -986) (undo-tree-id89 . -986) (undo-tree-id90 . -986) (undo-tree-id91 . -986) (undo-tree-id92 . -986) (undo-tree-id93 . -986) (undo-tree-id94 . -986) (undo-tree-id95 . -986) (undo-tree-id96 . -986) (undo-tree-id97 . -986) (undo-tree-id98 . -986) (undo-tree-id99 . -986) (undo-tree-id100 . -986) (undo-tree-id101 . -986) (undo-tree-id102 . -986) (undo-tree-id103 . -986) (undo-tree-id104 . -986) (undo-tree-id105 . -986) (undo-tree-id106 . -986) (undo-tree-id107 . -986) 11175 (t 25273 36604 445154 417000)) nil (25273 36608 662892 0) 0 nil])
([nil nil ((10116 . 10119) (10107 . 10116) (10086 . 10107) (#("(" 0 1 (fontified nil face font-lock-comment-face)) . -10086) (undo-tree-id0 . -1) (#(")" 0 1 (fontified t face font-lock-comment-face)) . 10087) (10086 . 10088) (#("(" 0 1 (fontified nil face font-lock-comment-delimiter-face)) . -10086) (10083 . 10087) (10082 . 10083) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -10082) (undo-tree-id1 . -1) (#("(" 0 1 (fontified nil face font-lock-comment-face)) . -10083) (undo-tree-id2 . -1) (#(")" 0 1 (fontified t face font-lock-comment-face)) . 10084) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -10084) (undo-tree-id3 . -1) 10085 (10084 . 10085) (10083 . 10085) (#("(" 0 1 (fontified nil face font-lock-comment-face)) . -10083) (10082 . 10084) (10080 . 10082) (10059 . 10080) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -10059) (undo-tree-id4 . -1) 10060 (10049 . 10060) (10028 . 10049) (10027 . 10028) (#("L" 0 1 (fontified t face font-lock-comment-face)) . -10027) (undo-tree-id5 . -1) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -10028) (undo-tree-id6 . -1) (#("a" 0 1 (fontified t face font-lock-comment-face)) . -10029) (undo-tree-id7 . -1) (#("d" 0 1 (fontified t face font-lock-comment-face)) . -10030) (undo-tree-id8 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -10031) (undo-tree-id9 . -1) (#("c" 0 1 (fontified t face font-lock-comment-face)) . -10032) (undo-tree-id10 . -1) (#("u" 0 1 (fontified t face font-lock-comment-face)) . -10033) (undo-tree-id11 . -1) (#("s" 0 1 (fontified t face font-lock-comment-face)) . -10034) (undo-tree-id12 . -1) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -10035) (undo-tree-id13 . -1) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -10036) (undo-tree-id14 . -1) (#("m" 0 1 (fontified t face font-lock-comment-face)) . -10037) (undo-tree-id15 . -1) 10038 (10030 . 10038) (#("c" 0 1 (fontified t face font-lock-comment-face)) . -10030) (undo-tree-id16 . -1) (#("d" 0 1 (fontified t face font-lock-comment-face)) . -10031) (undo-tree-id17 . -1) 10032 (10024 . 10032) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -10024) (undo-tree-id18 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . 10025) (#(" " 0 1 (fontified t face font-lock-string-face)) . -10025) (undo-tree-id19 . -1) 10026 (10025 . 10026) (10024 . 10026) (#("\"" 0 1 (fontified nil)) . -10024) (10024 . 10025) (10023 . 10024) (t 25273 36608 667646 160000) 10023) nil (25273 36664 648507 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 237 . 238) (#("
" 0 1 (fontified nil)) . -266) (237 . 267) 209 (t 25273 36664 653526 534000)) nil (25273 36749 163781 0) 0 nil])
([nil nil ((247 . 267) (#("a" 0 1 (fontified t)) . -247) (undo-tree-id21 . -1) (#("g" 0 1 (fontified t)) . -248) (undo-tree-id22 . -1) 249 (244 . 249) (#("make-backup-files" 0 17 (fontified t)) . 244) (undo-tree-id23 . -16) (undo-tree-id24 . -16) (undo-tree-id25 . -16) (undo-tree-id26 . -16) 260) nil (25273 36749 163778 0) 0 nil])
([nil nil ((268 . 269) (#("nil" 0 3 (fontified t)) . 268) (undo-tree-id0 . -3) (undo-tree-id1 . -3) (undo-tree-id2 . -3) (undo-tree-id3 . -3) (undo-tree-id4 . -3) (undo-tree-id5 . -3) (undo-tree-id6 . -3) (undo-tree-id7 . -3) (undo-tree-id8 . -3) (undo-tree-id9 . -3) (undo-tree-id10 . -3) (undo-tree-id11 . -3) (undo-tree-id12 . -3) (undo-tree-id13 . -3) (undo-tree-id14 . -3) (undo-tree-id15 . -3) (undo-tree-id16 . -3) (undo-tree-id17 . -3) (undo-tree-id18 . -3) (undo-tree-id19 . -3) (undo-tree-id20 . -3)) nil (25273 36749 163766 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 90 . 91) (#("
" 0 1 (fontified nil)) . -146) (90 . 147) 55 (t 25273 36749 168810 898000)) nil (25274 37440 846503 0) 0 nil])
([nil nil ((99 . 101)) nil (25274 37440 846501 0) 0 nil])
([nil nil ((115 . 118) (#("<escape>" 0 8 (fontified t face font-lock-string-face)) . 115) (undo-tree-id8 . -7) (undo-tree-id9 . -7) (undo-tree-id10 . -7) (undo-tree-id11 . -7) 122) nil (25274 37440 846499 0) 0 nil])
([nil nil ((#("'keyboard-escape-quit" 0 21 (fontified t)) . 121) (undo-tree-id4 . -20) (undo-tree-id5 . -20) (undo-tree-id6 . -20) (undo-tree-id7 . -20) 141) nil (25274 37440 846491 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 120) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1)) nil (25274 37844 773863 0) 0 nil])
([nil nil ((99 . 102) (#("unset" 0 5 (fontified t)) . 99)) nil (25274 37873 864655 0) 0 nil] [nil nil ((nil rear-nonsticky nil 152 . 153) (nil fontified nil 120 . 153) (120 . 153)) ((#("railwaycat/emacsmacport/emacs-mac" 0 32 (fontified nil) 32 33 (fontified nil rear-nonsticky nil)) . 120) (undo-tree-id15 . -33) (undo-tree-id16 . -33) (nil rear-nonsticky t 152 . 153)) (25274 37844 773787 0) 0 nil] [nil nil ((121 . 122) 120) ((#("
" 0 1 (fontified t)) . 121) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1)) (25274 37440 846459 0) 0 nil])
([nil nil ((120 . 134) (#("k" 0 1 (fontified t face (font-lock-constant-face))) . -120) (undo-tree-id18 . -1) 121 (120 . 121) (119 . 121) (#("'" 0 1 (fontified nil)) . -119) (118 . 120)) nil (25274 37873 864653 0) 0 nil])
nil
nil
([nil nil ((#("'" 0 1 (fontified t)) . 134) (undo-tree-id17 . 1)) nil (25274 37873 864645 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 135 . 136) (#("
" 0 1 (fontified nil)) . -180) (135 . 181) 91 (t 25274 37873 872970 199000)) nil (25274 39736 574629 0) 0 nil])
([nil nil ((160 . 161) (#("v" 0 1 (face font-lock-string-face fontified t)) . 160)) nil (25274 39736 574627 0) 0 nil])
([nil nil ((165 . 174) (#("clipboard" 0 9 (fontified t)) . 165)) nil (25274 39736 574625 0) 0 nil])
([nil nil ((175 . 184) (#("yank" 0 4 (fontified t)) . 175)) nil (25274 39736 574623 0) 0 nil])
([nil nil ((175 . 183) (#("argumuent" 0 9 (fontified t)) . 175)) nil (25274 39736 574617 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 463 . 464) (nil fontified nil 436 . 464) (436 . 464) (t 25274 39736 581151 42000)) nil (25293 20812 851187 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 6994 . 6995) (nil fontified nil 6854 . 6995) (6854 . 6995) (6853 . 6854) (6852 . 6853) (t 25293 20812 857240 321000) 6849) nil (25293 25023 906979 0) 0 nil])
([nil nil ((#("(setq org-todo-keyword-faces
      '((\"TODO\" . org-warning) (\"STARTED\" . \"yellow\")
        (\"CANCELED\" . (:foreground \"blue\" :weight bold))))
" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-2-face) fontified t) 37 38 (face (rainbow-delimiters-depth-3-face) fontified t) 38 44 (face font-lock-string-face fontified t) 44 58 (fontified t) 58 59 (face (rainbow-delimiters-depth-3-face) fontified t) 59 60 (fontified t) 60 61 (face (rainbow-delimiters-depth-3-face) fontified t) 61 70 (face font-lock-string-face fontified t) 70 73 (fontified t) 73 81 (face font-lock-string-face fontified t) 81 82 (face (rainbow-delimiters-depth-3-face) fontified t) 82 91 (fontified t) 91 92 (face (rainbow-delimiters-depth-3-face) fontified t) 92 102 (face font-lock-string-face fontified t) 102 105 (fontified t) 105 106 (face (rainbow-delimiters-depth-4-face) fontified t) 106 117 (face font-lock-builtin-face fontified t) 117 118 (fontified t) 118 124 (face font-lock-string-face fontified t) 124 125 (fontified t) 125 132 (face font-lock-builtin-face fontified t) 132 137 (fontified t) 137 138 (face (rainbow-delimiters-depth-4-face) fontified t) 138 139 (face (rainbow-delimiters-depth-3-face) fontified t) 139 140 (face (rainbow-delimiters-depth-2-face) fontified t) 140 141 (face (rainbow-delimiters-depth-1-face) rear-nonsticky t fontified t) 141 142 (fontified t)) . 6854) (undo-tree-id0 . -140) (undo-tree-id1 . -28) (undo-tree-id2 . -142) (undo-tree-id3 . -142) (undo-tree-id4 . 1) (undo-tree-id5 . -140) (undo-tree-id6 . -28) (undo-tree-id7 . -28) (undo-tree-id8 . -140) 6882) nil (25293 25023 906976 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 6847 . 6848) (#("
" 0 1 (fontified nil)) . -6989) (6847 . 6990) 6815) nil (25293 25023 906933 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . -6935) (6930 . 6935) (#("      " 0 6 (fontified nil)) . -6882) (6881 . 6882) (6848 . 6852) 6931) nil (25293 25023 906926 0) 0 nil])
([nil nil ((#("	    " 0 5 (fontified nil)) . -6931) (6930 . 6931) 6941 (t 25293 25023 920681 484000)) nil (25293 25157 705756 0) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -6935) (6930 . 6935) 6941) nil (25293 25157 705754 0) 0 nil])
([nil nil ((6909 . 6914) (#(" " 0 1 (fontified nil)) . 6909) (6882 . 6884) (6906 . 6907)) nil (25293 25157 705753 0) 0 nil])
([nil nil ((6888 . 6893) (#("TODO" 0 4 (face font-lock-string-face fontified t)) . 6888)) nil (25293 25157 705751 0) 0 nil])
([nil nil ((6898 . 6903) (6897 . 6899) (#("\"" 0 1 (fontified nil)) . -6897) (6897 . 6898) (#("org" 0 3 (fontified t)) . 6897)) nil (25293 25157 705749 0) 0 nil])
([nil nil ((#("-warning" 0 8 (fontified t)) . 6904) (undo-tree-id73 . -7) (undo-tree-id74 . -7) (undo-tree-id75 . -7) (undo-tree-id76 . -7) 6911) nil (25293 25157 705747 0) 0 nil])
([nil nil ((6919 . 6921) (6913 . 6919) (#("STARTED" 0 7 (face font-lock-string-face fontified t)) . 6913)) nil (25293 25157 705742 0) 0 nil])
([nil nil ((6926 . 6930) (#("B" 0 1 (face font-lock-string-face fontified t)) . -6926) (undo-tree-id72 . -1) 6927 (6926 . 6927) (#("yellow" 0 6 (face font-lock-string-face fontified t)) . 6926)) nil (25293 25157 705740 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 6937 . 6938) (#("
" 0 1 (fontified nil)) . -6959) (6932 . 6960) 6926) nil (25293 25157 705737 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 6964 . 6965) (#("
" 0 1 (fontified nil)) . -6986) (6959 . 6987) 6938) nil (25293 25157 705736 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 6991 . 6992) (#("
" 0 1 (fontified nil)) . -7013) (6986 . 7014) 6965) nil (25293 25157 705734 0) 0 nil])
([nil nil ((6940 . 6947) (#("PROJECTS" 0 8 (face font-lock-string-face fontified t)) . 6940)) nil (25293 25157 705732 0) 0 nil])
([nil nil ((6966 . 6970) (#("PROJECTS" 0 8 (face font-lock-string-face fontified t)) . 6966)) nil (25293 25157 705731 0) 0 nil])
([nil nil ((6989 . 6996) (#("PROJECTS" 0 8 (face font-lock-string-face fontified t)) . 6989)) nil (25293 25559 309344 0) 0 nil])
([nil nil ((6989 . 6997) (#("WAITING" 0 7 (face font-lock-string-face fontified t)) . 6989)) ((6989 . 6996) (#("CALENDAR" 0 8 (face font-lock-string-face fontified t)) . 6989)) (25293 25560 134972 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 7035) (7008 . 7036)) ((#("
	    (\"CALENDAR\" . \"blue\")
" 0 1 (fontified t) 1 5 (fontified nil) 5 6 (fontified nil rear-nonsticky t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified nil) 7 8 (face font-lock-string-face fontified nil) 8 16 (face font-lock-string-face fontified nil) 16 17 (face font-lock-string-face fontified nil) 17 20 (fontified nil) 20 21 (face font-lock-string-face fontified nil) 21 25 (face font-lock-string-face fontified nil) 25 26 (face font-lock-string-face fontified nil) 26 27 (face (rainbow-delimiters-depth-4-face) fontified nil) 27 28 (fontified nil)) . 7008) (undo-tree-id140 . -8) (undo-tree-id141 . -21) (undo-tree-id142 . -21) (undo-tree-id143 . -21) (undo-tree-id144 . -21) (undo-tree-id145 . -21) (undo-tree-id146 . -21) (undo-tree-id147 . -21) (undo-tree-id148 . -21) (undo-tree-id149 . -21) (undo-tree-id150 . -21) (undo-tree-id151 . -21) (undo-tree-id152 . -21) (undo-tree-id153 . -21) (undo-tree-id154 . -21) (undo-tree-id155 . -1) (undo-tree-id156 . -8) (undo-tree-id157 . -8) (undo-tree-id158 . -8) (undo-tree-id159 . -8) (undo-tree-id160 . -8) (undo-tree-id161 . -8) (undo-tree-id162 . -8) (undo-tree-id163 . -8) (undo-tree-id164 . -8) (undo-tree-id165 . -8) (undo-tree-id166 . -8) (undo-tree-id167 . -8) (undo-tree-id168 . -8) (undo-tree-id169 . -8) (undo-tree-id170 . -8) (7035 . 7036)) (25293 25560 387241 0) 0 nil])
([nil nil ((#("blue" 0 4 (face font-lock-string-face fontified t)) . 6952)) nil (25293 25579 783200 0) 0 nil] [nil nil ((7016 . 7020) (#("CALENDAR" 0 8 (face font-lock-string-face fontified t)) . 7016)) ((7016 . 7024) (#("DONE" 0 4 (face font-lock-string-face fontified t)) . 7016)) (25293 25558 254346 0) 0 nil])
([nil nil ((6898 . 6901) (#("green" 0 5 (face font-lock-string-face fontified t)) . 6898) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1)) nil (25293 25579 783197 0) 0 nil])
([nil nil ((7045 . 7046)) ((#("L" 0 1 (face font-lock-string-face fontified t)) . 7045)) (25293 25557 905172 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 6957 . 6958) (nil fontified nil 6950 . 6958) (6950 . 6958)) nil (25293 25579 783173 0) 0 nil])
([nil nil ((6926 . 6932) (#("blue" 0 4 (face font-lock-string-face fontified t)) . 6926)) ((6926 . 6930) (#("purple" 0 6 (face font-lock-string-face fontified t)) . 6926)) (25293 25557 520934 0) 0 nil])
([nil nil ((6950 . 6951)) nil (25293 25579 783167 0) 0 nil])
([nil nil ((6954 . 6959) (#("blue" 0 4 (face font-lock-string-face fontified t)) . 6954) (undo-tree-id59 . -4) (undo-tree-id61 . -4) (undo-tree-id63 . -4) (undo-tree-id65 . -4) (undo-tree-id67 . -4) (undo-tree-id69 . -4) (undo-tree-id71 . -4)) ((6954 . 6958) (#("white" 0 5 (face font-lock-string-face fontified t)) . 6954)) (25293 25557 215256 0) 0 nil])
([nil nil ((6951 . 6954) (#("0xf7768e" 0 7 (face font-lock-string-face fontified t) 7 8 (face font-lock-string-face rear-nonsticky t fontified t)) . 6951) (undo-tree-id185 . -7) (undo-tree-id186 . 8) (undo-tree-id187 . -7) (undo-tree-id188 . -7) (undo-tree-id189 . -7) 6958 (t 25293 25579 788968 177000)) nil (25293 25626 924918 0) 0 nil])
([nil nil ((6978 . 6981) (#("blue" 0 4 (face font-lock-string-face fontified t)) . 6978) (undo-tree-id45 . -4) (undo-tree-id47 . -4) (undo-tree-id49 . -4) (undo-tree-id51 . -4) (undo-tree-id53 . -4) (undo-tree-id55 . -4) (undo-tree-id57 . -4)) ((6978 . 6982) (#("red" 0 1 (face font-lock-string-face fontified t) 1 3 (face font-lock-string-face fontified t)) . 6978) (undo-tree-id139 . -2)) (25293 25556 888251 0) 0 nil])
([nil nil ((6954 . 6957) (6952 . 6954) (#("f" 0 1 (face font-lock-string-face fontified t)) . -6952) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) 6953 (6951 . 6953) (#("F" 0 1 (face font-lock-string-face fontified t)) . -6951) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (#("f" 0 1 (face font-lock-string-face fontified t)) . -6952) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (#("f" 0 1 (face font-lock-string-face fontified t)) . -6953) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) 6954 (6952 . 6954) (#("0" 0 1 (face font-lock-string-face fontified t)) . -6952) (undo-tree-id331 . -1) (#("0" 0 1 (face font-lock-string-face fontified t)) . -6953) (undo-tree-id332 . -1) 6954 (t 25293 25626 929988 120000)) nil (25293 25658 283200 0) 0 nil])
([nil nil ((7004 . 7010) (#("blue" 0 4 (face font-lock-string-face fontified t)) . 7004)) ((7004 . 7008) (#("yellow" 0 6 (face font-lock-string-face fontified t)) . 7004)) (25293 25556 555481 0) 0 nil])
([nil nil ((6898 . 6903) (#("l" 0 1 (face font-lock-string-face fontified t)) . -6898) (undo-tree-id333 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -6899) (undo-tree-id334 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -6900) (undo-tree-id335 . -1) 6901 (6898 . 6901) (#("ble" 0 3 (face font-lock-string-face fontified t)) . 6898) (t 25293 25658 289470 662000)) nil (25293 25772 142577 0) 0 nil])
([nil nil ((7029 . 7033) (#("blue" 0 4 (face font-lock-string-face fontified t)) . 7029) (undo-tree-id31 . -4) (undo-tree-id33 . -4) (undo-tree-id35 . -4) (undo-tree-id37 . -4) (undo-tree-id39 . -4) (undo-tree-id41 . -4) (undo-tree-id43 . -4)) ((7029 . 7033) (#("gray" 0 4 (face font-lock-string-face fontified t)) . 7029)) (25293 25556 162470 0) 0 nil])
([nil nil ((6898 . 6907) (#("black" 0 5 (face font-lock-string-face fontified t)) . 6898)) nil (25293 25798 120717 0) 0 nil])
([nil nil ((7070 . 7074) (#("blue" 0 4 (face font-lock-string-face fontified t)) . 7070) (undo-tree-id10 . -4) (undo-tree-id12 . -4) (undo-tree-id14 . -4) (undo-tree-id16 . -4) (undo-tree-id18 . -4) (undo-tree-id20 . -4) (undo-tree-id22 . -4) (undo-tree-id24 . -4) (undo-tree-id26 . -4) (undo-tree-id28 . -4)) ((7070 . 7074) (#("gray" 0 4 (face font-lock-string-face fontified t)) . 7070)) (25293 25555 709187 0) 0 nil])
([nil nil ((#("dark " 0 5 (face font-lock-string-face fontified nil)) . 6898)) ((6898 . 6903) (t 25293 25794 133923 281000)) (25293 25799 663519 0) 0 nil])
([nil nil ((6954 . 6958) (#("white" 0 5 (face font-lock-string-face fontified t)) . 6954)) ((6954 . 6959) (#("gray" 0 4 (face font-lock-string-face fontified t)) . 6954)) (25293 25555 333420 0) 0 nil] [nil nil ((nil rear-nonsticky nil 6985 . 6986) (nil fontified nil 6978 . 6986) (6978 . 6986) 6981 (#("red" 0 3 (face font-lock-string-face fontified t)) . 6978) (undo-tree-id77 . -3) (undo-tree-id78 . -2) (undo-tree-id80 . -3) (undo-tree-id82 . -2) (undo-tree-id84 . -2) (undo-tree-id86 . -2) (undo-tree-id88 . -2) (undo-tree-id90 . -2) (undo-tree-id92 . -2) (undo-tree-id94 . -2) (undo-tree-id96 . -2) (undo-tree-id98 . -2) (undo-tree-id100 . -2) (undo-tree-id102 . -2) 6981 (t 25293 25157 767961 955000)) ((6978 . 6981) (#("0xf7768e" 0 7 (face font-lock-string-face fontified nil) 7 8 (face font-lock-string-face rear-nonsticky nil fontified nil)) . 6978) (nil rear-nonsticky t 6985 . 6986) (t 25293 25223 477868 701000)) (25293 25223 470617 0) 0 nil])
([nil nil ((6898 . 6904) (t 25293 25794 133923 281000)) nil (25293 25815 636856 0) 0 nil] [nil nil ((6916 . 6923) (#("u" 0 1 (fontified nil)) . -6916) (undo-tree-id491 . -1) (#("d" 0 1 (fontified nil)) . -6917) (undo-tree-id492 . -1) 6918 (6905 . 6918) (6884 . 6905) (#("'" 0 1 (fontified nil)) . -6884) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -6885) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -6886) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -6887) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (#("I" 0 1 (fontified nil face font-lock-string-face)) . -6888) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (#("N" 0 1 (fontified nil face font-lock-string-face)) . -6889) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (#("B" 0 1 (fontified nil face font-lock-string-face)) . -6890) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (#("O" 0 1 (fontified nil face font-lock-string-face)) . -6891) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (#("X" 0 1 (fontified nil face font-lock-string-face)) . -6892) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -6893) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (#(" " 0 1 (fontified nil)) . -6894) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (#("." 0 1 (fontified nil)) . -6895) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (#(" " 0 1 (fontified nil)) . -6896) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (#("\"" 0 1 (rear-nonsticky t fontified nil face font-lock-string-face)) . -6897) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) 6898 (nil rear-nonsticky nil 6897 . 6898) (nil fontified nil 6897 . 6898) (nil fontified nil 6894 . 6897) (nil fontified nil 6888 . 6894) (6888 . 6898) (#("INBOX\" . \"" 0 6 (face font-lock-string-face fontified nil) 6 9 (fontified nil) 9 10 (face font-lock-string-face fontified nil)) . 6888) (undo-tree-id709 . -9) (undo-tree-id710 . -9) (undo-tree-id711 . -10) (undo-tree-id712 . -10) (undo-tree-id713 . -9) 6897 (t 25293 25794 133923 281000)) ((6888 . 6898) (#("INBOX\" . \"" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face) 2 3 (fontified nil face font-lock-string-face) 3 4 (fontified nil face font-lock-string-face) 4 5 (fontified nil face font-lock-string-face) 5 6 (fontified nil face font-lock-string-face) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (rear-nonsticky nil fontified nil face font-lock-string-face)) . 6888) (undo-tree-id714 . -9) (undo-tree-id715 . -10) (undo-tree-id716 . -9) (undo-tree-id717 . -10) (undo-tree-id718 . -9) (undo-tree-id719 . -10) (undo-tree-id720 . -5) (undo-tree-id721 . -6) (undo-tree-id722 . -5) (undo-tree-id723 . -6) (undo-tree-id724 . -5) (undo-tree-id725 . -6) (nil rear-nonsticky t 6897 . 6898) (6884 . 6898) (#("of meditation based o" 0 21 (fontified nil)) . 6884) (undo-tree-id726 . -21) (undo-tree-id727 . -21) (#("n stress reud" 0 11 (fontified nil) 11 12 (fontified nil) 12 13 (fontified nil)) . 6905) (undo-tree-id728 . -11) (undo-tree-id729 . -11) (6916 . 6918) (#("duction" 0 7 (fontified t)) . 6916) (undo-tree-id730 . -6) (undo-tree-id731 . -6)) (25293 25799 662775 0) 0 nil] [nil nil ((7085 . 7086) (#("bold))))

  )" 0 4 (fontified nil) 4 5 (face (rainbow-delimiters-depth-5-face) fontified nil) 5 6 (face (rainbow-delimiters-depth-4-face) fontified nil) 6 7 (face (rainbow-delimiters-depth-3-face) fontified nil) 7 8 (face (rainbow-delimiters-depth-2-face) fontified nil rear-nonsticky t) 8 9 (fontified nil) 9 10 (fontified nil) 10 12 (fontified nil) 12 13 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 7085) (undo-tree-id426 . -12) (undo-tree-id427 . -9) (undo-tree-id428 . -9) (undo-tree-id429 . -12) (undo-tree-id430 . -7) (undo-tree-id431 . -7) (undo-tree-id432 . -7) (undo-tree-id433 . -7) (undo-tree-id434 . -7) (undo-tree-id435 . -7) (undo-tree-id436 . -7) (undo-tree-id437 . -7) (undo-tree-id438 . -7) (undo-tree-id439 . -7) (undo-tree-id440 . -7) (undo-tree-id441 . -7) (undo-tree-id442 . -7) (undo-tree-id443 . -8) (undo-tree-id444 . -7) (undo-tree-id445 . -7) (undo-tree-id446 . -7) (undo-tree-id447 . -7) (undo-tree-id448 . -7) (undo-tree-id449 . -7) (undo-tree-id450 . -7) (undo-tree-id451 . -7) (undo-tree-id452 . -7) (undo-tree-id453 . -7) (undo-tree-id454 . -7) (undo-tree-id455 . -7) (undo-tree-id456 . -7) (undo-tree-id457 . -7) (undo-tree-id458 . -7) (undo-tree-id459 . -7) (undo-tree-id460 . -7) (undo-tree-id461 . -7) (undo-tree-id462 . -7) (undo-tree-id463 . -7) (undo-tree-id464 . -7) (undo-tree-id465 . -7) (undo-tree-id466 . -7) (undo-tree-id467 . -7) (undo-tree-id468 . -7) (undo-tree-id469 . -7) (undo-tree-id470 . -7) (undo-tree-id471 . -7) (undo-tree-id472 . -7) (undo-tree-id473 . -7) (undo-tree-id474 . -7) (undo-tree-id475 . -7) (undo-tree-id476 . -7) (undo-tree-id477 . -7) (undo-tree-id478 . -7) (undo-tree-id479 . -7) (undo-tree-id480 . -7) (undo-tree-id481 . -7) (undo-tree-id482 . -7) (undo-tree-id483 . -7) (undo-tree-id484 . -7) (undo-tree-id485 . -7) (undo-tree-id486 . -4) (undo-tree-id487 . -4) (undo-tree-id488 . -13) (undo-tree-id489 . -10) (undo-tree-id490 . -12) 7097 (t 25293 25794 133923 281000)) ((7085 . 7098) (#("ö" 0 1 (fontified nil)) . 7085)) (25293 25798 119664 0) 0 nil] [nil nil ((nil rear-nonsticky nil 7093 . 7094) (nil fontified nil 7089 . 7094) (7089 . 7094) 7100 (#("))))

  )

" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t) 2 3 (face (rainbow-delimiters-depth-3-face) fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t rear-nonsticky t) 4 5 (fontified t) 5 6 (fontified t) 6 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-1-face) fontified t) 9 10 (fontified t) 10 11 (fontified t)) . 7089) (undo-tree-id350 . -11) (undo-tree-id351 . -5) (undo-tree-id352 . -5) (undo-tree-id353 . -11) (undo-tree-id354 . -11) (undo-tree-id355 . -10) (undo-tree-id356 . -3) (undo-tree-id357 . -3) (undo-tree-id358 . -3) (undo-tree-id359 . -3) (undo-tree-id360 . -3) (undo-tree-id361 . -3) (undo-tree-id362 . -3) (undo-tree-id363 . -3) (undo-tree-id364 . -3) (undo-tree-id365 . -3) (undo-tree-id366 . -3) (undo-tree-id367 . -3) (undo-tree-id368 . -3) (undo-tree-id369 . 8) (undo-tree-id370 . -4) (undo-tree-id371 . -3) (undo-tree-id372 . -3) (undo-tree-id373 . -3) (undo-tree-id374 . -3) (undo-tree-id375 . -3) (undo-tree-id376 . -3) (undo-tree-id377 . -3) (undo-tree-id378 . -3) (undo-tree-id379 . -3) (undo-tree-id380 . -3) (undo-tree-id381 . -3) (undo-tree-id382 . -3) (undo-tree-id383 . -3) (undo-tree-id384 . -3) (undo-tree-id385 . -3) (undo-tree-id386 . -3) (undo-tree-id387 . -3) (undo-tree-id388 . -3) (undo-tree-id389 . -3) (undo-tree-id390 . -3) (undo-tree-id391 . -3) (undo-tree-id392 . -3) (undo-tree-id393 . -3) (undo-tree-id394 . -3) (undo-tree-id395 . -3) (undo-tree-id396 . -3) (undo-tree-id397 . -3) (undo-tree-id398 . -3) (undo-tree-id399 . -3) (undo-tree-id400 . -3) (undo-tree-id401 . -3) (undo-tree-id402 . -3) (undo-tree-id403 . -3) (undo-tree-id404 . -3) (undo-tree-id405 . -3) (undo-tree-id406 . -3) (undo-tree-id407 . -3) (undo-tree-id408 . -3) (undo-tree-id409 . -3) (undo-tree-id410 . -3) (undo-tree-id411 . -3) (undo-tree-id412 . -3) (undo-tree-id413 . -10) (undo-tree-id414 . -10) (undo-tree-id415 . -10) (undo-tree-id416 . -10) (undo-tree-id417 . -10) (undo-tree-id418 . -10) (undo-tree-id419 . -10) (undo-tree-id420 . -11) (undo-tree-id421 . -10) (undo-tree-id422 . -11) 7100 (t 25293 25794 133923 281000)) ((7089 . 7100) (#("dark " 0 4 (fontified nil) 4 5 (rear-nonsticky nil fontified nil)) . 7089) (undo-tree-id423 . -4) (undo-tree-id424 . 5) (undo-tree-id425 . -4) (nil rear-nonsticky t 7093 . 7094)) (25293 25798 50667 0) 0 nil])
([nil nil ((7056 . 7060) (7055 . 7057) (#("\"" 0 1 (fontified nil)) . -7055) (7055 . 7056) (#("(:foreground \"gray\" :weight bold)" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t) 1 12 (face font-lock-builtin-face fontified t) 12 13 (fontified t) 13 19 (face font-lock-string-face fontified t) 19 20 (fontified t) 20 27 (face font-lock-builtin-face fontified t) 27 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-5-face) fontified t)) . 7055) (undo-tree-id104 . -32) (undo-tree-id105 . -32) (undo-tree-id106 . -32) (undo-tree-id107 . -32) (undo-tree-id108 . 1) (undo-tree-id109 . -33) (undo-tree-id110 . 33) (undo-tree-id111 . -1) 7087) ((7055 . 7088) (#("\"" 0 1 (fontified nil)) . 7055) (7055 . 7056) (#("\"\"" 0 1 (face font-lock-string-face fontified nil) 1 2 (face font-lock-string-face fontified nil)) . 7055) (#("gray" 0 4 (face font-lock-string-face fontified t)) . 7056)) (25293 25554 837876 0) 0 nil])
nil
([nil nil ((6898 . 6903) (#("light gray" 0 6 (face font-lock-string-face fontified t) 6 10 (face font-lock-string-face fontified t)) . 6898) (undo-tree-id732 . -9) (undo-tree-id733 . 4) (undo-tree-id734 . -9) (undo-tree-id735 . -9) (undo-tree-id736 . -10) (undo-tree-id737 . -10) (undo-tree-id738 . -10) (undo-tree-id739 . -10) (undo-tree-id740 . -10) (undo-tree-id741 . -10) (undo-tree-id742 . -10) (undo-tree-id743 . -10) (undo-tree-id744 . -10) (undo-tree-id745 . -10) (undo-tree-id746 . -10) (undo-tree-id747 . -10) (undo-tree-id748 . -10) (undo-tree-id749 . -10) (undo-tree-id750 . -6) (undo-tree-id751 . -6) (undo-tree-id752 . -6) (undo-tree-id753 . -6) (undo-tree-id754 . -6) (undo-tree-id755 . -6) (undo-tree-id756 . -6) (undo-tree-id757 . -6) (undo-tree-id758 . -6) (undo-tree-id759 . -6) (undo-tree-id760 . -6) (undo-tree-id761 . -6) (undo-tree-id762 . -6) (undo-tree-id763 . -6) (undo-tree-id764 . -10) (undo-tree-id765 . -9) (undo-tree-id766 . -4) (undo-tree-id767 . -4) (undo-tree-id768 . -4) (undo-tree-id769 . -4) (undo-tree-id770 . -4) (undo-tree-id771 . -4) (undo-tree-id772 . -4) (undo-tree-id773 . -4) (undo-tree-id774 . -4) (undo-tree-id775 . -4) (undo-tree-id776 . -4) (undo-tree-id777 . -4) (undo-tree-id778 . -4) (undo-tree-id779 . -4) (undo-tree-id780 . -4) (undo-tree-id781 . -4) (undo-tree-id782 . -4) (undo-tree-id783 . -4) (undo-tree-id784 . -4) (undo-tree-id785 . -4) (undo-tree-id786 . -4) (undo-tree-id787 . -9) (undo-tree-id788 . -9) (undo-tree-id789 . -9) (undo-tree-id790 . -9) (undo-tree-id791 . -9) (undo-tree-id792 . -9) (undo-tree-id793 . -9) (undo-tree-id794 . -9) (undo-tree-id795 . -9) (undo-tree-id796 . -9) (undo-tree-id797 . -9) (undo-tree-id798 . -9) (undo-tree-id799 . -9) (undo-tree-id800 . -9) (undo-tree-id801 . -9) (undo-tree-id802 . -9) (undo-tree-id803 . -9) (undo-tree-id804 . -9) (undo-tree-id805 . -9) (undo-tree-id806 . -9) (undo-tree-id807 . -9) (undo-tree-id808 . -9) 6907 (t 25293 25815 658622 493000)) nil (25293 25827 890592 0) 0 nil])
nil
nil
nil
([nil nil ((6954 . 6959) (#("gray" 0 4 (face font-lock-string-face fontified t)) . 6954)) ((6954 . 6958) (#("white" 0 5 (face font-lock-string-face fontified t)) . 6954)) (25293 25554 474765 0) 0 nil])
([nil nil ((6978 . 6982) (#("blue" 0 4 (face font-lock-string-face fontified t)) . 6978) (t 25293 25827 898088 530000)) nil (25293 26061 704796 0) 0 nil])
([nil nil ((6898 . 6903) (#("green" 0 5 (face font-lock-string-face fontified t)) . 6898)) ((6898 . 6903) (#("white" 0 5 (face font-lock-string-face fontified t)) . 6898)) (25293 25554 102516 0) 0 nil])
([nil nil ((#("	    (\"CALENDAR\" . \"blue\")
" 0 4 (fontified t) 4 5 (fontified t rear-nonsticky t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t) 6 7 (face font-lock-string-face fontified t) 7 15 (face font-lock-string-face fontified t) 15 16 (face font-lock-string-face fontified t) 16 19 (fontified t) 19 20 (face font-lock-string-face fontified t) 20 24 (face font-lock-string-face fontified t) 24 25 (face font-lock-string-face fontified t) 25 26 (face (rainbow-delimiters-depth-4-face) fontified t) 26 27 (fontified t)) . 7012) (undo-tree-id858 . -19) 7031) nil (25293 26061 704795 0) 0 nil])
([nil nil ((6954 . 6959) (#("white" 0 5 (face font-lock-string-face fontified t)) . 6954)) ((6954 . 6959) (#("green" 0 5 (face font-lock-string-face fontified t)) . 6954)) (25293 25553 586819 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -7007) (6984 . 7008) 6981) nil (25293 26061 704792 0) 0 nil])
([nil nil ((6978 . 6983) (t 25293 25406 89012 842000)) ((#("Light" 0 5 (face font-lock-string-face fontified t)) . 6978) (undo-tree-id116 . -5) (undo-tree-id117 . -5) (undo-tree-id118 . -5) (undo-tree-id119 . -5) (undo-tree-id120 . -5) (undo-tree-id121 . -5) (undo-tree-id122 . -5) (undo-tree-id123 . -5) (undo-tree-id124 . -5) (undo-tree-id125 . -5) (undo-tree-id126 . -5) (undo-tree-id127 . -5) (undo-tree-id128 . -5) (undo-tree-id129 . -5) (undo-tree-id130 . -5) (undo-tree-id131 . -5) (undo-tree-id132 . -5) (undo-tree-id133 . -5) (undo-tree-id134 . -5) (undo-tree-id135 . -5) (undo-tree-id136 . -5) (undo-tree-id137 . -5) (undo-tree-id138 . -5)) (25293 25553 204390 0) 0 nil])
([nil nil ((6992 . 6999) (#("w" 0 1 (face font-lock-string-face fontified t)) . -6992) (undo-tree-id851 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -6993) (undo-tree-id852 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -6994) (undo-tree-id853 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -6995) (undo-tree-id854 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -6996) (undo-tree-id855 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -6997) (undo-tree-id856 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -6998) (undo-tree-id857 . -1) 6999 (6992 . 6999) (#("TODO" 0 4 (face font-lock-string-face fontified t)) . 6992)) nil (25293 26061 704789 0) 0 nil])
([nil nil ((6983 . 6984) (#("r" 0 1 (face font-lock-string-face fontified t)) . 6983) (undo-tree-id112 . 1)) ((6983 . 6984) (#("R" 0 1 (face font-lock-string-face fontified t)) . 6983) (t 25293 25427 292569 252000)) (25293 25552 989560 0) 0 nil])
([nil nil ((#("(:foreground \"blue\" :weight bold)" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t) 1 12 (face font-lock-builtin-face fontified t) 12 13 (fontified t) 13 14 (face font-lock-string-face fontified t) 14 18 (face font-lock-string-face fontified t) 18 19 (face font-lock-string-face fontified t) 19 20 (fontified t) 20 27 (face font-lock-builtin-face fontified t) 27 28 (fontified t) 28 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-5-face) fontified t)) . 7057) (undo-tree-id848 . -32) (undo-tree-id849 . -32) (undo-tree-id850 . -2) 7059) nil (25293 26061 704779 0) 0 nil])
([nil nil ((#("t" 0 1 (face (font-lock-warning-face) help-echo "Easy to misread; consider moving the element to the next line" fontified t)) . -7070) (undo-tree-id113 . -1) (#(" " 0 1 (face (font-lock-warning-face) help-echo "Easy to misread; consider moving the element to the next line" fontified t)) . -7071) (undo-tree-id114 . -1) (#("a" 0 1 (face (font-lock-warning-face) help-echo "Easy to misread; consider moving the element to the next line" fontified t)) . -7072) (undo-tree-id115 . -1) 7073 (7071 . 7073) (7070 . 7071) (t 25293 25427 292569 252000)) ((#("t" 0 1 (face (font-lock-warning-face) help-echo "Easy to misread; consider moving the element to the next line" fontified nil)) . 7070) (#(" a" 0 1 (face (font-lock-warning-face) help-echo "Easy to misread; consider moving the element to the next line" fontified nil) 1 2 (face (font-lock-warning-face) help-echo "Easy to misread; consider moving the element to the next line" fontified nil)) . 7071) (7070 . 7073)) (25293 25552 989073 0) 0 nil])
([nil nil ((7058 . 7063) (7057 . 7059) (#("\"" 0 1 (fontified nil)) . -7057) (7057 . 7058)) nil (25293 26061 704772 0) 0 nil])
nil
([nil nil ((6903 . 6909) (#("s" 0 1 (face font-lock-string-face fontified t)) . -6903) (undo-tree-id847 . -1) 6904 (6903 . 6904)) nil (25293 26061 704771 0) 0 nil])
([nil nil ((7010 . 7022) (#("gold" 0 4 (face font-lock-string-face fontified t)) . 7010)) nil (25293 26061 704768 0) 0 nil])
([nil nil ((7017 . 7021) (#("g" 0 1 (face font-lock-string-face fontified t)) . -7017) (undo-tree-id845 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -7018) (undo-tree-id846 . -1) 7019 (7015 . 7019) (#("organge" 0 7 (face font-lock-string-face fontified t)) . 7015)) nil (25293 26061 704766 0) 0 nil])
([nil nil ((6967 . 6971) (6958 . 6967) (#("#f7768e" 0 7 (face font-lock-string-face fontified t)) . 6958) (undo-tree-id843 . -1) (undo-tree-id844 . -1) 6959) nil (25293 26061 704762 0) 0 nil])
([nil nil ((6958 . 6963) (#("deep sky blue" 0 13 (face font-lock-string-face fontified t)) . 6958) (undo-tree-id838 . -12) (undo-tree-id839 . -12) (undo-tree-id840 . -12) (undo-tree-id841 . -12) (undo-tree-id842 . -12) 6970) nil (25293 26061 704758 0) 0 nil])
([nil nil ((6932 . 6944) (#("blue" 0 4 (face font-lock-string-face fontified t)) . 6932) (undo-tree-id837 . -3)) nil (25293 26061 704751 0) 0 nil])
([nil nil ((7054 . 7065) (7050 . 7054) (#("blue" 0 4 (face font-lock-string-face fontified t)) . 7050)) nil (25293 26061 704749 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -7105) (7067 . 7106) 7064) nil (25293 26061 704747 0) 0 nil])
([nil nil ((7075 . 7079) (#("CALENDAR" 0 8 (face font-lock-string-face fontified t)) . 7075)) nil (25293 26061 704746 0) 0 nil])
([nil nil ((7084 . 7094) (#("light sea green" 0 15 (face font-lock-string-face fontified t)) . 7084)) nil (25293 26061 704744 0) 0 nil])
([nil nil ((7117 . 7127) (#("black" 0 5 (face font-lock-string-face fontified t)) . 7117) (undo-tree-id809 . -5) (undo-tree-id810 . -5) (undo-tree-id811 . -5) (undo-tree-id812 . -5) (undo-tree-id813 . -5) (undo-tree-id814 . -5) (undo-tree-id815 . -5) (undo-tree-id816 . -5) (undo-tree-id817 . -5) (undo-tree-id818 . -5) (undo-tree-id819 . -5) (undo-tree-id820 . -5) (undo-tree-id821 . -5) (undo-tree-id822 . -5) (undo-tree-id823 . -5) (undo-tree-id824 . -5) (undo-tree-id825 . -5) (undo-tree-id826 . -5) (undo-tree-id827 . -5) (undo-tree-id828 . -5) (undo-tree-id829 . -5) (undo-tree-id830 . -5) (undo-tree-id831 . -5) (undo-tree-id832 . -5) (undo-tree-id833 . -5) (undo-tree-id834 . -5) (undo-tree-id835 . -5) (undo-tree-id836 . -5)) nil (25293 26061 704738 0) 0 nil])
([nil nil ((7016 . 7022) (#("f" 0 1 (face font-lock-string-face fontified t)) . -7016) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -7017) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -7018) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -7019) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) 7020 (7016 . 7020) (#("dark orange" 0 11 (face font-lock-string-face fontified t)) . 7016) (undo-tree-id967 . -10) (undo-tree-id968 . -10) (undo-tree-id969 . -10) (undo-tree-id970 . -11) (undo-tree-id971 . -11) (undo-tree-id972 . -11) (undo-tree-id973 . -11) (undo-tree-id974 . -11) (undo-tree-id975 . -11) (undo-tree-id976 . -11) (undo-tree-id977 . -11) (undo-tree-id978 . -11) (undo-tree-id979 . -11) (undo-tree-id980 . -11) (undo-tree-id981 . -11) (undo-tree-id982 . -11) (undo-tree-id983 . -11) (undo-tree-id984 . -5) (undo-tree-id985 . -5) (undo-tree-id986 . -5) (undo-tree-id987 . -5) (undo-tree-id988 . -5) (undo-tree-id989 . -5) (undo-tree-id990 . -5) (undo-tree-id991 . -5) (undo-tree-id992 . -5) (undo-tree-id993 . -5) (undo-tree-id994 . -5) (undo-tree-id995 . -5) (undo-tree-id996 . -5) (undo-tree-id997 . -5) (undo-tree-id998 . -11) (undo-tree-id999 . -10) (undo-tree-id1000 . -3) (undo-tree-id1001 . -3) (undo-tree-id1002 . -3) (undo-tree-id1003 . -3) (undo-tree-id1004 . -3) (undo-tree-id1005 . -3) (undo-tree-id1006 . -3) (undo-tree-id1007 . -3) (undo-tree-id1008 . -3) (undo-tree-id1009 . -3) (undo-tree-id1010 . -3) (undo-tree-id1011 . -3) (undo-tree-id1012 . -3) (undo-tree-id1013 . -3) (undo-tree-id1014 . -3) (undo-tree-id1015 . -3) (undo-tree-id1016 . -3) (undo-tree-id1017 . -3) (undo-tree-id1018 . -3) (undo-tree-id1019 . -3) (undo-tree-id1020 . -3) (undo-tree-id1021 . -10) (undo-tree-id1022 . -10) (undo-tree-id1023 . -10) (undo-tree-id1024 . -10) (undo-tree-id1025 . -10) (undo-tree-id1026 . -10) (undo-tree-id1027 . -10) (undo-tree-id1028 . -10) (undo-tree-id1029 . -10) (undo-tree-id1030 . -10) (undo-tree-id1031 . -10) (undo-tree-id1032 . -10) (undo-tree-id1033 . -10) (undo-tree-id1034 . -10) (undo-tree-id1035 . -10) (undo-tree-id1036 . -10) (undo-tree-id1037 . -10) (undo-tree-id1038 . -10) (undo-tree-id1039 . -10) (undo-tree-id1040 . -10) (undo-tree-id1041 . -10) (undo-tree-id1042 . -10) 7026 (t 25293 26061 727832 135000)) nil (25293 26120 248592 0) 0 nil])
([nil nil ((7016 . 7027) (#("tomato" 0 6 (face font-lock-string-face fontified t)) . 7016) (undo-tree-id1043 . -5) (undo-tree-id1044 . -5) (undo-tree-id1045 . -5) (undo-tree-id1046 . -5) (undo-tree-id1047 . -5) (undo-tree-id1048 . -5) (undo-tree-id1049 . -5) (undo-tree-id1050 . -5) (undo-tree-id1051 . -5) (undo-tree-id1052 . -5) (undo-tree-id1053 . -5) (undo-tree-id1054 . -5) (undo-tree-id1055 . -5) (undo-tree-id1056 . -5) (undo-tree-id1057 . -5) (undo-tree-id1058 . -5) (undo-tree-id1059 . -5) (undo-tree-id1060 . -5) (undo-tree-id1061 . -5) (undo-tree-id1062 . -5) (undo-tree-id1063 . -5) (undo-tree-id1064 . -5) (undo-tree-id1065 . -5) (undo-tree-id1066 . -5) (undo-tree-id1067 . -5) (undo-tree-id1068 . -5) (undo-tree-id1069 . -5) (undo-tree-id1070 . -5) (undo-tree-id1071 . -5) (undo-tree-id1072 . -5) (undo-tree-id1073 . -5) (undo-tree-id1074 . -5) (undo-tree-id1075 . -5) (undo-tree-id1076 . -5) (undo-tree-id1077 . -5) (undo-tree-id1078 . -5) (undo-tree-id1079 . -5) (undo-tree-id1080 . -5) (undo-tree-id1081 . -5) (undo-tree-id1082 . -5) (undo-tree-id1083 . -5) (undo-tree-id1084 . -5) (undo-tree-id1085 . -5) (undo-tree-id1086 . -5) (undo-tree-id1087 . -5) (undo-tree-id1088 . -5) (undo-tree-id1089 . -5) (undo-tree-id1090 . -5) (undo-tree-id1091 . -5) (undo-tree-id1092 . -5) (undo-tree-id1093 . -5) (undo-tree-id1094 . -5) (undo-tree-id1095 . -5) (undo-tree-id1096 . -5) (undo-tree-id1097 . -5) (undo-tree-id1098 . -5) (undo-tree-id1099 . -5) (undo-tree-id1100 . -5) (undo-tree-id1101 . -5) (undo-tree-id1102 . -5) (undo-tree-id1103 . -5) (undo-tree-id1104 . -5) (undo-tree-id1105 . -5) (undo-tree-id1106 . -5) (undo-tree-id1107 . -5) (undo-tree-id1108 . -5) (undo-tree-id1109 . -5) (undo-tree-id1110 . -5) (undo-tree-id1111 . -5) (undo-tree-id1112 . -5) (undo-tree-id1113 . -5) (undo-tree-id1114 . -5) (undo-tree-id1115 . -5) (undo-tree-id1116 . -5) (undo-tree-id1117 . -5) (undo-tree-id1118 . -5) (undo-tree-id1119 . -5) (undo-tree-id1120 . -5) (undo-tree-id1121 . -5) (undo-tree-id1122 . -5) (undo-tree-id1123 . -5) (undo-tree-id1124 . -5) (undo-tree-id1125 . -5) (undo-tree-id1126 . -5) (undo-tree-id1127 . -5) (undo-tree-id1128 . -5) (undo-tree-id1129 . -5) (undo-tree-id1130 . -5) (undo-tree-id1131 . -5) (undo-tree-id1132 . -5) (undo-tree-id1133 . -5) (undo-tree-id1134 . -5) (t 25293 26120 256107 986000)) nil (25293 26129 751361 0) 0 nil])
([nil nil ((apply -6 3587 3715 undo--wrap-and-run-primitive-undo 3587 3715 ((3639 . 3642) (3587 . 3590) 3684)) (t 25293 26129 759702 346000)) nil (25297 34067 239918 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 7404 . 7405) (nil fontified nil 7144 . 7405) (7144 . 7405) (7143 . 7144) (7142 . 7143) (t 25297 34067 287156 167000) 7141) nil (25307 47086 163258 0) 0 nil])
([nil nil ((#("(defun org-archive-done-tasks ()
  \"Archive all tasks marked DONE in the file.\"
  (interactive)
  (mapc (lambda(entry)
          (goto-char entry)
          (org-archive-subtree))
        (reverse (org-map-entries (lambda () (point)) \"TODO=\\\"★ DONE\\\"\" 'file))))
" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 29 (face font-lock-function-name-face fontified t) 29 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-2-face) fontified t) 31 32 (face (rainbow-delimiters-depth-2-face) fontified t) 32 35 (fontified t) 35 79 (face font-lock-doc-face fontified t) 79 82 (fontified t) 82 83 (face (rainbow-delimiters-depth-2-face) fontified t) 83 94 (face font-lock-keyword-face fontified t) 94 95 (face (rainbow-delimiters-depth-2-face) fontified t) 95 98 (fontified t) 98 99 (face (rainbow-delimiters-depth-2-face) fontified t) 99 104 (fontified t) 104 105 (face (rainbow-delimiters-depth-3-face) fontified t) 105 111 (face font-lock-keyword-face fontified t) 111 112 (face (rainbow-delimiters-depth-4-face) fontified t) 112 117 (fontified t) 117 118 (face (rainbow-delimiters-depth-4-face) fontified t) 118 129 (fontified t) 129 130 (face (rainbow-delimiters-depth-4-face) fontified t) 130 145 (fontified t) 145 146 (face (rainbow-delimiters-depth-4-face) fontified t) 146 157 (fontified t) 157 158 (face (rainbow-delimiters-depth-4-face) fontified t) 158 177 (fontified t) 177 178 (face (rainbow-delimiters-depth-4-face) fontified t) 178 179 (face (rainbow-delimiters-depth-3-face) fontified t) 179 188 (fontified t) 188 189 (face (rainbow-delimiters-depth-3-face) fontified t) 189 197 (fontified t) 197 198 (face (rainbow-delimiters-depth-4-face) fontified t) 198 214 (fontified t) 214 215 (face (rainbow-delimiters-depth-5-face) fontified t) 215 221 (face font-lock-keyword-face fontified t) 221 222 (fontified t) 222 223 (face (rainbow-delimiters-depth-6-face) fontified t) 223 224 (face (rainbow-delimiters-depth-6-face) fontified t) 224 225 (fontified t) 225 226 (face (rainbow-delimiters-depth-6-face) fontified t) 226 231 (fontified t) 231 232 (face (rainbow-delimiters-depth-6-face) fontified t) 232 233 (face (rainbow-delimiters-depth-5-face) fontified t) 233 234 (fontified t) 234 251 (face font-lock-string-face fontified t) 251 257 (fontified t) 257 258 (face (rainbow-delimiters-depth-4-face) fontified t) 258 259 (face (rainbow-delimiters-depth-3-face) fontified t) 259 260 (face (rainbow-delimiters-depth-2-face) fontified t) 260 261 (face (rainbow-delimiters-depth-1-face) rear-nonsticky t fontified t) 261 262 (fontified t)) . 7144) (undo-tree-id4 . -260) (undo-tree-id5 . 1) (undo-tree-id6 . -260) (undo-tree-id7 . -32) (undo-tree-id8 . -260) (undo-tree-id9 . -32) (undo-tree-id10 . -32) (undo-tree-id11 . -260) 7176 (t 25307 47086 196062 889000)) nil (25307 47578 71863 0) 0 nil])
([nil nil ((9535 . 9537)) nil (25307 47578 71853 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 9564 . 9565) (#("
" 0 1 (fontified nil)) . -9594) (9563 . 9595) 9536) nil (25307 47578 71852 0) 0 nil])
([nil nil ((#("C" 0 1 (face font-lock-string-face fontified t)) . 9566)) nil (25307 47578 71851 0) 0 nil])
([nil nil ((#("-" 0 1 (face font-lock-string-face fontified t)) . 9566)) nil (25307 47578 71850 0) 0 nil])
([nil nil ((9581 . 9585) (#("bulk-unmark" 0 11 (fontified t)) . 9581) (undo-tree-id2 . -11) (undo-tree-id3 . -11)) nil (25307 47578 71848 0) 0 nil])
([nil nil ((8416 . 8417) (#("A" 0 1 (face font-lock-string-face fontified t)) . 8416)) nil (25307 47578 71843 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 8450 . 8451) (#("
" 0 1 (fontified nil)) . -8485) (8449 . 8486) 8416) nil (25307 47578 71842 0) 0 nil])
([nil nil ((8452 . 8453) (#("a" 0 1 (face font-lock-string-face fontified t)) . 8452)) nil (25307 47578 71839 0) 0 nil])
([nil nil ((8467 . 8474) (#("toggle-archive-tag" 0 18 (fontified t)) . 8467) (undo-tree-id0 . -18) (undo-tree-id1 . -18)) nil (25307 47578 71834 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 7656 . 7657) (#("
" 0 1 (fontified nil)) . -8018) (7650 . 8019) 7637 (t 25307 47578 81267 113000)) nil (25310 46705 517855 0) 0 nil])
([nil nil ((7661 . 7662) (#("mu" 0 2 (fontified t face font-lock-string-face)) . 7661)) nil (25310 46705 517853 0) 0 nil])
([nil nil ((7662 . 7663)) nil (25310 46705 517852 0) 0 nil])
([nil nil ((7662 . 7663) (#("t" 0 1 (fontified t face font-lock-string-face)) . -7662) (undo-tree-id404 . -1) 7663) nil (25310 46705 517851 0) 0 nil])
([nil nil ((7666 . 7670) (#("M" 0 1 (fontified t face font-lock-string-face)) . -7666) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) 7667 (7666 . 7667) (#("Music" 0 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face)) . 7666)) nil (25310 46705 517847 0) 0 nil])
([nil nil ((7895 . 7898) (7894 . 7895) (#("SOMEDAY" 0 7 (fontified t face font-lock-string-face)) . 7894)) nil (25310 46705 518551 0) 0 nil])
([nil nil ((7765 . 7770) (#("music" 0 5 (fontified t face font-lock-string-face)) . 7765)) nil (25310 46722 42297 0) 0 nil] [nil nil ((7717 . 7722) (#("M" 0 1 (fontified t face font-lock-string-face)) . -7717) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -7718) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -7719) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -7720) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -7721) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) 7722 (7717 . 7722) (#("TODO" 0 4 (fontified t face font-lock-string-face)) . 7717) (undo-tree-id367 . -4) (undo-tree-id368 . -4) (undo-tree-id369 . -4) (undo-tree-id370 . -4) (undo-tree-id371 . -4) (undo-tree-id372 . -4) (undo-tree-id373 . -4) (undo-tree-id374 . -4) (undo-tree-id375 . -4) (undo-tree-id376 . -4) (undo-tree-id377 . -4) (undo-tree-id378 . -4) (undo-tree-id379 . -4) (undo-tree-id380 . -4) (undo-tree-id381 . -4) (undo-tree-id382 . -4) (undo-tree-id383 . -4) (undo-tree-id384 . -4) (undo-tree-id385 . -4) (undo-tree-id386 . -4) (undo-tree-id387 . -4)) ((7717 . 7721) (#("Music" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face) 2 3 (fontified nil face font-lock-string-face) 3 4 (fontified nil face font-lock-string-face) 4 5 (fontified nil face font-lock-string-face)) . 7717) (undo-tree-id405 . -5) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -2) (undo-tree-id421 . -2) (undo-tree-id422 . -2) (undo-tree-id423 . -2) (undo-tree-id424 . -2) (undo-tree-id425 . -2) (undo-tree-id426 . -2) (undo-tree-id427 . -2) (undo-tree-id428 . -2) (undo-tree-id429 . -2) (undo-tree-id430 . -2) (undo-tree-id431 . -2) (undo-tree-id432 . -2) (undo-tree-id433 . -2) (undo-tree-id434 . -3) (undo-tree-id435 . -3) (undo-tree-id436 . -3) (undo-tree-id437 . -3) (undo-tree-id438 . -3) (undo-tree-id439 . -3) (undo-tree-id440 . -3) (undo-tree-id441 . -4) (undo-tree-id442 . -4) (undo-tree-id443 . -4) (undo-tree-id444 . -4) (undo-tree-id445 . -4) (undo-tree-id446 . -4) (undo-tree-id447 . -4) (undo-tree-id448 . -5) (undo-tree-id449 . -5) (undo-tree-id450 . -5) (undo-tree-id451 . -5) (undo-tree-id452 . -5) (undo-tree-id453 . -5) (undo-tree-id454 . -5) (undo-tree-id455 . -5) (undo-tree-id456 . -5) (undo-tree-id457 . -5) (undo-tree-id458 . -5) (undo-tree-id459 . -5) (undo-tree-id460 . -5) (undo-tree-id461 . -5) (undo-tree-id462 . -5) (undo-tree-id463 . -5) (undo-tree-id464 . -5) (undo-tree-id465 . -5) (undo-tree-id466 . -5) (undo-tree-id467 . -5) (undo-tree-id468 . -5) (undo-tree-id469 . -5) (undo-tree-id470 . -5) (undo-tree-id471 . -5) (undo-tree-id472 . -5) (undo-tree-id473 . -5) (undo-tree-id474 . -5) (undo-tree-id475 . -5) (undo-tree-id476 . -4) (undo-tree-id477 . -4) (undo-tree-id478 . -4) (undo-tree-id479 . -4) (undo-tree-id480 . -4) (undo-tree-id481 . -4) (undo-tree-id482 . -4) (undo-tree-id483 . -4) (undo-tree-id484 . -4) (undo-tree-id485 . -4) (undo-tree-id486 . -4) (undo-tree-id487 . -4) (undo-tree-id488 . -4) (undo-tree-id489 . -4) (undo-tree-id490 . -3) (undo-tree-id491 . -3) (undo-tree-id492 . -3) (undo-tree-id493 . -3) (undo-tree-id494 . -3) (undo-tree-id495 . -3) (undo-tree-id496 . -3) (undo-tree-id497 . -2) (undo-tree-id498 . -2) (undo-tree-id499 . -2) (undo-tree-id500 . -2) (undo-tree-id501 . -2) (undo-tree-id502 . -2) (undo-tree-id503 . -2) (undo-tree-id504 . -2) (undo-tree-id505 . -2) (undo-tree-id506 . -2) (undo-tree-id507 . -2) (undo-tree-id508 . -2) (undo-tree-id509 . -2) (undo-tree-id510 . -2) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (7717 . 7722) (#("Study" 0 5 (fontified t face font-lock-string-face)) . 7717) (undo-tree-id532 . -4) (undo-tree-id533 . -4)) (25310 46705 517810 0) 0 nil])
([nil nil ((#("download" 0 8 (fontified t face font-lock-string-face)) . 7780)) nil (25310 46722 42295 0) 0 nil])
nil
([nil nil ((7755 . 7757) (#("and" 0 3 (fontified t face font-lock-keyword-face)) . 7755)) nil (25310 46722 42377 0) 0 nil])
([nil nil ((7779 . 7787)) nil (25310 46750 233642 0) 0 nil] [nil nil ((7773 . 7782) (#("tags" 0 4 (fontified t)) . 7773)) ((7773 . 7777) (#("researchu" 0 9 (fontified t)) . 7773) (undo-tree-id534 . -8) (undo-tree-id535 . -8)) (25310 46722 42286 0) 0 nil])
([nil nil ((7854 . 7863) (#(" " 0 1 (fontified t face font-lock-string-face)) . -7854) (undo-tree-id541 . -1) 7855 (7839 . 7855) (#("S" 0 1 (fontified t face font-lock-string-face)) . -7839) (undo-tree-id542 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -7840) (undo-tree-id543 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -7841) (undo-tree-id544 . -1) (#("d" 0 1 (fontified t face font-lock-string-face)) . -7842) (undo-tree-id545 . -1) 7843 (#("y" 0 1 (fontified t face font-lock-string-face)) . -7843) (undo-tree-id546 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -7844) (undo-tree-id547 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -7845) (undo-tree-id548 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -7846) (undo-tree-id549 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -7847) (undo-tree-id550 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -7848) (undo-tree-id551 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -7849) (undo-tree-id552 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -7850) (undo-tree-id553 . -1) 7851 (7839 . 7851) (#("TODO music download" 0 19 (fontified t face font-lock-string-face)) . 7839) (undo-tree-id554 . -18) (undo-tree-id555 . -18) (undo-tree-id556 . -18) (undo-tree-id557 . -15) (undo-tree-id558 . -15) (undo-tree-id559 . -15) (undo-tree-id560 . -15) (undo-tree-id561 . -15) (undo-tree-id562 . -15) (undo-tree-id563 . -15) (undo-tree-id564 . -15) (undo-tree-id565 . -15) (undo-tree-id566 . -15) (undo-tree-id567 . -15) (undo-tree-id568 . -15) (undo-tree-id569 . -15) (undo-tree-id570 . -15) (undo-tree-id571 . -15) (undo-tree-id572 . -15) (undo-tree-id573 . -15) (undo-tree-id574 . -15) (undo-tree-id575 . -15) (undo-tree-id576 . -15) (undo-tree-id577 . -15) (undo-tree-id578 . -11) (undo-tree-id579 . -11) (undo-tree-id580 . -11) (undo-tree-id581 . -11) (undo-tree-id582 . -11) (undo-tree-id583 . -11) (undo-tree-id584 . -11) (undo-tree-id585 . -11) (undo-tree-id586 . -11) (undo-tree-id587 . -11) (undo-tree-id588 . -11) (undo-tree-id589 . -11) (undo-tree-id590 . -11) (undo-tree-id591 . -11) (undo-tree-id592 . -5) (undo-tree-id593 . -5) (undo-tree-id594 . -5) (undo-tree-id595 . -5) (undo-tree-id596 . -5) (undo-tree-id597 . -5) (undo-tree-id598 . -5) (undo-tree-id599 . -5) (undo-tree-id600 . -5) (undo-tree-id601 . -5) (undo-tree-id602 . -5) (undo-tree-id603 . -5) (undo-tree-id604 . -5) (undo-tree-id605 . -5) (undo-tree-id606 . -19) (undo-tree-id607 . -18) (undo-tree-id608 . -3) (undo-tree-id609 . -3) (undo-tree-id610 . -3) (undo-tree-id611 . -3) (undo-tree-id612 . -3) (undo-tree-id613 . -3) (undo-tree-id614 . -3) (undo-tree-id615 . -3) (undo-tree-id616 . -3) (undo-tree-id617 . -3) (undo-tree-id618 . -3) (undo-tree-id619 . -3) (undo-tree-id620 . -3) (undo-tree-id621 . -3) (undo-tree-id622 . -3) (undo-tree-id623 . -3) (undo-tree-id624 . -3) (undo-tree-id625 . -3) (undo-tree-id626 . -3) (undo-tree-id627 . -3) (undo-tree-id628 . -3) (undo-tree-id629 . -9) (undo-tree-id630 . -9) (undo-tree-id631 . -9) (undo-tree-id632 . -9) (undo-tree-id633 . -9) (undo-tree-id634 . -9) (undo-tree-id635 . -9) (undo-tree-id636 . -9) (undo-tree-id637 . -9) (undo-tree-id638 . -9) (undo-tree-id639 . -9) (undo-tree-id640 . -9) (undo-tree-id641 . -9) (undo-tree-id642 . -9) (undo-tree-id643 . -9) (undo-tree-id644 . -9) (undo-tree-id645 . -9) (undo-tree-id646 . -9) (undo-tree-id647 . -9) (undo-tree-id648 . -9) (undo-tree-id649 . -9) (undo-tree-id650 . -18) (undo-tree-id651 . -18) (undo-tree-id652 . -18) (undo-tree-id653 . -18) (undo-tree-id654 . -18) (undo-tree-id655 . -18) (undo-tree-id656 . -18) (undo-tree-id657 . -18) (undo-tree-id658 . -18) (undo-tree-id659 . -18) (undo-tree-id660 . -18) (undo-tree-id661 . -18) (undo-tree-id662 . -18) (undo-tree-id663 . -18) (undo-tree-id664 . -18) (undo-tree-id665 . -18) (undo-tree-id666 . -18) (undo-tree-id667 . -18) (undo-tree-id668 . -18) (undo-tree-id669 . -18) (undo-tree-id670 . -18) (undo-tree-id671 . -18) 7857) nil (25310 46750 233634 0) 0 nil])
nil
([nil nil ((7797 . 7802) (7796 . 7798) (#("\"" 0 1 (fontified nil)) . -7796) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (7794 . 7797) (7791 . 7794) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-8-face))) . 7792) (undo-tree-id538 . -1) (7791 . 7792) (7790 . 7792) (#("(" 0 1 (fontified nil)) . -7790) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (7789 . 7791)) nil (25310 46860 828603 0) 0 nil])
([nil nil ((8048 . 8049) (#("_" 0 1 (fontified nil)) . 8048) (8048 . 8049) (#("_" 0 1 (fontified nil)) . 8048) (8041 . 8049)) ((#("
      " 0 1 (fontified t) 1 7 (fontified nil)) . 8041) (undo-tree-id808 . -7) (undo-tree-id809 . -7) (undo-tree-id810 . -7) (#("_" 0 1 (fontified nil)) . 8048) (8048 . 8049) (#("_" 0 1 (fontified nil)) . 8048) (8048 . 8049) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 8048)) (25310 46862 872596 0) 0 nil])
([nil nil ((#("(tags \"think\")" 0 1 (fontified t face (rainbow-delimiters-depth-8-face)) 1 6 (fontified t) 6 12 (fontified t face font-lock-string-face) 12 13 (fontified t face font-lock-string-face) 13 14 (fontified t face (rainbow-delimiters-depth-8-face))) . 7790) (undo-tree-id945 . -1) (undo-tree-id946 . -12) (undo-tree-id947 . -12) (undo-tree-id948 . -12) (undo-tree-id949 . -12) (undo-tree-id950 . -12) (undo-tree-id951 . -12) (undo-tree-id952 . -12) (undo-tree-id953 . -12) (undo-tree-id954 . -12) (undo-tree-id955 . -12) (undo-tree-id956 . -12) (undo-tree-id957 . -12) (undo-tree-id958 . -12) (undo-tree-id959 . -12) (undo-tree-id960 . -7) (undo-tree-id961 . -7) (undo-tree-id962 . -7) (undo-tree-id963 . -7) (undo-tree-id964 . -7) (undo-tree-id965 . -7) (undo-tree-id966 . -7) (undo-tree-id967 . -7) (undo-tree-id968 . -7) (undo-tree-id969 . -7) (undo-tree-id970 . -7) (undo-tree-id971 . -7) (undo-tree-id972 . -7) (undo-tree-id973 . -7) (undo-tree-id974 . -6) (undo-tree-id975 . -6) (undo-tree-id976 . -6) (undo-tree-id977 . -6) (undo-tree-id978 . -6) (undo-tree-id979 . -6) (undo-tree-id980 . -6) (undo-tree-id981 . -6) (undo-tree-id982 . -6) (undo-tree-id983 . -6) (undo-tree-id984 . -6) (undo-tree-id985 . -6) (undo-tree-id986 . -6) (undo-tree-id987 . -6) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) 7791) nil (25310 46872 211880 0) 0 nil] [nil nil ((7759 . 7762) (7757 . 7758) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-8-face))) . -7758) (undo-tree-id711 . -1) (undo-tree-id712 . 1) (undo-tree-id713 . -1) 7759 (7757 . 7759) (#("(" 0 1 (fontified nil face font-lock-keyword-face)) . -7757) (7757 . 7758) (t 25310 46781 514355 286000)) ((#("(" 0 1 (fontified nil face font-lock-keyword-face)) . 7757) (7757 . 7758) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-8-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-8-face))) . 7757) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (7758 . 7759) (#(" " 0 1 (fontified nil)) . 7757) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (#("or " 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t)) . 7759) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -3) (undo-tree-id802 . -3) (undo-tree-id803 . -3) (undo-tree-id804 . -3) (undo-tree-id805 . -3) (undo-tree-id806 . -3) (undo-tree-id807 . -3)) (25310 46860 447120 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 7789) (undo-tree-id811 . 1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1)) nil (25310 46872 211794 0) 0 nil])
([nil nil ((7794 . 7795)) ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-8-face))) . 7794) (t 25310 46836 213027 653000)) (25310 46836 197061 0) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . 7657) (t 25310 46872 219607 335000)) nil (25310 46898 885527 0) 0 nil])
nil
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 7657) (undo-tree-id1044 . 1) (undo-tree-id1045 . -1)) nil (25310 46898 885525 0) 0 nil])
([nil nil ((#("      )
" 0 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-unmatched-face)) 7 8 (fontified t)) . 8025) (undo-tree-id1031 . -7) (undo-tree-id1032 . -7) (undo-tree-id1033 . -7) (undo-tree-id1034 . -7) (undo-tree-id1035 . -6) (undo-tree-id1036 . -6) (undo-tree-id1037 . -6) (undo-tree-id1038 . -6) (undo-tree-id1039 . -6) (undo-tree-id1040 . -6) (undo-tree-id1041 . -6) (undo-tree-id1042 . 2) (undo-tree-id1043 . -7) 8031) nil (25310 46898 885518 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 7649) (undo-tree-id1046 . 1) (undo-tree-id1047 . -1) (t 25310 46898 894259 51000)) nil (25310 46915 327825 0) 0 nil])
([nil nil ((7658 . 7659) (#("to" 0 2 (fontified t face font-lock-string-face)) . 7658) (t 25310 46915 336107 905000)) nil (25310 46927 783907 0) 0 nil])
([nil nil ((8029 . 8030) (8022 . 8029) (t 25310 46927 792307 852000) 8021) nil (25310 46975 895499 0) 0 nil])
([nil nil ((7975 . 7989) (#("SOMEDAY music download" 0 22 (fontified t face font-lock-string-face)) . 7975) (undo-tree-id1048 . -21) (undo-tree-id1049 . -21) (undo-tree-id1050 . -21) (undo-tree-id1051 . -22) (undo-tree-id1052 . -21) (undo-tree-id1053 . -6) (undo-tree-id1054 . -6) (undo-tree-id1055 . -6) (undo-tree-id1056 . -6) (undo-tree-id1057 . -6) (undo-tree-id1058 . -6) (undo-tree-id1059 . -6) (undo-tree-id1060 . -6) (undo-tree-id1061 . -6) (undo-tree-id1062 . -6) (undo-tree-id1063 . -6) (undo-tree-id1064 . -6) (undo-tree-id1065 . -6) (undo-tree-id1066 . -6) (undo-tree-id1067 . -6) (undo-tree-id1068 . -6) (undo-tree-id1069 . -6) (undo-tree-id1070 . -6) (undo-tree-id1071 . -6) (undo-tree-id1072 . -6) (undo-tree-id1073 . -6) (undo-tree-id1074 . -12) (undo-tree-id1075 . -12) (undo-tree-id1076 . -12) (undo-tree-id1077 . -12) (undo-tree-id1078 . -12) (undo-tree-id1079 . -12) (undo-tree-id1080 . -12) (undo-tree-id1081 . -12) (undo-tree-id1082 . -12) (undo-tree-id1083 . -12) (undo-tree-id1084 . -12) (undo-tree-id1085 . -12) (undo-tree-id1086 . -12) (undo-tree-id1087 . -12) (undo-tree-id1088 . -12) (undo-tree-id1089 . -12) (undo-tree-id1090 . -12) (undo-tree-id1091 . -12) (undo-tree-id1092 . -12) (undo-tree-id1093 . -12) (undo-tree-id1094 . -12) (undo-tree-id1095 . -21) (undo-tree-id1096 . -21) (undo-tree-id1097 . -21) (undo-tree-id1098 . -21) (undo-tree-id1099 . -21) (undo-tree-id1100 . -21) (undo-tree-id1101 . -21) (undo-tree-id1102 . -21) (undo-tree-id1103 . -21) (undo-tree-id1104 . -21) (undo-tree-id1105 . -21) (undo-tree-id1106 . -21) (undo-tree-id1107 . -21) (undo-tree-id1108 . -21) (undo-tree-id1109 . -21) (undo-tree-id1110 . -21) (undo-tree-id1111 . -21) (undo-tree-id1112 . -21) (undo-tree-id1113 . -21) (undo-tree-id1114 . -21) (undo-tree-id1115 . -21) (undo-tree-id1116 . -21) 7996) nil (25310 46975 895492 0) 0 nil])
([nil nil ((7793 . 7798) (7792 . 7794) (#("\"" 0 1 (fontified nil)) . -7792) (7787 . 7793) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-8-face))) . 7788) (7787 . 7788) (7786 . 7788) (#("(" 0 1 (fontified nil)) . -7786) (7785 . 7787) (t 25310 46975 903764 926000)) nil (25310 46991 862918 0) 0 nil])
([nil nil ((#("(tags \"study\")" 0 1 (fontified t face (rainbow-delimiters-depth-8-face)) 1 6 (fontified t) 6 13 (fontified t face font-lock-string-face) 13 14 (fontified t face (rainbow-delimiters-depth-8-face))) . 7753) (undo-tree-id1129 . -13) (undo-tree-id1130 . -13) (undo-tree-id1131 . -13) (undo-tree-id1132 . -13) (undo-tree-id1133 . 1) (undo-tree-id1134 . -14) (undo-tree-id1135 . 14) (undo-tree-id1136 . -1) 7766 (t 25310 46991 870899 544000)) nil (25310 47135 967629 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 7753) (undo-tree-id1128 . 1)) nil (25310 47135 967620 0) 0 nil])
([nil nil ((7753 . 7754)) nil (25310 47135 967618 0) 0 nil])
([nil nil ((7755 . 7757) (#("(" 0 1 (fontified nil)) . -7755) (7751 . 7756)) nil (25310 47135 967616 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-8-face))) . 7756) (undo-tree-id1125 . 1) (undo-tree-id1126 . 1) (undo-tree-id1127 . -1)) nil (25310 47299 407453 0) 0 nil])
([nil nil ((7805 . 7810) (7804 . 7806) (#("\"" 0 1 (fontified nil)) . 7804) (7799 . 7805) (7798 . 7800) (#("(" 0 1 (fontified nil)) . 7798) (7798 . 7799) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-9-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-9-face))) . 7798) (7798 . 7800) (#("(" 0 1 (fontified nil)) . 7798) (7794 . 7799) (#("ожа" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7794) (7794 . 7797) (7793 . 7795) (#("(" 0 1 (fontified nil)) . 7793) (7793 . 7794) (#("!" 0 1 (fontified nil)) . 7793) (7793 . 7794) (#("not" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7793) (7792 . 7796) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-7-face))) . 7793) (undo-tree-id2462 . 1) (undo-tree-id2463 . -1) (7792 . 7793) (#(" " 0 1 (fontified nil)) . 7792) (7792 . 7793) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-8-face))) . 7792) (7792 . 7793)) ((#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-8-face))) . 7792) (7792 . 7793) (#(" " 0 1 (fontified nil)) . 7792) (7792 . 7793) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-7-face))) . 7792) (7793 . 7794) (#(" not" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 7792) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (7793 . 7796) (#("!" 0 1 (fontified nil)) . 7793) (7793 . 7794) (#("(" 0 1 (fontified nil)) . 7793) (7793 . 7794) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-8-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-8-face))) . 7793) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (#("ожа" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7794) (7794 . 7797) (#("not (" 0 4 (fontified nil) 4 5 (fontified nil)) . 7794) (undo-tree-id2217 . -4) (undo-tree-id2218 . -4) (undo-tree-id2219 . -4) (undo-tree-id2220 . -4) (undo-tree-id2221 . -4) (undo-tree-id2222 . -4) (undo-tree-id2223 . -4) (undo-tree-id2224 . -4) (undo-tree-id2225 . -4) (undo-tree-id2226 . -4) (undo-tree-id2227 . -4) (undo-tree-id2228 . -4) (undo-tree-id2229 . -4) (undo-tree-id2230 . -4) (undo-tree-id2231 . -4) (undo-tree-id2232 . -4) (undo-tree-id2233 . -4) (undo-tree-id2234 . -4) (undo-tree-id2235 . -4) (undo-tree-id2236 . -4) (undo-tree-id2237 . -4) (undo-tree-id2238 . -4) (undo-tree-id2239 . -4) (undo-tree-id2240 . -4) (undo-tree-id2241 . -4) (undo-tree-id2242 . -4) (undo-tree-id2243 . -4) (undo-tree-id2244 . -4) (undo-tree-id2245 . -4) (undo-tree-id2246 . -4) (undo-tree-id2247 . -4) (undo-tree-id2248 . -4) (undo-tree-id2249 . -4) (undo-tree-id2250 . -4) (undo-tree-id2251 . -4) (undo-tree-id2252 . -4) (undo-tree-id2253 . -4) (undo-tree-id2254 . -4) (undo-tree-id2255 . -4) (undo-tree-id2256 . -4) (undo-tree-id2257 . -4) (undo-tree-id2258 . -4) (undo-tree-id2259 . -4) (undo-tree-id2260 . -4) (undo-tree-id2261 . -4) (undo-tree-id2262 . -4) (undo-tree-id2263 . -4) (undo-tree-id2264 . -4) (undo-tree-id2265 . -4) (7798 . 7799) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-9-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-9-face))) . 7798) (7798 . 7800) (#("(" 0 1 (fontified nil)) . 7798) (7798 . 7799) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-9-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-9-face))) . 7798) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (#("tags \"" 0 5 (fontified nil) 5 6 (fontified nil)) . 7799) (undo-tree-id2315 . -5) (undo-tree-id2316 . -5) (undo-tree-id2317 . -5) (undo-tree-id2318 . -5) (undo-tree-id2319 . -5) (undo-tree-id2320 . -5) (undo-tree-id2321 . -5) (undo-tree-id2322 . -5) (undo-tree-id2323 . -5) (undo-tree-id2324 . -5) (undo-tree-id2325 . -5) (undo-tree-id2326 . -5) (undo-tree-id2327 . -5) (undo-tree-id2328 . -5) (undo-tree-id2329 . -5) (undo-tree-id2330 . -5) (undo-tree-id2331 . -5) (undo-tree-id2332 . -5) (undo-tree-id2333 . -5) (undo-tree-id2334 . -5) (undo-tree-id2335 . -5) (undo-tree-id2336 . -5) (undo-tree-id2337 . -5) (undo-tree-id2338 . -5) (undo-tree-id2339 . -5) (undo-tree-id2340 . -5) (undo-tree-id2341 . -5) (undo-tree-id2342 . -5) (undo-tree-id2343 . -5) (undo-tree-id2344 . -5) (undo-tree-id2345 . -5) (undo-tree-id2346 . -5) (undo-tree-id2347 . -5) (undo-tree-id2348 . -5) (undo-tree-id2349 . -5) (undo-tree-id2350 . -5) (undo-tree-id2351 . -5) (undo-tree-id2352 . -5) (undo-tree-id2353 . -5) (undo-tree-id2354 . -5) (undo-tree-id2355 . -5) (undo-tree-id2356 . -5) (undo-tree-id2357 . -5) (undo-tree-id2358 . -5) (undo-tree-id2359 . -5) (undo-tree-id2360 . -5) (undo-tree-id2361 . -5) (undo-tree-id2362 . -5) (undo-tree-id2363 . -5) (7804 . 7805) (#("\"\"" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face)) . 7804) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (#("study" 0 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face)) . 7805) (undo-tree-id2413 . -4) (undo-tree-id2414 . -4) (undo-tree-id2415 . -4) (undo-tree-id2416 . -4) (undo-tree-id2417 . -4) (undo-tree-id2418 . -4) (undo-tree-id2419 . -4) (undo-tree-id2420 . -4) (undo-tree-id2421 . -4) (undo-tree-id2422 . -4) (undo-tree-id2423 . -4) (undo-tree-id2424 . -4) (undo-tree-id2425 . -4) (undo-tree-id2426 . -4) (undo-tree-id2427 . -4) (undo-tree-id2428 . -4) (undo-tree-id2429 . -4) (undo-tree-id2430 . -4) (undo-tree-id2431 . -4) (undo-tree-id2432 . -4) (undo-tree-id2433 . -4) (undo-tree-id2434 . -4) (undo-tree-id2435 . -4) (undo-tree-id2436 . -4) (undo-tree-id2437 . -4) (undo-tree-id2438 . -4) (undo-tree-id2439 . -4) (undo-tree-id2440 . -4) (undo-tree-id2441 . -4) (undo-tree-id2442 . -4) (undo-tree-id2443 . -4) (undo-tree-id2444 . -4) (undo-tree-id2445 . -4) (undo-tree-id2446 . -4) (undo-tree-id2447 . -4) (undo-tree-id2448 . -4) (undo-tree-id2449 . -4) (undo-tree-id2450 . -4) (undo-tree-id2451 . -4) (undo-tree-id2452 . -4) (undo-tree-id2453 . -4) (undo-tree-id2454 . -4) (undo-tree-id2455 . -4) (undo-tree-id2456 . -4) (undo-tree-id2457 . -4) (undo-tree-id2458 . -4) (undo-tree-id2459 . -4) (undo-tree-id2460 . -4) (undo-tree-id2461 . -4)) (25310 47306 94206 0) 0 nil])
([nil nil ((8056 . 8057) (8049 . 8056) 8048) nil (25310 47386 604703 0) 0 nil] [nil nil ((nil rear-nonsticky nil 7893 . 7894) (#("
" 0 1 (fontified nil)) . 8020) (7890 . 8021)) ((#("
	  (org-ql-block '(and (todo \"TODO\")
			      (and(tags \"music\") (tags \"download\")))
			((org-ql-block-header \"Music download\")))
" 0 1 (fontified t) 1 3 (fontified nil) 3 4 (fontified nil rear-nonsticky nil) 4 5 (fontified nil face (rainbow-delimiters-depth-6-face)) 5 19 (fontified nil) 19 20 (fontified nil face (rainbow-delimiters-depth-7-face)) 20 24 (fontified nil) 24 25 (fontified nil face (rainbow-delimiters-depth-8-face)) 25 30 (fontified nil) 30 36 (fontified nil face font-lock-string-face) 36 37 (fontified nil face (rainbow-delimiters-depth-8-face)) 37 38 (fontified nil) 38 47 (fontified t) 47 48 (fontified t face (rainbow-delimiters-depth-8-face)) 48 51 (fontified t face font-lock-keyword-face) 51 52 (fontified t face (rainbow-delimiters-depth-9-face)) 52 57 (fontified t) 57 64 (fontified t face font-lock-string-face) 64 65 (fontified t face (rainbow-delimiters-depth-9-face)) 65 66 (fontified t) 66 67 (fontified t face (rainbow-delimiters-depth-9-face)) 67 72 (fontified t) 72 82 (fontified t face font-lock-string-face) 82 83 (fontified t face (rainbow-delimiters-depth-9-face)) 83 84 (fontified t face (rainbow-delimiters-depth-8-face)) 84 85 (fontified t face (rainbow-delimiters-depth-7-face)) 85 86 (fontified t) 86 89 (fontified nil) 89 90 (fontified nil face (rainbow-delimiters-depth-7-face)) 90 91 (fontified nil face (rainbow-delimiters-depth-8-face)) 91 111 (fontified nil) 111 127 (fontified nil face font-lock-string-face) 127 128 (fontified nil face (rainbow-delimiters-depth-8-face)) 128 129 (fontified nil face (rainbow-delimiters-depth-7-face)) 129 130 (fontified nil face (rainbow-delimiters-depth-6-face)) 130 131 (fontified nil)) . 7890) (undo-tree-id2589 . -38) (undo-tree-id2590 . -39) (undo-tree-id2591 . -87) (undo-tree-id2592 . -38) (undo-tree-id2593 . -130) (undo-tree-id2594 . -38) (undo-tree-id2595 . -39) (undo-tree-id2596 . -39) (undo-tree-id2597 . -39) (undo-tree-id2598 . -39) (undo-tree-id2599 . -39) (undo-tree-id2600 . -39) (undo-tree-id2601 . -39) (undo-tree-id2602 . -39) (undo-tree-id2603 . -39) (undo-tree-id2604 . -39) (undo-tree-id2605 . -39) (undo-tree-id2606 . -39) (undo-tree-id2607 . -39) (undo-tree-id2608 . -39) (undo-tree-id2609 . -39) (undo-tree-id2610 . -39) (undo-tree-id2611 . -39) (undo-tree-id2612 . -39) (undo-tree-id2613 . -39) (undo-tree-id2614 . -39) (undo-tree-id2615 . -39) (undo-tree-id2616 . -39) (undo-tree-id2617 . -39) (undo-tree-id2618 . -39) (undo-tree-id2619 . -39) (undo-tree-id2620 . -39) (undo-tree-id2621 . -39) (undo-tree-id2622 . -39) (undo-tree-id2623 . -87) (undo-tree-id2624 . -87) (undo-tree-id2625 . -87) (undo-tree-id2626 . -87) (undo-tree-id2627 . -87) (undo-tree-id2628 . -87) (undo-tree-id2629 . -87) (undo-tree-id2630 . -87) (undo-tree-id2631 . -87) (undo-tree-id2632 . -87) (undo-tree-id2633 . -87) (undo-tree-id2634 . -87) (undo-tree-id2635 . -87) (undo-tree-id2636 . -87) (undo-tree-id2637 . -87) (undo-tree-id2638 . -87) (undo-tree-id2639 . -87) (undo-tree-id2640 . -87) (undo-tree-id2641 . -87) (undo-tree-id2642 . -87) (undo-tree-id2643 . -87) (undo-tree-id2644 . -38) (undo-tree-id2645 . -86) (undo-tree-id2646 . -130) (undo-tree-id2647 . -129) (undo-tree-id2648 . -129) (undo-tree-id2649 . -129) (undo-tree-id2650 . -129) (undo-tree-id2651 . -129) (undo-tree-id2652 . -129) (undo-tree-id2653 . -129) (undo-tree-id2654 . -129) (undo-tree-id2655 . -129) (undo-tree-id2656 . -129) (undo-tree-id2657 . -129) (undo-tree-id2658 . -129) (undo-tree-id2659 . -129) (undo-tree-id2660 . -129) (undo-tree-id2661 . -129) (undo-tree-id2662 . -129) (undo-tree-id2663 . -129) (undo-tree-id2664 . -129) (undo-tree-id2665 . -129) (undo-tree-id2666 . -129) (undo-tree-id2667 . -129) (undo-tree-id2668 . -129) (undo-tree-id2669 . -129) (undo-tree-id2670 . -129) (undo-tree-id2671 . -129) (undo-tree-id2672 . -129) (undo-tree-id2673 . -129) (undo-tree-id2674 . -129) (undo-tree-id2675 . -129) (undo-tree-id2676 . -129) (undo-tree-id2677 . -129) (undo-tree-id2678 . -129) (undo-tree-id2679 . -129) (undo-tree-id2680 . -129) (undo-tree-id2681 . -129) (undo-tree-id2682 . -129) (undo-tree-id2683 . -129) (undo-tree-id2684 . -129) (undo-tree-id2685 . -129) (undo-tree-id2686 . -129) (undo-tree-id2687 . -129) (undo-tree-id2688 . -129) (undo-tree-id2689 . -129) (undo-tree-id2690 . -129) (undo-tree-id2691 . -129) (undo-tree-id2692 . -129) (undo-tree-id2693 . -129) (undo-tree-id2694 . -129) (undo-tree-id2695 . -129) (undo-tree-id2696 . -38) (undo-tree-id2697 . -38) (undo-tree-id2698 . -38) (undo-tree-id2699 . -38) (undo-tree-id2700 . -38) (undo-tree-id2701 . -38) (undo-tree-id2702 . -38) (undo-tree-id2703 . -38) (undo-tree-id2704 . -38) (undo-tree-id2705 . -38) (undo-tree-id2706 . -38) (undo-tree-id2707 . -38) (undo-tree-id2708 . -38) (undo-tree-id2709 . -38) (undo-tree-id2710 . -38) (undo-tree-id2711 . -38) (undo-tree-id2712 . -38) (undo-tree-id2713 . -38) (undo-tree-id2714 . -38) (undo-tree-id2715 . -38) (undo-tree-id2716 . -38) (undo-tree-id2717 . -38) (undo-tree-id2718 . -38) (undo-tree-id2719 . -38) (undo-tree-id2720 . -38) (undo-tree-id2721 . -38) (undo-tree-id2722 . -38) (undo-tree-id2723 . -38) (undo-tree-id2724 . -38) (undo-tree-id2725 . -38) (undo-tree-id2726 . -38) (undo-tree-id2727 . -38) (undo-tree-id2728 . -38) (undo-tree-id2729 . -38) (undo-tree-id2730 . -38) (undo-tree-id2731 . -38) (undo-tree-id2732 . -38) (undo-tree-id2733 . -38) (undo-tree-id2734 . -38) (undo-tree-id2735 . -38) (undo-tree-id2736 . -38) (undo-tree-id2737 . -38) (undo-tree-id2738 . -38) (undo-tree-id2739 . -38) (undo-tree-id2740 . -38) (undo-tree-id2741 . -38) (undo-tree-id2742 . -38) (undo-tree-id2743 . -38) (undo-tree-id2744 . -38) (undo-tree-id2745 . -38) (undo-tree-id2746 . -38) (undo-tree-id2747 . -38) (undo-tree-id2748 . -38) (undo-tree-id2749 . -38) (undo-tree-id2750 . -38) (undo-tree-id2751 . -38) (undo-tree-id2752 . -38) (undo-tree-id2753 . -38) (undo-tree-id2754 . -38) (undo-tree-id2755 . -38) (undo-tree-id2756 . -38) (undo-tree-id2757 . -38) (undo-tree-id2758 . -38) (undo-tree-id2759 . -38) (undo-tree-id2760 . -38) (undo-tree-id2761 . -38) (undo-tree-id2762 . -38) (undo-tree-id2763 . -38) (undo-tree-id2764 . -38) (undo-tree-id2765 . -38) (undo-tree-id2766 . -38) (undo-tree-id2767 . -38) (undo-tree-id2768 . -38) (undo-tree-id2769 . -38) (undo-tree-id2770 . -38) (undo-tree-id2771 . -38) (undo-tree-id2772 . -38) (undo-tree-id2773 . -38) (undo-tree-id2774 . -38) (undo-tree-id2775 . -38) (undo-tree-id2776 . -38) (undo-tree-id2777 . -38) (undo-tree-id2778 . -38) (undo-tree-id2779 . -38) (undo-tree-id2780 . -38) (undo-tree-id2781 . -38) (undo-tree-id2782 . -38) (undo-tree-id2783 . -38) (undo-tree-id2784 . -38) (undo-tree-id2785 . -38) (undo-tree-id2786 . -38) (undo-tree-id2787 . -38) (undo-tree-id2788 . -38) (undo-tree-id2789 . -38) (undo-tree-id2790 . -38) (undo-tree-id2791 . -38) (undo-tree-id2792 . -38) (undo-tree-id2793 . -38) (undo-tree-id2794 . -38) (undo-tree-id2795 . -38) (8020 . 8021) (nil rear-nonsticky t 7893 . 7894)) (25310 47305 680253 0) 0 nil] [nil nil ((7685 . 7686) (#("  " 0 2 (fontified nil)) . -7683) (7686 . 7687)) ((#("
" 0 1 (fontified nil)) . 7686) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (7683 . 7685) (#("	" 0 1 (fontified t)) . 7685)) (25310 47268 859807 0) 0 nil] [nil nil ((nil rear-nonsticky nil 7684 . 7685) (#("
" 0 1 (fontified nil)) . -7890) (7675 . 7891) 7656 (t 25310 47135 980016 998000)) ((#("
         ((org-ql-block '(and (todo \"TODO\")
                              (and (or (tags \"research\") (tags \"think\")) (not (tags \"study\")))
                        ((org-ql-block-header \"Study, research or think\")))
" 0 1 (fontified t) 1 9 (fontified nil) 9 10 (fontified nil rear-nonsticky nil) 10 11 (fontified nil face (rainbow-delimiters-depth-4-face)) 11 12 (fontified nil face (rainbow-delimiters-depth-5-face)) 12 26 (fontified nil) 26 27 (fontified nil face (rainbow-delimiters-depth-6-face)) 27 31 (fontified nil) 31 32 (fontified nil face (rainbow-delimiters-depth-7-face)) 32 37 (fontified nil) 37 38 (fontified nil face font-lock-string-face) 38 42 (fontified nil face font-lock-string-face) 42 43 (fontified nil face font-lock-string-face) 43 44 (fontified nil face (rainbow-delimiters-depth-7-face)) 44 45 (fontified nil) 45 75 (fontified t) 75 76 (fontified t face (rainbow-delimiters-depth-7-face)) 76 79 (fontified t face font-lock-keyword-face) 79 80 (fontified t) 80 81 (fontified t face (rainbow-delimiters-depth-8-face)) 81 83 (fontified t face font-lock-keyword-face) 83 84 (fontified t) 84 85 (fontified t face (rainbow-delimiters-depth-9-face)) 85 89 (fontified t) 89 90 (fontified t) 90 91 (fontified t face font-lock-string-face) 91 99 (fontified t face font-lock-string-face) 99 100 (fontified t face font-lock-string-face) 100 101 (fontified t face (rainbow-delimiters-depth-9-face)) 101 102 (fontified t) 102 103 (fontified t face (rainbow-delimiters-depth-9-face)) 103 108 (fontified t) 108 114 (fontified t face font-lock-string-face) 114 115 (fontified t face font-lock-string-face) 115 116 (fontified t face (rainbow-delimiters-depth-9-face)) 116 117 (fontified t face (rainbow-delimiters-depth-8-face)) 117 118 (fontified t) 118 119 (fontified t face (rainbow-delimiters-depth-8-face)) 119 123 (fontified t) 123 124 (fontified t face (rainbow-delimiters-depth-9-face)) 124 129 (fontified t) 129 135 (fontified t face font-lock-string-face) 135 136 (fontified t face font-lock-string-face) 136 137 (fontified t face (rainbow-delimiters-depth-9-face)) 137 138 (fontified t face (rainbow-delimiters-depth-8-face)) 138 139 (fontified t face (rainbow-delimiters-depth-7-face)) 139 140 (fontified t) 140 164 (fontified nil) 164 165 (fontified nil face (rainbow-delimiters-depth-7-face)) 165 166 (fontified nil face (rainbow-delimiters-depth-8-face)) 166 186 (fontified nil) 186 192 (fontified nil face font-lock-string-face) 192 211 (fontified nil face font-lock-string-face) 211 212 (fontified nil face font-lock-string-face) 212 213 (fontified nil face (rainbow-delimiters-depth-8-face)) 213 214 (fontified nil face (rainbow-delimiters-depth-7-face)) 214 215 (fontified nil face (rainbow-delimiters-depth-6-face)) 215 216 (fontified nil)) . 7675) (undo-tree-id1645 . -210) (undo-tree-id1646 . -192) (undo-tree-id1647 . 5) (undo-tree-id1648 . -192) (undo-tree-id1649 . -210) (undo-tree-id1650 . -1) (undo-tree-id1651 . -215) (undo-tree-id1652 . 77) (undo-tree-id1653 . -192) (undo-tree-id1654 . -82) (undo-tree-id1655 . -139) (undo-tree-id1656 . -139) (undo-tree-id1657 . -139) (undo-tree-id1658 . -139) (undo-tree-id1659 . -139) (undo-tree-id1660 . -139) (undo-tree-id1661 . -139) (undo-tree-id1662 . -139) (undo-tree-id1663 . -139) (undo-tree-id1664 . -139) (undo-tree-id1665 . -139) (undo-tree-id1666 . -139) (undo-tree-id1667 . -139) (undo-tree-id1668 . -139) (undo-tree-id1669 . -139) (undo-tree-id1670 . -139) (undo-tree-id1671 . -139) (undo-tree-id1672 . -139) (undo-tree-id1673 . -139) (undo-tree-id1674 . -139) (undo-tree-id1675 . -139) (undo-tree-id1676 . -139) (undo-tree-id1677 . -139) (undo-tree-id1678 . -139) (undo-tree-id1679 . -139) (undo-tree-id1680 . -139) (undo-tree-id1681 . -139) (undo-tree-id1682 . -139) (undo-tree-id1683 . -139) (undo-tree-id1684 . -139) (undo-tree-id1685 . -139) (undo-tree-id1686 . -139) (undo-tree-id1687 . -139) (undo-tree-id1688 . -139) (undo-tree-id1689 . -139) (undo-tree-id1690 . -139) (undo-tree-id1691 . -139) (undo-tree-id1692 . -139) (undo-tree-id1693 . -139) (undo-tree-id1694 . -139) (undo-tree-id1695 . -139) (undo-tree-id1696 . -139) (undo-tree-id1697 . -139) (undo-tree-id1698 . -139) (undo-tree-id1699 . -139) (undo-tree-id1700 . -139) (undo-tree-id1701 . -139) (undo-tree-id1702 . -139) (undo-tree-id1703 . -139) (undo-tree-id1704 . -139) (undo-tree-id1705 . -139) (undo-tree-id1706 . -139) (undo-tree-id1707 . -139) (undo-tree-id1708 . -139) (undo-tree-id1709 . -139) (undo-tree-id1710 . -139) (undo-tree-id1711 . -139) (undo-tree-id1712 . -139) (undo-tree-id1713 . -139) (undo-tree-id1714 . -139) (undo-tree-id1715 . -139) (undo-tree-id1716 . -139) (undo-tree-id1717 . -139) (undo-tree-id1718 . -139) (undo-tree-id1719 . -139) (undo-tree-id1720 . -139) (undo-tree-id1721 . -139) (undo-tree-id1722 . -139) (undo-tree-id1723 . -139) (undo-tree-id1724 . -139) (undo-tree-id1725 . -139) (undo-tree-id1726 . -139) (undo-tree-id1727 . -139) (undo-tree-id1728 . -139) (undo-tree-id1729 . -139) (undo-tree-id1730 . -139) (undo-tree-id1731 . -139) (undo-tree-id1732 . -139) (undo-tree-id1733 . -139) (undo-tree-id1734 . -139) (undo-tree-id1735 . -139) (undo-tree-id1736 . -139) (undo-tree-id1737 . -139) (undo-tree-id1738 . -139) (undo-tree-id1739 . -139) (undo-tree-id1740 . -139) (undo-tree-id1741 . -139) (undo-tree-id1742 . -139) (undo-tree-id1743 . -139) (undo-tree-id1744 . -139) (undo-tree-id1745 . -139) (undo-tree-id1746 . -139) (undo-tree-id1747 . -139) (undo-tree-id1748 . -139) (undo-tree-id1749 . -139) (undo-tree-id1750 . -139) (undo-tree-id1751 . -139) (undo-tree-id1752 . -139) (undo-tree-id1753 . -139) (undo-tree-id1754 . -139) (undo-tree-id1755 . -139) (undo-tree-id1756 . -139) (undo-tree-id1757 . -139) (undo-tree-id1758 . -139) (undo-tree-id1759 . -139) (undo-tree-id1760 . -139) (undo-tree-id1761 . -139) (undo-tree-id1762 . -139) (undo-tree-id1763 . -139) (undo-tree-id1764 . -139) (undo-tree-id1765 . -139) (undo-tree-id1766 . -139) (undo-tree-id1767 . -139) (undo-tree-id1768 . -139) (undo-tree-id1769 . -139) (undo-tree-id1770 . -139) (undo-tree-id1771 . -139) (undo-tree-id1772 . -139) (undo-tree-id1773 . -139) (undo-tree-id1774 . -139) (undo-tree-id1775 . -139) (undo-tree-id1776 . -139) (undo-tree-id1777 . -139) (undo-tree-id1778 . -139) (undo-tree-id1779 . -139) (undo-tree-id1780 . -139) (undo-tree-id1781 . -139) (undo-tree-id1782 . -139) (undo-tree-id1783 . -139) (undo-tree-id1784 . -139) (undo-tree-id1785 . -139) (undo-tree-id1786 . -139) (undo-tree-id1787 . -139) (undo-tree-id1788 . -139) (undo-tree-id1789 . -139) (undo-tree-id1790 . -139) (undo-tree-id1791 . -139) (undo-tree-id1792 . -139) (undo-tree-id1793 . -139) (undo-tree-id1794 . -139) (undo-tree-id1795 . -139) (undo-tree-id1796 . -139) (undo-tree-id1797 . -139) (undo-tree-id1798 . -139) (undo-tree-id1799 . -139) (undo-tree-id1800 . -139) (undo-tree-id1801 . -139) (undo-tree-id1802 . -139) (undo-tree-id1803 . -139) (undo-tree-id1804 . -139) (undo-tree-id1805 . -139) (undo-tree-id1806 . -139) (undo-tree-id1807 . -139) (undo-tree-id1808 . -139) (undo-tree-id1809 . -139) (undo-tree-id1810 . -139) (undo-tree-id1811 . -45) (undo-tree-id1812 . -139) (undo-tree-id1813 . -139) (undo-tree-id1814 . -139) (undo-tree-id1815 . -139) (undo-tree-id1816 . -139) (undo-tree-id1817 . -139) (undo-tree-id1818 . -139) (undo-tree-id1819 . -139) (undo-tree-id1820 . -139) (undo-tree-id1821 . -139) (undo-tree-id1822 . -139) (undo-tree-id1823 . -139) (undo-tree-id1824 . -139) (undo-tree-id1825 . -139) (undo-tree-id1826 . -139) (undo-tree-id1827 . -45) (undo-tree-id1828 . -139) (undo-tree-id1829 . -100) (undo-tree-id1830 . -100) (undo-tree-id1831 . -100) (undo-tree-id1832 . -100) (undo-tree-id1833 . -100) (undo-tree-id1834 . -100) (undo-tree-id1835 . -100) (undo-tree-id1836 . -100) (undo-tree-id1837 . -100) (undo-tree-id1838 . -100) (undo-tree-id1839 . -100) (undo-tree-id1840 . -100) (undo-tree-id1841 . -100) (undo-tree-id1842 . -100) (undo-tree-id1843 . -10) (undo-tree-id1844 . -10) (undo-tree-id1845 . -10) (undo-tree-id1846 . -10) (undo-tree-id1847 . -10) (undo-tree-id1848 . -10) (undo-tree-id1849 . -10) (undo-tree-id1850 . -10) (undo-tree-id1851 . -10) (undo-tree-id1852 . -10) (undo-tree-id1853 . -10) (undo-tree-id1854 . -10) (undo-tree-id1855 . -10) (undo-tree-id1856 . -10) (undo-tree-id1857 . -10) (undo-tree-id1858 . -10) (undo-tree-id1859 . -10) (undo-tree-id1860 . -10) (undo-tree-id1861 . -10) (undo-tree-id1862 . -10) (undo-tree-id1863 . -10) (undo-tree-id1864 . -10) (undo-tree-id1865 . -10) (undo-tree-id1866 . -10) (undo-tree-id1867 . -10) (undo-tree-id1868 . -10) (undo-tree-id1869 . -10) (undo-tree-id1870 . -10) (undo-tree-id1871 . -10) (undo-tree-id1872 . -10) (undo-tree-id1873 . -10) (undo-tree-id1874 . -10) (undo-tree-id1875 . -10) (undo-tree-id1876 . -10) (undo-tree-id1877 . -10) (undo-tree-id1878 . -10) (undo-tree-id1879 . -10) (undo-tree-id1880 . -10) (undo-tree-id1881 . -10) (undo-tree-id1882 . -10) (undo-tree-id1883 . -10) (undo-tree-id1884 . -10) (undo-tree-id1885 . -43) (undo-tree-id1886 . -43) (undo-tree-id1887 . -43) (undo-tree-id1888 . -43) (undo-tree-id1889 . -43) (undo-tree-id1890 . -43) (undo-tree-id1891 . -43) (undo-tree-id1892 . -43) (undo-tree-id1893 . -43) (undo-tree-id1894 . -43) (undo-tree-id1895 . -43) (undo-tree-id1896 . -43) (undo-tree-id1897 . -43) (undo-tree-id1898 . -43) (undo-tree-id1899 . -210) (undo-tree-id1900 . -210) (undo-tree-id1901 . -210) (undo-tree-id1902 . -210) (undo-tree-id1903 . -210) (undo-tree-id1904 . -210) (undo-tree-id1905 . -210) (undo-tree-id1906 . -210) (undo-tree-id1907 . -210) (undo-tree-id1908 . -210) (undo-tree-id1909 . -210) (undo-tree-id1910 . -210) (undo-tree-id1911 . -210) (undo-tree-id1912 . -210) (undo-tree-id1913 . -210) (undo-tree-id1914 . -210) (undo-tree-id1915 . -210) (undo-tree-id1916 . -210) (undo-tree-id1917 . -210) (undo-tree-id1918 . -210) (undo-tree-id1919 . -210) (undo-tree-id1920 . -137) (undo-tree-id1921 . -137) (undo-tree-id1922 . -137) (undo-tree-id1923 . -137) (undo-tree-id1924 . -137) (undo-tree-id1925 . -137) (undo-tree-id1926 . -137) (undo-tree-id1927 . -137) (undo-tree-id1928 . -137) (undo-tree-id1929 . -137) (undo-tree-id1930 . -137) (undo-tree-id1931 . -137) (undo-tree-id1932 . -137) (undo-tree-id1933 . -137) (undo-tree-id1934 . -91) (undo-tree-id1935 . -91) (undo-tree-id1936 . -91) (undo-tree-id1937 . -91) (undo-tree-id1938 . -91) (undo-tree-id1939 . -91) (undo-tree-id1940 . -91) (undo-tree-id1941 . -91) (undo-tree-id1942 . -91) (undo-tree-id1943 . -91) (undo-tree-id1944 . -91) (undo-tree-id1945 . -91) (undo-tree-id1946 . -91) (undo-tree-id1947 . -91) (undo-tree-id1948 . -76) (undo-tree-id1949 . -76) (undo-tree-id1950 . -76) (undo-tree-id1951 . -76) (undo-tree-id1952 . -76) (undo-tree-id1953 . -76) (undo-tree-id1954 . -76) (undo-tree-id1955 . -76) (undo-tree-id1956 . -76) (undo-tree-id1957 . -76) (undo-tree-id1958 . -76) (undo-tree-id1959 . -76) (undo-tree-id1960 . -76) (undo-tree-id1961 . -76) (undo-tree-id1962 . -76) (undo-tree-id1963 . -76) (undo-tree-id1964 . -76) (undo-tree-id1965 . -76) (undo-tree-id1966 . -76) (undo-tree-id1967 . -76) (undo-tree-id1968 . -76) (undo-tree-id1969 . -76) (undo-tree-id1970 . -76) (undo-tree-id1971 . -76) (undo-tree-id1972 . -76) (undo-tree-id1973 . -76) (undo-tree-id1974 . -76) (undo-tree-id1975 . -76) (undo-tree-id1976 . -45) (undo-tree-id1977 . -82) (undo-tree-id1978 . -82) (undo-tree-id1979 . -82) (undo-tree-id1980 . -82) (undo-tree-id1981 . -82) (undo-tree-id1982 . -82) (undo-tree-id1983 . -82) (undo-tree-id1984 . -82) (undo-tree-id1985 . -82) (undo-tree-id1986 . -82) (undo-tree-id1987 . -82) (undo-tree-id1988 . -82) (undo-tree-id1989 . -82) (undo-tree-id1990 . -82) (undo-tree-id1991 . -82) (7890 . 7891) (nil rear-nonsticky t 7684 . 7685)) (25310 47254 256899 0) 0 nil])
([nil nil ((#("      " 0 6 (fontified nil)) . 8033) (#("
" 0 1 (fontified t)) . -8033) 8027) nil (25310 47386 604701 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 7957 . 7958) (7928 . 8099) (#("			      (and(tags \"music\") (tags \"download\")))
			((org-ql-block-header \"Music download\")))
" 0 9 (fontified t) 9 10 (fontified t face (rainbow-delimiters-depth-8-face)) 10 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t face (rainbow-delimiters-depth-9-face)) 14 19 (fontified t) 19 26 (fontified t face font-lock-string-face) 26 27 (fontified t face (rainbow-delimiters-depth-9-face)) 27 28 (fontified t) 28 29 (fontified t face (rainbow-delimiters-depth-9-face)) 29 34 (fontified t) 34 44 (fontified t face font-lock-string-face) 44 45 (fontified t face (rainbow-delimiters-depth-9-face)) 45 46 (fontified t face (rainbow-delimiters-depth-8-face)) 46 47 (fontified t face (rainbow-delimiters-depth-7-face)) 47 48 (fontified t) 48 51 (fontified t) 51 52 (fontified t face (rainbow-delimiters-depth-7-face)) 52 53 (fontified t face (rainbow-delimiters-depth-8-face)) 53 73 (fontified t) 73 89 (fontified t face font-lock-string-face) 89 90 (fontified t face (rainbow-delimiters-depth-8-face)) 90 91 (fontified t face (rainbow-delimiters-depth-7-face)) 91 92 (fontified t face (rainbow-delimiters-depth-6-face)) 92 93 (fontified t)) . 7928) (undo-tree-id2464 . -93) (undo-tree-id2465 . -1) (undo-tree-id2466 . -49) (undo-tree-id2467 . -92) (undo-tree-id2468 . -91) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -49) (undo-tree-id2498 . -49) (undo-tree-id2499 . -49) (undo-tree-id2500 . -49) (undo-tree-id2501 . -49) (undo-tree-id2502 . -49) (undo-tree-id2503 . -49) (undo-tree-id2504 . -49) (undo-tree-id2505 . -49) (undo-tree-id2506 . -49) (undo-tree-id2507 . -49) (undo-tree-id2508 . -49) (undo-tree-id2509 . -49) (undo-tree-id2510 . -49) (undo-tree-id2511 . -49) (undo-tree-id2512 . -49) (undo-tree-id2513 . -49) (undo-tree-id2514 . -49) (undo-tree-id2515 . -49) (undo-tree-id2516 . -49) (undo-tree-id2517 . -49) (undo-tree-id2518 . -93) (undo-tree-id2519 . -93) (undo-tree-id2520 . -93) (undo-tree-id2521 . -93) (undo-tree-id2522 . -93) (undo-tree-id2523 . -93) (undo-tree-id2524 . -93) (undo-tree-id2525 . -93) (undo-tree-id2526 . -93) (undo-tree-id2527 . -93) (undo-tree-id2528 . -93) (undo-tree-id2529 . -93) (undo-tree-id2530 . -93) (undo-tree-id2531 . -93) (undo-tree-id2532 . -48) (undo-tree-id2533 . -92) (undo-tree-id2534 . -48) (undo-tree-id2535 . -91) (undo-tree-id2536 . -91) (undo-tree-id2537 . -91) (undo-tree-id2538 . -91) (undo-tree-id2539 . -91) (undo-tree-id2540 . -91) (undo-tree-id2541 . -91) (undo-tree-id2542 . 2) (undo-tree-id2543 . -92) (undo-tree-id2544 . -91) (undo-tree-id2545 . -91) (undo-tree-id2546 . -91) (undo-tree-id2547 . -91) (undo-tree-id2548 . -91) (undo-tree-id2549 . -91) (undo-tree-id2550 . -91) (undo-tree-id2551 . -91) (undo-tree-id2552 . -91) (undo-tree-id2553 . -91) (undo-tree-id2554 . -91) (undo-tree-id2555 . -91) (undo-tree-id2556 . -91) (undo-tree-id2557 . -91) (undo-tree-id2558 . -91) (undo-tree-id2559 . -91) (undo-tree-id2560 . -91) (undo-tree-id2561 . -91) (undo-tree-id2562 . -91) (undo-tree-id2563 . -91) (undo-tree-id2564 . -91) (undo-tree-id2565 . -91) (undo-tree-id2566 . -91) (undo-tree-id2567 . -91) (undo-tree-id2568 . -91) (undo-tree-id2569 . -91) (undo-tree-id2570 . -91) (undo-tree-id2571 . -91) (undo-tree-id2572 . -91) (undo-tree-id2573 . -91) (undo-tree-id2574 . -91) (undo-tree-id2575 . -91) (undo-tree-id2576 . -91) (undo-tree-id2577 . -91) (undo-tree-id2578 . -91) (undo-tree-id2579 . -91) (undo-tree-id2580 . -91) (undo-tree-id2581 . -91) (undo-tree-id2582 . -91) (undo-tree-id2583 . -91) (undo-tree-id2584 . -91) (undo-tree-id2585 . -91) (undo-tree-id2586 . -91)) ((7928 . 8021) (#("                              (and (or (tags \"research\") (tags \"think\")) (not (tags \"study\")))
                        ((org-ql-block-header \"Study, research or think\")))
" 0 29 (fontified nil) 29 30 (fontified nil rear-nonsticky nil) 30 31 (fontified nil face (rainbow-delimiters-depth-8-face)) 31 34 (fontified nil face font-lock-keyword-face) 34 35 (fontified nil) 35 36 (fontified nil face (rainbow-delimiters-depth-9-face)) 36 38 (fontified nil face font-lock-keyword-face) 38 39 (fontified nil) 39 40 (fontified nil face (rainbow-delimiters-depth-1-face)) 40 44 (fontified nil) 44 45 (fontified nil) 45 55 (fontified nil face font-lock-string-face) 55 56 (fontified nil face (rainbow-delimiters-depth-1-face)) 56 57 (fontified nil) 57 58 (fontified nil face (rainbow-delimiters-depth-1-face)) 58 63 (fontified nil) 63 69 (fontified nil face font-lock-string-face) 69 70 (fontified nil face font-lock-string-face) 70 71 (fontified nil face (rainbow-delimiters-depth-1-face)) 71 72 (fontified nil face (rainbow-delimiters-depth-9-face)) 72 73 (fontified nil) 73 74 (fontified nil face (rainbow-delimiters-depth-9-face)) 74 78 (fontified nil) 78 79 (fontified nil face (rainbow-delimiters-depth-1-face)) 79 84 (fontified nil) 84 90 (fontified nil face font-lock-string-face) 90 91 (fontified nil face font-lock-string-face) 91 92 (fontified nil face (rainbow-delimiters-depth-1-face)) 92 93 (fontified nil face (rainbow-delimiters-depth-9-face)) 93 94 (fontified nil face (rainbow-delimiters-depth-8-face)) 94 95 (fontified nil) 95 119 (fontified t) 119 120 (fontified t face (rainbow-delimiters-depth-8-face)) 120 121 (fontified t face (rainbow-delimiters-depth-9-face)) 121 141 (fontified t) 141 167 (fontified t face font-lock-string-face) 167 168 (fontified t face (rainbow-delimiters-depth-9-face)) 168 169 (fontified t face (rainbow-delimiters-depth-8-face)) 169 170 (fontified t face (rainbow-delimiters-depth-7-face)) 170 171 (fontified t)) . 7928) (undo-tree-id2587 . -171) (undo-tree-id2588 . -170) (nil rear-nonsticky t 7957 . 7958)) (25310 47303 302853 0) 0 nil])
nil
([nil nil ((#("and (or" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 5 (fontified t face (rainbow-delimiters-depth-8-face)) 5 7 (fontified t face font-lock-keyword-face)) . 7751) (undo-tree-id1178 . -6) (undo-tree-id1179 . -6) (undo-tree-id1180 . -6) (undo-tree-id1181 . -6) 7757) ((7751 . 7758)) (25310 47253 890829 0) 0 nil])
([nil nil ((#("          " 0 10 (fontified nil)) . -7975) (7970 . 7975) (#("			" 0 3 (fontified nil)) . -7928) (7921 . 7928) (#("			      " 0 9 (fontified nil)) . -7882) (7878 . 7882) (#("	  " 0 3 (fontified nil)) . -7844) (7839 . 7844) (#("                        " 0 24 (fontified nil)) . -7787) (7780 . 7787) (#("                              " 0 30 (fontified nil)) . -7715) (7711 . 7715) (#("         " 0 7 (fontified nil) 7 9 (fontified nil)) . -7676) (7671 . 7676) (#("      " 0 5 (fontified nil) 5 6 (rear-nonsticky t fontified nil)) . -7651) (7650 . 7651) 8033) nil (25310 47386 604698 0) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t)) . 7751) (undo-tree-id1177 . 1)) ((7751 . 7752)) (25310 47253 522457 0) 0 nil])
([nil nil ((#("				" 0 4 (fontified nil)) . -7718) (undo-tree-id2796 . -1) (7711 . 7718) 7712) nil (25310 47386 604691 0) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-8-face))) . 7751) (undo-tree-id1174 . 1) (undo-tree-id1175 . 1) (undo-tree-id1176 . -1)) ((7751 . 7752)) (25310 47253 148674 0) 0 nil])
([nil nil ((7997 . 7998) (t 25310 47386 615153 375000) 7996) nil (25310 47423 8784 0) 0 nil])
([nil nil ((7757 . 7762) (#("research" 0 8 (fontified t face font-lock-string-face)) . 7757)) ((7757 . 7765) (#("study" 0 5 (fontified t face font-lock-string-face)) . 7757)) (25310 47252 649258 0) 0 nil])
([nil nil ((7782 . 7783)) nil (25310 47475 678972 0) 0 nil] [nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-7-face))) . -7781) (undo-tree-id2797 . -1) (undo-tree-id2798 . 1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) 7782) ((7781 . 7782)) (25310 47423 8695 0) 0 nil])
([nil nil ((#(") (tags \"think\")) (not (tags \"study\"))" 0 1 (fontified t face (rainbow-delimiters-depth-7-face)) 1 2 (fontified t) 2 3 (fontified t face (rainbow-delimiters-depth-7-face)) 3 8 (fontified t) 8 14 (fontified t face font-lock-string-face) 14 15 (fontified t face font-lock-string-face) 15 16 (fontified t face (rainbow-delimiters-depth-7-face)) 16 17 (fontified t face (rainbow-delimiters-depth-6-face)) 17 18 (fontified t) 18 19 (fontified t help-echo "Easy to misread; consider moving the element to the next line" face (rainbow-delimiters-depth-6-face font-lock-warning-face)) 19 23 (fontified t help-echo "Easy to misread; consider moving the element to the next line" face (font-lock-warning-face)) 23 24 (fontified t help-echo "Easy to misread; consider moving the element to the next line" face (rainbow-delimiters-depth-7-face font-lock-warning-face)) 24 29 (fontified t help-echo "Easy to misread; consider moving the element to the next line" face (font-lock-warning-face)) 29 35 (fontified t face (font-lock-warning-face font-lock-string-face) help-echo "Easy to misread; consider moving the element to the next line") 35 36 (fontified t face (font-lock-warning-face font-lock-string-face) help-echo "Easy to misread; consider moving the element to the next line") 36 37 (fontified t help-echo "Easy to misread; consider moving the element to the next line" face (rainbow-delimiters-depth-7-face font-lock-warning-face)) 37 38 (fontified t help-echo "Easy to misread; consider moving the element to the next line" face (rainbow-delimiters-depth-6-face font-lock-warning-face))) . 7763) (undo-tree-id1137 . -37) (undo-tree-id1138 . -37) (undo-tree-id1139 . -37) (undo-tree-id1141 . -37) (undo-tree-id1142 . 1) (undo-tree-id1143 . -38) (undo-tree-id1144 . 20) (undo-tree-id1145 . -19) (undo-tree-id1147 . -38) (undo-tree-id1149 . -38) (undo-tree-id1151 . -38) (undo-tree-id1153 . -37) (undo-tree-id1155 . -37) (undo-tree-id1157 . -37) (undo-tree-id1159 . -37) (undo-tree-id1161 . -37) (undo-tree-id1163 . -37) (undo-tree-id1165 . -37) (undo-tree-id1167 . -37) (undo-tree-id1169 . -37) (undo-tree-id1171 . -37) (undo-tree-id1173 . -37) 7800) ((7763 . 7801)) (25310 47252 263933 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-unmatched-face))) . 7997) (undo-tree-id2841 . 1) (undo-tree-id2842 . -1)) nil (25310 47475 678971 0) 0 nil])
nil
([nil nil ((#(", research or think" 0 19 (fontified t face font-lock-string-face)) . 7817) (undo-tree-id1182 . -18) (undo-tree-id1183 . -18) (undo-tree-id1184 . -18) (undo-tree-id1186 . -18) (undo-tree-id1188 . -9) (undo-tree-id1190 . -9) (undo-tree-id1192 . -9) (undo-tree-id1194 . -9) (undo-tree-id1196 . -9) (undo-tree-id1198 . -9) (undo-tree-id1200 . -9) (undo-tree-id1202 . -9) (undo-tree-id1204 . -9) (undo-tree-id1206 . -9) (undo-tree-id1208 . -12) (undo-tree-id1210 . -12) (undo-tree-id1212 . -12) (undo-tree-id1214 . -12) (undo-tree-id1216 . -12) (undo-tree-id1218 . -12) (undo-tree-id1220 . -12) (undo-tree-id1222 . -12) (undo-tree-id1224 . -12) (undo-tree-id1226 . -12) (undo-tree-id1228 . -12) (undo-tree-id1230 . -18) (undo-tree-id1232 . -18) (undo-tree-id1234 . -18) (undo-tree-id1236 . -18) (undo-tree-id1238 . -18) (undo-tree-id1240 . -18) (undo-tree-id1242 . -18) (undo-tree-id1244 . -18) (undo-tree-id1246 . -18) (undo-tree-id1248 . -18) (undo-tree-id1250 . -18) 7835 (t 25310 47169 300176 237000)) ((7817 . 7836) (t 25310 47172 583609 306000)) (25310 47251 911140 0) 0 nil])
([nil nil ((#("      " 0 6 (fontified nil)) . 7982) (undo-tree-id2837 . 6) (undo-tree-id2838 . -6) (undo-tree-id2839 . -6) (undo-tree-id2840 . -6) (#("
" 0 1 (fontified t)) . -7982) 7974) nil (25310 47475 678967 0) 0 nil])
([nil nil (7718) nil (25310 47251 583147 0) 0 nil])
([nil nil ((7843 . 7974) 7851) nil (25310 47475 678961 0) 0 nil])
([nil nil ((7685 . 7687) (#("(" 0 1 (fontified nil)) . -7685) (7685 . 7686) (t 25310 47172 583609 306000)) ((#("(" 0 1 (fontified nil)) . 7685) (undo-tree-id1623 . 1) (undo-tree-id1624 . 1) (7685 . 7686) (#("()" 0 1 (fontified t face (rainbow-delimiters-depth-4-face)) 1 2 (fontified t face (rainbow-delimiters-depth-4-face))) . 7685) (undo-tree-id1625 . -1) (undo-tree-id1626 . 1) (undo-tree-id1627 . -2) (undo-tree-id1628 . 2) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1)) (25310 47251 414782 0) 0 nil])
([nil nil ((7897 . 7902) (#("music" 0 5 (fontified t face font-lock-string-face)) . 7897)) nil (25310 47475 678960 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 7686) (undo-tree-id1428 . 1) (undo-tree-id1429 . 1) (undo-tree-id1430 . -1)) ((7686 . 7687)) (25310 47251 243151 0) 0 nil])
([nil nil ((#("and" 0 3 (fontified t face font-lock-keyword-face)) . 7887) (undo-tree-id2833 . -2) (undo-tree-id2834 . -2) (undo-tree-id2835 . -2) (undo-tree-id2836 . -2) 7889) nil (25310 47475 678958 0) 0 nil])
([nil nil ((7765 . 7766)) ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-7-face))) . 7765) (undo-tree-id1478 . 1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1)) (25310 47251 54693 0) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-8-face))) . 7887) (undo-tree-id2830 . 1) (undo-tree-id2831 . 1) (undo-tree-id2832 . -1)) nil (25310 47475 678952 0) 0 nil])
([nil nil ((7766 . 7768)) ((#("))" 0 1 (fontified t face (rainbow-delimiters-depth-6-face)) 1 2 (fontified t face (rainbow-delimiters-depth-5-face))) . 7766) (undo-tree-id1431 . -1) (undo-tree-id1432 . 1) (undo-tree-id1433 . -2) (undo-tree-id1434 . -2) (undo-tree-id1435 . -2) (undo-tree-id1436 . -2) (undo-tree-id1437 . -2) (undo-tree-id1438 . -2) (undo-tree-id1439 . -2) (undo-tree-id1440 . -2) (undo-tree-id1441 . -2) (undo-tree-id1442 . -2) (undo-tree-id1443 . -2) (undo-tree-id1444 . -2) (undo-tree-id1445 . -2) (undo-tree-id1446 . -2) (undo-tree-id1447 . -2) (undo-tree-id1448 . -2) (undo-tree-id1449 . -2) (undo-tree-id1450 . -2) (undo-tree-id1451 . -2) (undo-tree-id1452 . -2) (undo-tree-id1453 . -2) (undo-tree-id1454 . -2) (undo-tree-id1455 . -2) (undo-tree-id1456 . -2) (undo-tree-id1457 . -2) (undo-tree-id1458 . -2) (undo-tree-id1459 . -2) (undo-tree-id1460 . -2) (undo-tree-id1461 . -2) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1)) (25310 47250 818467 0) 0 nil])
([nil nil ((#(") (tags \"download\")" 0 1 (fontified t face (rainbow-delimiters-depth-7-face)) 1 2 (fontified t) 2 3 (fontified t face (rainbow-delimiters-depth-7-face)) 3 8 (fontified t) 8 18 (fontified t face font-lock-string-face) 18 19 (fontified t face (rainbow-delimiters-depth-7-face))) . 7899) (undo-tree-id2822 . -18) (undo-tree-id2823 . -18) (undo-tree-id2824 . -18) (undo-tree-id2825 . -18) (undo-tree-id2826 . 1) (undo-tree-id2827 . -19) (undo-tree-id2828 . 17) (undo-tree-id2829 . -3) 7917) nil (25310 47475 678947 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . 7767) (undo-tree-id1398 . 1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1)) ((7767 . 7768)) (25310 47250 479733 0) 0 nil])
([nil nil ((7934 . 7937) (#("y" 0 1 (fontified t face font-lock-string-face)) . -7934) (undo-tree-id2816 . -1) (#("d" 0 1 (fontified t face font-lock-string-face)) . -7935) (undo-tree-id2817 . -1) 7936 (7932 . 7936) (#("Music download" 0 14 (fontified t face font-lock-string-face)) . 7932) (undo-tree-id2818 . -13) (undo-tree-id2819 . -13) (undo-tree-id2820 . -13) (undo-tree-id2821 . -13) 7945) nil (25310 47475 678932 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-6-face))) . 7766) (undo-tree-id1367 . 1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1)) ((7766 . 7767)) (25310 47250 180842 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 7946 . 7947) (#("
" 0 1 (fontified nil)) . -8040) (7941 . 8041) 7903 (t 25310 47475 688437 593000)) nil (25310 47537 946741 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-7-face))) . 7765) (undo-tree-id1251 . 1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1)) ((7765 . 7766)) (25310 47250 180572 0) 0 nil])
([nil nil ((7992 . 7996) (#("study" 0 5 (fontified t face font-lock-string-face)) . 7992)) nil (25310 47537 946739 0) 0 nil])
nil
([nil nil ((7794 . 7798) (7793 . 7795) (#("\"" 0 1 (fontified nil)) . -7793) (7788 . 7794) (#("s" 0 1 (fontified t)) . -7788) (undo-tree-id2843 . -1) 7789 (7788 . 7789) (7787 . 7789) (#("(" 0 1 (fontified nil)) . -7787) (7783 . 7788) (7782 . 7784) (#("(" 0 1 (fontified nil)) . -7782) (7781 . 7783)) nil (25310 47537 946736 0) 0 nil])
([nil nil ((8050 . 8054) (#("Study" 0 5 (fontified t face font-lock-string-face)) . 8050)) nil (25310 47537 946721 0) 0 nil])
([nil nil ((7675 . 7678) (#("   " 0 3 (fontified nil)) . -7673) (7677 . 7678) (t 25310 47537 956504 280000)) nil (25310 47560 901937 0) 0 nil])
([nil nil ((#("	  " 0 3 (fontified nil)) . -7680) (undo-tree-id2888 . -2) (7675 . 7680) 7677) nil (25310 47560 901935 0) 0 nil])
([nil nil ((#("	    (org-ql-block '(and (todo \"TODO\")
			    (and (or (tags \"research\") (tags \"think\")) (not (tags \"study\")) (not (tags \"work\"))))
			    ((org-ql-block-header \"Study, research or think\")))
" 0 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-5-face)) 6 20 (fontified t) 20 21 (fontified t face (rainbow-delimiters-depth-6-face)) 21 25 (fontified t) 25 26 (fontified t face (rainbow-delimiters-depth-7-face)) 26 31 (fontified t) 31 32 (fontified t face font-lock-string-face) 32 36 (fontified t face font-lock-string-face) 36 37 (fontified t face font-lock-string-face) 37 38 (fontified t face (rainbow-delimiters-depth-7-face)) 38 39 (fontified t) 39 46 (fontified t) 46 47 (fontified t face (rainbow-delimiters-depth-7-face)) 47 50 (fontified t face font-lock-keyword-face) 50 51 (fontified t) 51 52 (fontified t face (rainbow-delimiters-depth-8-face)) 52 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 56 (fontified t face (rainbow-delimiters-depth-9-face)) 56 60 (fontified t) 60 61 (fontified t) 61 71 (fontified t face font-lock-string-face) 71 72 (fontified t face (rainbow-delimiters-depth-9-face)) 72 73 (fontified t) 73 74 (fontified t face (rainbow-delimiters-depth-9-face)) 74 79 (fontified t) 79 85 (fontified t face font-lock-string-face) 85 86 (fontified t face font-lock-string-face) 86 87 (fontified t face (rainbow-delimiters-depth-9-face)) 87 88 (fontified t face (rainbow-delimiters-depth-8-face)) 88 89 (fontified t) 89 90 (fontified t face (rainbow-delimiters-depth-8-face)) 90 94 (fontified t) 94 95 (fontified t face (rainbow-delimiters-depth-9-face)) 95 100 (fontified t) 100 101 (fontified t face font-lock-string-face) 101 105 (fontified t face font-lock-string-face) 105 106 (fontified t face font-lock-string-face) 106 107 (fontified t face font-lock-string-face) 107 108 (fontified t face (rainbow-delimiters-depth-9-face)) 108 109 (fontified t face (rainbow-delimiters-depth-8-face)) 109 110 (fontified t) 110 111 (fontified t face (rainbow-delimiters-depth-8-face)) 111 115 (fontified t) 115 116 (fontified t face (rainbow-delimiters-depth-9-face)) 116 121 (fontified t) 121 126 (fontified t face font-lock-string-face) 126 127 (fontified t face font-lock-string-face) 127 128 (fontified t face (rainbow-delimiters-depth-9-face)) 128 129 (fontified t face (rainbow-delimiters-depth-8-face)) 129 130 (fontified t face (rainbow-delimiters-depth-7-face)) 130 131 (fontified t face (rainbow-delimiters-depth-6-face)) 131 132 (fontified t) 132 139 (fontified t) 139 140 (fontified t face (rainbow-delimiters-depth-6-face)) 140 141 (fontified t face (rainbow-delimiters-depth-7-face)) 141 161 (fontified t) 161 187 (fontified t face font-lock-string-face) 187 188 (fontified t face (rainbow-delimiters-depth-7-face)) 188 189 (fontified t face (rainbow-delimiters-depth-6-face)) 189 190 (fontified t face (rainbow-delimiters-depth-5-face)) 190 191 (fontified t)) . 7675) (undo-tree-id2844 . -133) (undo-tree-id2845 . -190) (undo-tree-id2846 . -190) (undo-tree-id2847 . -2) (undo-tree-id2848 . -133) (undo-tree-id2849 . 186) (undo-tree-id2850 . -162) (undo-tree-id2851 . -54) (undo-tree-id2852 . -190) (undo-tree-id2853 . -133) (undo-tree-id2854 . -191) (undo-tree-id2855 . -2) (undo-tree-id2856 . -133) (undo-tree-id2857 . -132) (undo-tree-id2858 . -133) (undo-tree-id2859 . -133) (undo-tree-id2860 . -133) (undo-tree-id2861 . -133) (undo-tree-id2862 . -133) (undo-tree-id2863 . -133) (undo-tree-id2864 . -133) (undo-tree-id2865 . -133) (undo-tree-id2866 . -133) (undo-tree-id2867 . -133) (undo-tree-id2868 . -133) (undo-tree-id2869 . -133) (undo-tree-id2870 . -133) (undo-tree-id2871 . -133) (undo-tree-id2872 . -133) (undo-tree-id2873 . -133) (undo-tree-id2874 . -133) (undo-tree-id2875 . -133) (undo-tree-id2876 . -133) (undo-tree-id2877 . -133) (undo-tree-id2878 . -133) (undo-tree-id2879 . -133) (undo-tree-id2880 . -133) (undo-tree-id2881 . -133) (undo-tree-id2882 . -133) (undo-tree-id2883 . -133) (undo-tree-id2884 . -133) (undo-tree-id2885 . -133) (undo-tree-id2886 . -133) (undo-tree-id2887 . -133) 7808) nil (25310 47560 901929 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 7875 . 7876) (#("
" 0 1 (fontified nil)) . -8061) (7870 . 8062) 7833) nil (25310 47560 901834 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -7967) (7870 . 7968) 7832 (t 25310 47560 911916 81000)) nil (25310 47696 59817 0) 0 nil])
([nil nil ((7921 . 7926) (#("work" 0 4 (fontified t face font-lock-string-face)) . 7921)) nil (25310 47696 59815 0) 0 nil])
([nil nil ((7960 . 7965) (#("Work" 0 4 (fontified t face font-lock-string-face)) . 7960)) nil (25310 47696 59814 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-string-face)) . 7925)) nil (25310 47696 59812 0) 0 nil])
([nil nil ((8111 . 8115) (8110 . 8112) (#("\"" 0 1 (fontified nil)) . -8110) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (8105 . 8111) (8104 . 8106) (#("(" 0 1 (fontified nil)) . -8104) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (8100 . 8105) (8099 . 8101) (#("(" 0 1 (fontified nil)) . -8099) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (8098 . 8100)) nil (25310 47975 814865 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -8390) (8179 . 8391) 8122 (t 25310 47696 71831 51000)) nil (25310 48003 372346 0) 0 nil] [nil nil ((#("	    " 0 5 (fontified t)) . -8180) (undo-tree-id2895 . -5) (undo-tree-id2896 . -5) (undo-tree-id2897 . -5) (undo-tree-id2898 . -5) (undo-tree-id2899 . -5) (undo-tree-id2900 . -5) (undo-tree-id2901 . -5) (undo-tree-id2902 . -5) (undo-tree-id2903 . -5) (undo-tree-id2904 . -5) (undo-tree-id2905 . -5) (undo-tree-id2906 . -5) (undo-tree-id2907 . -5) (undo-tree-id2908 . -5) (undo-tree-id2909 . -5) (undo-tree-id2910 . -5) (undo-tree-id2911 . -5) (undo-tree-id2912 . -5) (undo-tree-id2913 . -5) (undo-tree-id2914 . -5) (undo-tree-id2915 . -5) (undo-tree-id2916 . -5) (undo-tree-id2917 . -5) (undo-tree-id2918 . -5) (undo-tree-id2919 . -5) (undo-tree-id2920 . -5) (undo-tree-id2921 . -5) (undo-tree-id2922 . -5) (undo-tree-id2923 . -5) (undo-tree-id2924 . -5) (undo-tree-id2925 . -5) (undo-tree-id2926 . -5) (undo-tree-id2927 . -5) (undo-tree-id2928 . -5) (undo-tree-id2929 . -5) (undo-tree-id2930 . -5) (undo-tree-id2931 . -5) (undo-tree-id2932 . -5) (undo-tree-id2933 . -5) (undo-tree-id2934 . -5) (undo-tree-id2935 . -5) (undo-tree-id2936 . -5) (undo-tree-id2937 . -5) (undo-tree-id2938 . -5) 8185 (8179 . 8185) (t 25310 47696 71831 51000) 8122) ((#("
	    " 0 1 (fontified t) 1 6 (fontified nil)) . 8179) (undo-tree-id2939 . -6) (undo-tree-id2940 . -6) (undo-tree-id2941 . -6) (undo-tree-id2942 . -6) (undo-tree-id2943 . -6) (undo-tree-id2944 . -6) (undo-tree-id2945 . -6) (undo-tree-id2946 . -6) (undo-tree-id2947 . -6) (undo-tree-id2948 . -6) (undo-tree-id2949 . -6) (undo-tree-id2950 . -6) (undo-tree-id2951 . -6) (undo-tree-id2952 . -6) (undo-tree-id2953 . -6) (undo-tree-id2954 . -6) (undo-tree-id2955 . -6) (undo-tree-id2956 . -6) (undo-tree-id2957 . -6) (undo-tree-id2958 . -6) (undo-tree-id2959 . -6) (undo-tree-id2960 . -6) (undo-tree-id2961 . -6) (undo-tree-id2962 . -6) (undo-tree-id2963 . -6) (undo-tree-id2964 . -6) (undo-tree-id2965 . -6) (undo-tree-id2966 . -6) (undo-tree-id2967 . -6) (undo-tree-id2968 . -6) (undo-tree-id2969 . -6) (undo-tree-id2970 . -6) (undo-tree-id2971 . -6) (undo-tree-id2972 . -6) (undo-tree-id2973 . -6) (undo-tree-id2974 . -6) (undo-tree-id2975 . -6) (undo-tree-id2976 . -6) (undo-tree-id2977 . -6) (undo-tree-id2978 . -6) (undo-tree-id2979 . -6) (undo-tree-id2980 . -6) (8180 . 8185)) (25310 47975 814508 0) 0 nil])
([nil nil ((8365 . 8367) (8362 . 8365) (#("Study, research or think" 0 24 (fontified t face font-lock-string-face)) . 8362)) nil (25310 48003 372344 0) 0 nil])
nil
([nil nil ((8232 . 8235) (#("o" 0 1 (fontified t)) . -8232) (undo-tree-id2984 . -1) (#("r" 0 1 (fontified t face font-lock-keyword-face)) . -8233) (undo-tree-id2985 . -1) 8234) nil (25310 48003 372342 0) 0 nil])
([nil nil ((8255 . 8258) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-8-face))) . -8255) (undo-tree-id2981 . -1) (undo-tree-id2982 . 1) (undo-tree-id2983 . -1) 8256 (8254 . 8256) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-8-face))) . -8254) (8253 . 8255)) nil (25310 48003 372334 0) 0 nil])
([nil nil ((8228 . 8233) (#(" " 0 1 (fontified nil)) . 8227) (undo-tree-id3138 . -1) (8222 . 8223) (#("    " 0 4 (fontified nil)) . 8222) (8231 . 8232) (t 25310 48003 382524 817000)) nil (25310 48075 254970 0) 0 nil])
([nil nil ((8256 . 8262)) nil (25310 48075 254967 0) 0 nil])
([nil nil ((8283 . 8288) (#(" " 0 1 (fontified nil)) . 8282) (undo-tree-id3137 . -1) (8283 . 8284)) nil (25310 48075 254966 0) 0 nil])
([nil nil ((8309 . 8314) (#(" " 0 1 (fontified nil)) . 8308) (undo-tree-id3136 . -1) (8309 . 8310)) nil (25310 48075 254964 0) 0 nil])
([nil nil ((8334 . 8339) (#(" " 0 1 (fontified nil)) . 8333) (undo-tree-id3135 . -1) (8334 . 8335)) nil (25310 48075 254961 0) 0 nil])
([nil nil ((8224 . 8226) (#("and" 0 3 (fontified t face font-lock-keyword-face)) . 8224)) nil (25310 48075 254959 0) 0 nil])
([nil nil ((8227 . 8228) (#(" " 0 1 (fontified t)) . -8228) (undo-tree-id3131 . -1) 8229 (8228 . 8229) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-8-face))) . -8228) (undo-tree-id3132 . -1) (undo-tree-id3133 . 1) (undo-tree-id3134 . -1) 8229 (8227 . 8229) (#("(" 0 1 (fontified nil)) . -8227) (8224 . 8228)) nil (25310 48075 254956 0) 0 nil])
([nil nil ((8364 . 8365)) nil (25310 48075 254950 0) 0 nil])
([nil nil ((#("(not " 0 1 (fontified t face (rainbow-delimiters-depth-9-face)) 1 5 (fontified t)) . 8323) (undo-tree-id2996 . -4) (undo-tree-id2997 . -4) (undo-tree-id2998 . -4) (undo-tree-id2999 . -5) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -2) (undo-tree-id3029 . -2) (undo-tree-id3030 . -2) (undo-tree-id3031 . -2) (undo-tree-id3032 . -2) (undo-tree-id3033 . -2) (undo-tree-id3034 . -2) (undo-tree-id3035 . -2) (undo-tree-id3036 . -2) (undo-tree-id3037 . -2) (undo-tree-id3038 . -2) (undo-tree-id3039 . -2) (undo-tree-id3040 . -2) (undo-tree-id3041 . -2) (undo-tree-id3042 . -2) (undo-tree-id3043 . -2) (undo-tree-id3044 . -2) (undo-tree-id3045 . -2) (undo-tree-id3046 . -2) (undo-tree-id3047 . -2) (undo-tree-id3048 . -2) (undo-tree-id3049 . -2) (undo-tree-id3050 . -2) (undo-tree-id3051 . -2) (undo-tree-id3052 . -2) (undo-tree-id3053 . -2) (undo-tree-id3054 . -2) (undo-tree-id3055 . -2) (undo-tree-id3056 . -3) (undo-tree-id3057 . -3) (undo-tree-id3058 . -3) (undo-tree-id3059 . -3) (undo-tree-id3060 . -3) (undo-tree-id3061 . -3) (undo-tree-id3062 . -3) (undo-tree-id3063 . -3) (undo-tree-id3064 . -3) (undo-tree-id3065 . -3) (undo-tree-id3066 . -3) (undo-tree-id3067 . -3) (undo-tree-id3068 . -3) (undo-tree-id3069 . -3) (undo-tree-id3070 . -3) (undo-tree-id3071 . -3) (undo-tree-id3072 . -3) (undo-tree-id3073 . -3) (undo-tree-id3074 . -3) (undo-tree-id3075 . -3) (undo-tree-id3076 . -3) (undo-tree-id3077 . -3) (undo-tree-id3078 . -3) (undo-tree-id3079 . -3) (undo-tree-id3080 . -3) (undo-tree-id3081 . -3) (undo-tree-id3082 . -3) (undo-tree-id3083 . -3) (undo-tree-id3084 . -3) (undo-tree-id3085 . -3) (undo-tree-id3086 . -3) (undo-tree-id3087 . -3) (undo-tree-id3088 . -3) (undo-tree-id3089 . -3) (undo-tree-id3090 . -3) (undo-tree-id3091 . -4) (undo-tree-id3092 . -4) (undo-tree-id3093 . -4) (undo-tree-id3094 . -4) (undo-tree-id3095 . -4) (undo-tree-id3096 . -4) (undo-tree-id3097 . -4) (undo-tree-id3098 . -4) (undo-tree-id3099 . -4) (undo-tree-id3100 . -4) (undo-tree-id3101 . -4) (undo-tree-id3102 . -4) (undo-tree-id3103 . -4) (undo-tree-id3104 . -4) (undo-tree-id3105 . -4) (undo-tree-id3106 . -4) (undo-tree-id3107 . -4) (undo-tree-id3108 . -4) (undo-tree-id3109 . -4) (undo-tree-id3110 . -4) (undo-tree-id3111 . -4) (undo-tree-id3112 . -4) (undo-tree-id3113 . -4) (undo-tree-id3114 . -4) (undo-tree-id3115 . -4) (undo-tree-id3116 . -4) (undo-tree-id3117 . -4) (undo-tree-id3118 . -4) (undo-tree-id3119 . -4) (undo-tree-id3120 . -4) (undo-tree-id3121 . -4) (undo-tree-id3122 . -4) (undo-tree-id3123 . -4) (undo-tree-id3124 . -4) (undo-tree-id3125 . -4) (undo-tree-id3126 . -4) (#("(not " 0 1 (fontified t face (rainbow-delimiters-depth-9-face)) 1 5 (fontified t)) . 8303) (undo-tree-id3127 . -5) (#("(not " 0 1 (fontified t face (rainbow-delimiters-depth-9-face)) 1 5 (fontified t)) . 8282) (undo-tree-id3128 . -5) (#("(not " 0 1 (fontified t face (rainbow-delimiters-depth-9-face)) 1 4 (fontified t) 4 5 (fontified t)) . 8261) (undo-tree-id3129 . -5) (#("(not " 0 1 (fontified t face (rainbow-delimiters-depth-9-face)) 1 4 (fontified t) 4 5 (fontified t)) . 8237) (undo-tree-id3130 . -5) 8347) nil (25310 48075 254944 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-8-face))) . 8254) (undo-tree-id2994 . 1) (undo-tree-id2995 . -1)) nil (25310 48075 254798 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-7-face))) . 8274) (undo-tree-id2992 . 1) (undo-tree-id2993 . -1)) nil (25310 48075 254795 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-7-face))) . 8293) (undo-tree-id2990 . 1) (undo-tree-id2991 . -1)) nil (25310 48075 254791 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . 8313) (undo-tree-id2988 . 1) (undo-tree-id2989 . -1)) nil (25310 48075 254788 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . 8331) (undo-tree-id2986 . 1) (undo-tree-id2987 . -1)) nil (25310 48098 608971 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 8236 . 8237) (8232 . 8255) 8233 (t 25310 48075 265037 114000)) nil (25310 48119 69155 0) 0 nil] [nil nil ((nil rear-nonsticky nil 8318 . 8319) (#("
" 0 1 (fontified nil)) . -8332) (8313 . 8333) 8296 (t 25310 48075 265037 114000)) ((#("
				 (tags \"work\")
" 0 1 (fontified t) 1 5 (fontified nil) 5 6 (fontified nil rear-nonsticky nil) 6 7 (fontified nil face (rainbow-delimiters-depth-9-face)) 7 12 (fontified nil) 12 17 (fontified nil face font-lock-string-face) 17 18 (fontified nil face font-lock-string-face) 18 19 (fontified nil face (rainbow-delimiters-depth-9-face)) 19 20 (fontified nil)) . 8313) (undo-tree-id3139 . -19) (undo-tree-id3140 . -1) (undo-tree-id3141 . -19) (undo-tree-id3142 . -12) (undo-tree-id3143 . -1) (undo-tree-id3144 . -12) (8332 . 8333) (nil rear-nonsticky t 8318 . 8319)) (25310 48098 608690 0) 0 nil])
([nil nil ((8232 . 8255) 8237) nil (25310 48119 69153 0) 0 nil])
nil
([nil nil ((8244 . 8249) (#("research" 0 8 (fontified t face font-lock-string-face)) . 8244)) nil (25310 48119 69152 0) 0 nil])
([nil nil ((8241 . 8242) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-9-face))) . -8241) (undo-tree-id3177 . -1) (undo-tree-id3178 . 1) (undo-tree-id3179 . -1) 8242 (8238 . 8241) (8237 . 8239) (#("(" 0 1 (fontified nil)) . -8237) (8237 . 8238)) nil (25310 48119 69150 0) 0 nil])
([nil nil ((8264 . 8272) (8263 . 8265) (#("\"" 0 1 (fontified nil)) . -8263) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (8258 . 8264) (8257 . 8259) (#("(" 0 1 (fontified nil)) . -8257) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (8256 . 8258)) nil (25310 48119 69144 0) 0 nil])
([nil nil ((8274 . 8275)) nil (25310 48119 69137 0) 0 nil])
([nil nil ((#("				 (tags \"research\")
" 0 4 (fontified t) 4 5 (rear-nonsticky t fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-1-face)) 6 10 (fontified t) 10 11 (fontified t) 11 21 (fontified t face font-lock-string-face) 21 22 (fontified t face (rainbow-delimiters-depth-1-face)) 22 23 (fontified t)) . 8276) (undo-tree-id3145 . -21) (undo-tree-id3146 . -23) (undo-tree-id3147 . 2) (undo-tree-id3148 . -22) (undo-tree-id3149 . 18) (undo-tree-id3150 . -6) (undo-tree-id3151 . -21) (undo-tree-id3152 . -21) (undo-tree-id3153 . -21) (undo-tree-id3154 . -21) (undo-tree-id3155 . -21) (undo-tree-id3156 . -21) (undo-tree-id3157 . -21) (undo-tree-id3158 . -21) (undo-tree-id3159 . -21) (undo-tree-id3160 . -21) (undo-tree-id3161 . -21) (undo-tree-id3162 . -21) (undo-tree-id3163 . -21) (undo-tree-id3164 . -21) (undo-tree-id3165 . -21) (undo-tree-id3166 . -21) (undo-tree-id3167 . -21) (undo-tree-id3168 . -21) (undo-tree-id3169 . -21) (undo-tree-id3170 . -21) (undo-tree-id3171 . -21) (undo-tree-id3172 . -21) 8297) nil (25310 48119 69132 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 5096 . 5097) (#("
" 0 1 (fontified nil)) . -5113) (5094 . 5114) 5083 (t 25310 48119 79694 997000)) nil (25314 14545 70032 0) 0 nil])
([nil nil ((5112 . 5131) (#("0" 0 1 (fontified t)) . -5112) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 5113 (5102 . 5113) (#("r" 0 1 (fontified t)) . -5102) (undo-tree-id16 . -1) (#("o" 0 1 (fontified t)) . -5103) (undo-tree-id17 . -1) (#("g" 0 1 (fontified t)) . -5104) (undo-tree-id18 . -1) 5105 (5102 . 5105) (#("i" 0 1 (fontified t)) . -5102) (undo-tree-id19 . -1) (#("n" 0 1 (fontified t)) . -5103) (undo-tree-id20 . -1) 5104 (5102 . 5104) (#("org-capture" 0 11 (fontified t)) . 5102) (undo-tree-id21 . -11) (undo-tree-id22 . -11)) nil (25314 14552 944011 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 5312) (undo-tree-id362 . -1) (undo-tree-id363 . 1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (5010 . 5312) (#("		\"o\" 'counsel-find-file
		\"b\" 'counsel-ibuffer
		\"a\" 'org-agenda
		\"c\" 'org-capture
		\"c\" 'org-insert-structure-template
		;; \"f\" '(lambda () (interactive) (org-ql-search 'org-agenda-files))
		\"lb\" 'counsel-bookmark
		\"m\" '(lambda () (interactive) (find-file (expand-file-name \"~/.emacs.d/init.el\")))" 0 2 (fontified t) 2 5 (face font-lock-string-face fontified t) 5 27 (fontified t) 27 30 (face font-lock-string-face fontified t) 30 50 (fontified t) 50 53 (face font-lock-string-face fontified t) 53 66 (fontified t) 66 68 (fontified t) 68 71 (face font-lock-string-face fontified t) 71 84 (fontified t) 84 85 (fontified t) 85 86 (fontified t) 86 87 (rear-nonsticky t fontified t) 87 90 (face font-lock-string-face fontified t) 90 121 (fontified t) 121 122 (fontified t) 122 124 (fontified t) 124 127 (face font-lock-comment-delimiter-face fontified t) 127 192 (face font-lock-comment-face fontified t) 192 194 (fontified t) 194 198 (face font-lock-string-face fontified t) 198 219 (fontified t) 219 222 (face font-lock-string-face fontified t) 222 224 (fontified t) 224 225 (face (rainbow-delimiters-depth-3-face) fontified t) 225 232 (fontified t) 232 233 (face (rainbow-delimiters-depth-4-face) fontified t) 233 234 (face (rainbow-delimiters-depth-4-face) fontified t) 234 235 (fontified t) 235 236 (face (rainbow-delimiters-depth-4-face) fontified t) 236 247 (face font-lock-keyword-face fontified t) 247 248 (face (rainbow-delimiters-depth-4-face) fontified t) 248 249 (fontified t) 249 250 (face (rainbow-delimiters-depth-4-face) fontified t) 250 260 (fontified t) 260 261 (face (rainbow-delimiters-depth-5-face) fontified t) 261 278 (fontified t) 278 298 (face font-lock-string-face fontified t) 298 299 (face (rainbow-delimiters-depth-5-face) fontified t) 299 300 (face (rainbow-delimiters-depth-4-face) fontified t) 300 301 (face (rainbow-delimiters-depth-3-face) fontified t)) . 5010) (undo-tree-id366 . -85) (undo-tree-id367 . -92) (undo-tree-id368 . -102) (undo-tree-id369 . -102) (undo-tree-id370 . -102) (undo-tree-id371 . -102) (undo-tree-id372 . -102) (undo-tree-id373 . -102) (undo-tree-id374 . -102) (undo-tree-id375 . -102) (undo-tree-id376 . -102) (undo-tree-id377 . -102) (undo-tree-id378 . -102) (undo-tree-id379 . -102) (undo-tree-id380 . -102) (undo-tree-id381 . -102) (undo-tree-id382 . 180) (undo-tree-id383 . -120) (undo-tree-id384 . -120) (undo-tree-id385 . -120) (undo-tree-id386 . -120) (undo-tree-id387 . -120) (undo-tree-id388 . -120) (undo-tree-id389 . -120) (undo-tree-id390 . -120) (undo-tree-id391 . -120) (undo-tree-id392 . -120) (undo-tree-id393 . -120) (undo-tree-id394 . -120) (undo-tree-id395 . -120) (undo-tree-id396 . -120) (undo-tree-id397 . -120) (undo-tree-id398 . -120) (undo-tree-id399 . -120) (undo-tree-id400 . -120) (undo-tree-id401 . -120) (undo-tree-id402 . -120) (undo-tree-id403 . -120) (undo-tree-id404 . -120) (undo-tree-id405 . -120) (undo-tree-id406 . -120) (undo-tree-id407 . -120) (undo-tree-id408 . -120) (undo-tree-id409 . -120) (undo-tree-id410 . -120) (undo-tree-id411 . -120) (undo-tree-id412 . -120) (undo-tree-id413 . -120) (undo-tree-id414 . -120) (undo-tree-id415 . -120) (undo-tree-id416 . -120) (undo-tree-id417 . -120) (undo-tree-id418 . -120) (undo-tree-id419 . -120) (undo-tree-id420 . -120) (undo-tree-id421 . -120) (undo-tree-id422 . -120) (undo-tree-id423 . -120) (undo-tree-id424 . -120) (undo-tree-id425 . -83) (undo-tree-id426 . -83) (undo-tree-id427 . -83) (undo-tree-id428 . -83) (undo-tree-id429 . -83) (undo-tree-id430 . -83) (undo-tree-id431 . -83) (undo-tree-id432 . -83) (undo-tree-id433 . -83) (undo-tree-id434 . -83) (undo-tree-id435 . -83) (undo-tree-id436 . -83) (undo-tree-id437 . -83) (undo-tree-id438 . -83) (undo-tree-id439 . -64) (undo-tree-id440 . -64) (undo-tree-id441 . -64) (undo-tree-id442 . -64) (undo-tree-id443 . -64) (undo-tree-id444 . -64) (undo-tree-id445 . -64) (undo-tree-id446 . -64) (undo-tree-id447 . -64) (undo-tree-id448 . -64) (undo-tree-id449 . -64) (undo-tree-id450 . -64) (undo-tree-id451 . -64) (undo-tree-id452 . -64) (undo-tree-id453 . -46) (undo-tree-id454 . -46) (undo-tree-id455 . -46) (undo-tree-id456 . -46) (undo-tree-id457 . -46) (undo-tree-id458 . -46) (undo-tree-id459 . -46) (undo-tree-id460 . -46) (undo-tree-id461 . -46) (undo-tree-id462 . -46) (undo-tree-id463 . -46) (undo-tree-id464 . -46) (undo-tree-id465 . -46) (undo-tree-id466 . -46) (undo-tree-id467 . -23) (undo-tree-id468 . -23) (undo-tree-id469 . -23) (undo-tree-id470 . -23) (undo-tree-id471 . -23) (undo-tree-id472 . -23) (undo-tree-id473 . -23) (undo-tree-id474 . -23) (undo-tree-id475 . -23) (undo-tree-id476 . -23) (undo-tree-id477 . -23) (undo-tree-id478 . -23) (undo-tree-id479 . -23) (undo-tree-id480 . -23) (undo-tree-id481 . -217) (undo-tree-id482 . -23) (undo-tree-id483 . -23) (undo-tree-id484 . -23) (undo-tree-id485 . -23) (undo-tree-id486 . -23) (undo-tree-id487 . -23) (undo-tree-id488 . -23) (undo-tree-id489 . -23) (undo-tree-id490 . -23) (undo-tree-id491 . -23) (undo-tree-id492 . -23) (undo-tree-id493 . -23) (undo-tree-id494 . -23) (undo-tree-id495 . -23) (undo-tree-id496 . -23) (undo-tree-id497 . -23) (undo-tree-id498 . -23) (undo-tree-id499 . -23) (undo-tree-id500 . -23) (undo-tree-id501 . -23) (undo-tree-id502 . -23) (undo-tree-id503 . -23) (undo-tree-id504 . -23) (undo-tree-id505 . -23) (undo-tree-id506 . -23) (undo-tree-id507 . -23) (undo-tree-id508 . -23) (undo-tree-id509 . -23) (undo-tree-id510 . -47) (undo-tree-id511 . -47) (undo-tree-id512 . -47) (undo-tree-id513 . -47) (undo-tree-id514 . -47) (undo-tree-id515 . -47) (undo-tree-id516 . -47) (undo-tree-id517 . -47) (undo-tree-id518 . -47) (undo-tree-id519 . -47) (undo-tree-id520 . -47) (undo-tree-id521 . -47) (undo-tree-id522 . -47) (undo-tree-id523 . -47) (undo-tree-id524 . -47) (undo-tree-id525 . -47) (undo-tree-id526 . -47) (undo-tree-id527 . -47) (undo-tree-id528 . -47) (undo-tree-id529 . -47) (undo-tree-id530 . -47) (undo-tree-id531 . -65) (undo-tree-id532 . -65) (undo-tree-id533 . -65) (undo-tree-id534 . -65) (undo-tree-id535 . -65) (undo-tree-id536 . -65) (undo-tree-id537 . -65) (undo-tree-id538 . -84) (undo-tree-id539 . -84) (undo-tree-id540 . -84) (undo-tree-id541 . -84) (undo-tree-id542 . -84) (undo-tree-id543 . -84) (undo-tree-id544 . -84) (undo-tree-id545 . -108) (undo-tree-id546 . -108) (undo-tree-id547 . -108) (undo-tree-id548 . -108) (undo-tree-id549 . -108) (undo-tree-id550 . -108) (undo-tree-id551 . -108) (undo-tree-id552 . -145) (undo-tree-id553 . -145) (undo-tree-id554 . -145) (undo-tree-id555 . -145) (undo-tree-id556 . -145) (undo-tree-id557 . -145) (undo-tree-id558 . -145) (undo-tree-id559 . -215) (undo-tree-id560 . -215) (undo-tree-id561 . -215) (undo-tree-id562 . -215) (undo-tree-id563 . -215) (undo-tree-id564 . -215) (undo-tree-id565 . -215) (undo-tree-id566 . -215) (undo-tree-id567 . -215) (undo-tree-id568 . -215) (undo-tree-id569 . -215) (undo-tree-id570 . -215) (undo-tree-id571 . -215) (undo-tree-id572 . -215) (undo-tree-id573 . -215) (undo-tree-id574 . -215) (undo-tree-id575 . -215) (undo-tree-id576 . -215) (undo-tree-id577 . -215) (undo-tree-id578 . -215) (undo-tree-id579 . -215) (undo-tree-id580 . -215) (undo-tree-id581 . -215) (undo-tree-id582 . -215) (undo-tree-id583 . -215) (undo-tree-id584 . -215) (undo-tree-id585 . -215) (undo-tree-id586 . -215) (undo-tree-id587 . -240) (undo-tree-id588 . -240) (undo-tree-id589 . -240) (undo-tree-id590 . -240) (undo-tree-id591 . -240) (undo-tree-id592 . -240) (undo-tree-id593 . -240) (undo-tree-id594 . -240) (undo-tree-id595 . -240) (undo-tree-id596 . -240) (undo-tree-id597 . -240) (undo-tree-id598 . -240) (undo-tree-id599 . -240) (undo-tree-id600 . -240) (undo-tree-id601 . -240) (undo-tree-id602 . -240) (undo-tree-id603 . -240) (undo-tree-id604 . -240) (undo-tree-id605 . -240) (undo-tree-id606 . -240) (undo-tree-id607 . -240) (undo-tree-id608 . -25) (undo-tree-id609 . -25) (undo-tree-id610 . -25) (undo-tree-id611 . -25) (undo-tree-id612 . -25) (undo-tree-id613 . -25) (undo-tree-id614 . -25) (undo-tree-id615 . -25) (undo-tree-id616 . -25) (undo-tree-id617 . -25) (undo-tree-id618 . -25) (undo-tree-id619 . -25) (undo-tree-id620 . -25) (undo-tree-id621 . -25) (undo-tree-id622 . -48) (undo-tree-id623 . -48) (undo-tree-id624 . -48) (undo-tree-id625 . -48) (undo-tree-id626 . -48) (undo-tree-id627 . -48) (undo-tree-id628 . -48) (undo-tree-id629 . -48) (undo-tree-id630 . -48) (undo-tree-id631 . -48) (undo-tree-id632 . -48) (undo-tree-id633 . -48) (undo-tree-id634 . -48) (undo-tree-id635 . -48) (undo-tree-id636 . -66) (undo-tree-id637 . -66) (undo-tree-id638 . -66) (undo-tree-id639 . -66) (undo-tree-id640 . -66) (undo-tree-id641 . -66) (undo-tree-id642 . -66) (undo-tree-id643 . -66) (undo-tree-id644 . -66) (undo-tree-id645 . -66) (undo-tree-id646 . -66) (undo-tree-id647 . -66) (undo-tree-id648 . -66) (undo-tree-id649 . -66) (undo-tree-id650 . -85) (undo-tree-id651 . -85) (undo-tree-id652 . -85) (undo-tree-id653 . -85) (undo-tree-id654 . -85) (undo-tree-id655 . -85) (undo-tree-id656 . -85) (undo-tree-id657 . -85) (undo-tree-id658 . -85) (undo-tree-id659 . -85) (undo-tree-id660 . -85) (undo-tree-id661 . -85) (undo-tree-id662 . -85) (undo-tree-id663 . -85) (undo-tree-id664 . -122) (undo-tree-id665 . -122) (undo-tree-id666 . -122) (undo-tree-id667 . -122) (undo-tree-id668 . -122) (undo-tree-id669 . -122) (undo-tree-id670 . -122) (undo-tree-id671 . -122) (undo-tree-id672 . -122) (undo-tree-id673 . -122) (undo-tree-id674 . -122) (undo-tree-id675 . -122) (undo-tree-id676 . -122) (undo-tree-id677 . -122) (undo-tree-id678 . -192) (undo-tree-id679 . -192) (undo-tree-id680 . -192) (undo-tree-id681 . -192) (undo-tree-id682 . -192) (undo-tree-id683 . -192) (undo-tree-id684 . -192) (undo-tree-id685 . -192) (undo-tree-id686 . -192) (undo-tree-id687 . -192) (undo-tree-id688 . -192) (undo-tree-id689 . -192) (undo-tree-id690 . -192) (undo-tree-id691 . -192) (undo-tree-id692 . -217) (undo-tree-id693 . -217) (undo-tree-id694 . -217) (undo-tree-id695 . -217) (undo-tree-id696 . -217) (undo-tree-id697 . -217) (undo-tree-id698 . -217) (undo-tree-id699 . -217) (undo-tree-id700 . -217) (undo-tree-id701 . -217) (undo-tree-id702 . -217) (undo-tree-id703 . -217) (undo-tree-id704 . -217) (undo-tree-id705 . -217) (undo-tree-id706 . -217) (undo-tree-id707 . -217) (undo-tree-id708 . -217) (undo-tree-id709 . -217) (undo-tree-id710 . -217) (undo-tree-id711 . -217) (undo-tree-id712 . -217) (undo-tree-id713 . -217) (undo-tree-id714 . -217) (undo-tree-id715 . -217) (undo-tree-id716 . -217) (undo-tree-id717 . -217) (undo-tree-id718 . -217) (undo-tree-id719 . -217) (undo-tree-id720 . -217) (undo-tree-id721 . -217) (undo-tree-id722 . -217) (undo-tree-id723 . -217) (undo-tree-id724 . -217) (undo-tree-id725 . -217) (undo-tree-id726 . -217) (undo-tree-id727 . -217) (undo-tree-id728 . -217) (undo-tree-id729 . -217) (undo-tree-id730 . -217) (undo-tree-id731 . -217) (undo-tree-id732 . -217) (undo-tree-id733 . -217) (undo-tree-id734 . -217) (undo-tree-id735 . -217) (undo-tree-id736 . -217) (undo-tree-id737 . -217) (undo-tree-id738 . -217) (undo-tree-id739 . -217) (undo-tree-id740 . -217) (undo-tree-id741 . -217) (undo-tree-id742 . -192) (undo-tree-id743 . -192) (undo-tree-id744 . -192) (undo-tree-id745 . -192) (undo-tree-id746 . -192) (undo-tree-id747 . -192) (undo-tree-id748 . -192) (undo-tree-id749 . -192) (undo-tree-id750 . -192) (undo-tree-id751 . -192) (undo-tree-id752 . -192) (undo-tree-id753 . -192) (undo-tree-id754 . -192) (undo-tree-id755 . -192) (undo-tree-id756 . -192) (undo-tree-id757 . -192) (undo-tree-id758 . -192) (undo-tree-id759 . -192) (undo-tree-id760 . -192) (undo-tree-id761 . -192) (undo-tree-id762 . -192) (undo-tree-id763 . -122) (undo-tree-id764 . -122) (undo-tree-id765 . -122) (undo-tree-id766 . -122) (undo-tree-id767 . -122) (undo-tree-id768 . -122) (undo-tree-id769 . -122) (undo-tree-id770 . -85) (undo-tree-id771 . -85) (undo-tree-id772 . -85) (undo-tree-id773 . -85) (undo-tree-id774 . -85) (undo-tree-id775 . -85) (undo-tree-id776 . -85) (undo-tree-id777 . -66) (undo-tree-id778 . -66) (undo-tree-id779 . -66) (undo-tree-id780 . -66) (undo-tree-id781 . -66) (undo-tree-id782 . -66) (undo-tree-id783 . -66) (undo-tree-id784 . -48) (undo-tree-id785 . -48) (undo-tree-id786 . -48) (undo-tree-id787 . -48) (undo-tree-id788 . -48) (undo-tree-id789 . -48) (undo-tree-id790 . -48) (undo-tree-id791 . -25) (undo-tree-id792 . -25) (undo-tree-id793 . -25) (undo-tree-id794 . -25) (undo-tree-id795 . -25) (undo-tree-id796 . -25) (undo-tree-id797 . -25) (undo-tree-id798 . -25) (undo-tree-id799 . -25) (undo-tree-id800 . -25) (undo-tree-id801 . -25) (undo-tree-id802 . -25) (undo-tree-id803 . -25) (undo-tree-id804 . -25) (undo-tree-id805 . -25) (undo-tree-id806 . -25) (undo-tree-id807 . -25) (undo-tree-id808 . -25) (undo-tree-id809 . -25) (undo-tree-id810 . -25) (undo-tree-id811 . -25) (undo-tree-id812 . -301) (undo-tree-id813 . -301) (undo-tree-id814 . -301) (undo-tree-id815 . -301) (undo-tree-id816 . -301) (undo-tree-id817 . -301) (undo-tree-id818 . -301) (t 25314 14545 117486 168000)) nil (25314 14561 718750 0) 0 nil] [nil nil ((#("
" 0 1 (fontified nil)) . 5329) (undo-tree-id23 . -1) (undo-tree-id24 . 1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (5010 . 5329) (#("		\"o\" 'counsel-find-file
		\"b\" 'counsel-ibuffer
		\"a\" 'org-agenda
		\"c\" 'org-capture
		\"c\" 'org-insert-structure-template
		;; \"f\" '(lambda () (interactive) (org-ql-search 'org-agenda-files))
		\"lb\" 'counsel-bookmark
		\"m\" '(lambda () (interactive) (find-file (expand-file-name \"~/.emacs.d/init.el\")))
		\"s\" 'swiper ))" 0 2 (fontified nil) 2 5 (face font-lock-string-face fontified nil) 5 27 (fontified nil) 27 30 (face font-lock-string-face fontified nil) 30 50 (fontified nil) 50 53 (face font-lock-string-face fontified nil) 53 66 (fontified nil) 66 68 (fontified nil) 68 71 (face font-lock-string-face fontified nil) 71 84 (fontified nil) 84 85 (fontified nil) 85 86 (fontified nil) 86 87 (rear-nonsticky t fontified nil) 87 90 (face font-lock-string-face fontified nil) 90 121 (fontified nil) 121 122 (fontified nil) 122 124 (fontified nil) 124 127 (face font-lock-comment-delimiter-face fontified nil) 127 192 (face font-lock-comment-face fontified nil) 192 194 (fontified nil) 194 198 (face font-lock-string-face fontified nil) 198 219 (fontified nil) 219 222 (face font-lock-string-face fontified nil) 222 224 (fontified nil) 224 225 (face (rainbow-delimiters-depth-3-face) fontified nil) 225 232 (fontified nil) 232 233 (face (rainbow-delimiters-depth-4-face) fontified nil) 233 234 (face (rainbow-delimiters-depth-4-face) fontified nil) 234 235 (fontified nil) 235 236 (face (rainbow-delimiters-depth-4-face) fontified nil) 236 247 (face font-lock-keyword-face fontified nil) 247 248 (face (rainbow-delimiters-depth-4-face) fontified nil) 248 249 (fontified nil) 249 250 (face (rainbow-delimiters-depth-4-face) fontified nil) 250 260 (fontified nil) 260 261 (face (rainbow-delimiters-depth-5-face) fontified nil) 261 278 (fontified nil) 278 298 (face font-lock-string-face fontified nil) 298 299 (face (rainbow-delimiters-depth-5-face) fontified nil) 299 300 (face (rainbow-delimiters-depth-4-face) fontified nil) 300 301 (face (rainbow-delimiters-depth-3-face) fontified nil) 301 304 (fontified nil) 304 307 (face font-lock-string-face fontified nil) 307 316 (fontified nil) 316 317 (face (rainbow-delimiters-depth-2-face) fontified nil) 317 318 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 5010) (undo-tree-id27 . -85) (undo-tree-id28 . -92) (undo-tree-id29 . -102) (undo-tree-id30 . -102) (undo-tree-id31 . -102) (undo-tree-id32 . -102) (undo-tree-id33 . -102) (undo-tree-id34 . -102) (undo-tree-id35 . -102) (undo-tree-id36 . -102) (undo-tree-id37 . -102) (undo-tree-id38 . -102) (undo-tree-id39 . -102) (undo-tree-id40 . -102) (undo-tree-id41 . -102) (undo-tree-id42 . -102) (undo-tree-id43 . 197) (undo-tree-id44 . -120) (undo-tree-id45 . -120) (undo-tree-id46 . -120) (undo-tree-id47 . -120) (undo-tree-id48 . -120) (undo-tree-id49 . -120) (undo-tree-id50 . -120) (undo-tree-id51 . -120) (undo-tree-id52 . -120) (undo-tree-id53 . -120) (undo-tree-id54 . -120) (undo-tree-id55 . -120) (undo-tree-id56 . -120) (undo-tree-id57 . -120) (undo-tree-id58 . -120) (undo-tree-id59 . -120) (undo-tree-id60 . -120) (undo-tree-id61 . -120) (undo-tree-id62 . -120) (undo-tree-id63 . -120) (undo-tree-id64 . -120) (undo-tree-id65 . -120) (undo-tree-id66 . -120) (undo-tree-id67 . -120) (undo-tree-id68 . -120) (undo-tree-id69 . -120) (undo-tree-id70 . -120) (undo-tree-id71 . -120) (undo-tree-id72 . -120) (undo-tree-id73 . -120) (undo-tree-id74 . -120) (undo-tree-id75 . -120) (undo-tree-id76 . -120) (undo-tree-id77 . -120) (undo-tree-id78 . -120) (undo-tree-id79 . -120) (undo-tree-id80 . -120) (undo-tree-id81 . -120) (undo-tree-id82 . -120) (undo-tree-id83 . -120) (undo-tree-id84 . -120) (undo-tree-id85 . -120) (undo-tree-id86 . -83) (undo-tree-id87 . -83) (undo-tree-id88 . -83) (undo-tree-id89 . -83) (undo-tree-id90 . -83) (undo-tree-id91 . -83) (undo-tree-id92 . -83) (undo-tree-id93 . -83) (undo-tree-id94 . -83) (undo-tree-id95 . -83) (undo-tree-id96 . -83) (undo-tree-id97 . -83) (undo-tree-id98 . -83) (undo-tree-id99 . -83) (undo-tree-id100 . -64) (undo-tree-id101 . -64) (undo-tree-id102 . -64) (undo-tree-id103 . -64) (undo-tree-id104 . -64) (undo-tree-id105 . -64) (undo-tree-id106 . -64) (undo-tree-id107 . -64) (undo-tree-id108 . -64) (undo-tree-id109 . -64) (undo-tree-id110 . -64) (undo-tree-id111 . -64) (undo-tree-id112 . -64) (undo-tree-id113 . -64) (undo-tree-id114 . -46) (undo-tree-id115 . -46) (undo-tree-id116 . -46) (undo-tree-id117 . -46) (undo-tree-id118 . -46) (undo-tree-id119 . -46) (undo-tree-id120 . -46) (undo-tree-id121 . -46) (undo-tree-id122 . -46) (undo-tree-id123 . -46) (undo-tree-id124 . -46) (undo-tree-id125 . -46) (undo-tree-id126 . -46) (undo-tree-id127 . -46) (undo-tree-id128 . -23) (undo-tree-id129 . -23) (undo-tree-id130 . -23) (undo-tree-id131 . -23) (undo-tree-id132 . -23) (undo-tree-id133 . -23) (undo-tree-id134 . -23) (undo-tree-id135 . -23) (undo-tree-id136 . -23) (undo-tree-id137 . -23) (undo-tree-id138 . -23) (undo-tree-id139 . -23) (undo-tree-id140 . -23) (undo-tree-id141 . -23) (undo-tree-id142 . -23) (undo-tree-id143 . -318) (undo-tree-id144 . -23) (undo-tree-id145 . -318) (undo-tree-id146 . -23) (undo-tree-id147 . -23) (undo-tree-id148 . -23) (undo-tree-id149 . -23) (undo-tree-id150 . -23) (undo-tree-id151 . -23) (undo-tree-id152 . -23) (undo-tree-id153 . -23) (undo-tree-id154 . -23) (undo-tree-id155 . -23) (undo-tree-id156 . -23) (undo-tree-id157 . -23) (undo-tree-id158 . -23) (undo-tree-id159 . -23) (undo-tree-id160 . -23) (undo-tree-id161 . -23) (undo-tree-id162 . -23) (undo-tree-id163 . -23) (undo-tree-id164 . -23) (undo-tree-id165 . -23) (undo-tree-id166 . -23) (undo-tree-id167 . -23) (undo-tree-id168 . -23) (undo-tree-id169 . -23) (undo-tree-id170 . -23) (undo-tree-id171 . -23) (undo-tree-id172 . -23) (undo-tree-id173 . -23) (undo-tree-id174 . -47) (undo-tree-id175 . -47) (undo-tree-id176 . -47) (undo-tree-id177 . -47) (undo-tree-id178 . -47) (undo-tree-id179 . -47) (undo-tree-id180 . -47) (undo-tree-id181 . -47) (undo-tree-id182 . -47) (undo-tree-id183 . -47) (undo-tree-id184 . -47) (undo-tree-id185 . -47) (undo-tree-id186 . -47) (undo-tree-id187 . -47) (undo-tree-id188 . -47) (undo-tree-id189 . -47) (undo-tree-id190 . -47) (undo-tree-id191 . -47) (undo-tree-id192 . -47) (undo-tree-id193 . -47) (undo-tree-id194 . -47) (undo-tree-id195 . -65) (undo-tree-id196 . -65) (undo-tree-id197 . -65) (undo-tree-id198 . -65) (undo-tree-id199 . -65) (undo-tree-id200 . -65) (undo-tree-id201 . -65) (undo-tree-id202 . -84) (undo-tree-id203 . -84) (undo-tree-id204 . -84) (undo-tree-id205 . -84) (undo-tree-id206 . -84) (undo-tree-id207 . -84) (undo-tree-id208 . -84) (undo-tree-id209 . -108) (undo-tree-id210 . -108) (undo-tree-id211 . -108) (undo-tree-id212 . -108) (undo-tree-id213 . -108) (undo-tree-id214 . -108) (undo-tree-id215 . -108) (undo-tree-id216 . -145) (undo-tree-id217 . -145) (undo-tree-id218 . -145) (undo-tree-id219 . -145) (undo-tree-id220 . -145) (undo-tree-id221 . -145) (undo-tree-id222 . -145) (undo-tree-id223 . -215) (undo-tree-id224 . -215) (undo-tree-id225 . -215) (undo-tree-id226 . -215) (undo-tree-id227 . -215) (undo-tree-id228 . -215) (undo-tree-id229 . -215) (undo-tree-id230 . -215) (undo-tree-id231 . -215) (undo-tree-id232 . -215) (undo-tree-id233 . -215) (undo-tree-id234 . -215) (undo-tree-id235 . -215) (undo-tree-id236 . -215) (undo-tree-id237 . -215) (undo-tree-id238 . -215) (undo-tree-id239 . -215) (undo-tree-id240 . -215) (undo-tree-id241 . -215) (undo-tree-id242 . -215) (undo-tree-id243 . -215) (undo-tree-id244 . -215) (undo-tree-id245 . -215) (undo-tree-id246 . -215) (undo-tree-id247 . -215) (undo-tree-id248 . -215) (undo-tree-id249 . -215) (undo-tree-id250 . -215) (undo-tree-id251 . -240) (undo-tree-id252 . -240) (undo-tree-id253 . -240) (undo-tree-id254 . -240) (undo-tree-id255 . -240) (undo-tree-id256 . -240) (undo-tree-id257 . -240) (undo-tree-id258 . -240) (undo-tree-id259 . -240) (undo-tree-id260 . -240) (undo-tree-id261 . -240) (undo-tree-id262 . -240) (undo-tree-id263 . -240) (undo-tree-id264 . -240) (undo-tree-id265 . -240) (undo-tree-id266 . -240) (undo-tree-id267 . -240) (undo-tree-id268 . -240) (undo-tree-id269 . -240) (undo-tree-id270 . -240) (undo-tree-id271 . -240) (undo-tree-id272 . -302) (undo-tree-id273 . -318) (undo-tree-id274 . -318) (undo-tree-id275 . -318) (undo-tree-id276 . -318) (undo-tree-id277 . -318) (undo-tree-id278 . -318) (undo-tree-id279 . -318) (undo-tree-id280 . -318) (undo-tree-id281 . -318) (undo-tree-id282 . -318) (undo-tree-id283 . -318) (undo-tree-id284 . -318) (undo-tree-id285 . -318) (undo-tree-id286 . -318) (undo-tree-id287 . -318) (undo-tree-id288 . -318) (undo-tree-id289 . -318) (undo-tree-id290 . -318) (undo-tree-id291 . -318) (undo-tree-id292 . -318) (undo-tree-id293 . -318) (undo-tree-id294 . -318) (undo-tree-id295 . -318) (undo-tree-id296 . -318) (undo-tree-id297 . -318) (undo-tree-id298 . -318) (undo-tree-id299 . -318) (undo-tree-id300 . -318) (undo-tree-id301 . -318) (undo-tree-id302 . -318) (undo-tree-id303 . -318) (undo-tree-id304 . -318) (undo-tree-id305 . -318) (undo-tree-id306 . -318) (undo-tree-id307 . -318) (undo-tree-id308 . -318) (undo-tree-id309 . -318) (undo-tree-id310 . -318) (undo-tree-id311 . -318) (undo-tree-id312 . -318) (undo-tree-id313 . -318) (undo-tree-id314 . -318) (undo-tree-id315 . -318) (undo-tree-id316 . -318) (undo-tree-id317 . -318) (undo-tree-id318 . -318) (undo-tree-id319 . -318) (undo-tree-id320 . -318) (undo-tree-id321 . -318) (undo-tree-id322 . -318) (undo-tree-id323 . -318) (undo-tree-id324 . -318) (undo-tree-id325 . -318) (undo-tree-id326 . -318) (undo-tree-id327 . -318) (undo-tree-id328 . -318) (undo-tree-id329 . -318) (undo-tree-id330 . -318) (undo-tree-id331 . -318) (undo-tree-id332 . -318) (undo-tree-id333 . -318) (undo-tree-id334 . -318) (undo-tree-id335 . -318) (undo-tree-id336 . -318) (undo-tree-id337 . -318) (undo-tree-id338 . -318) (undo-tree-id339 . -318) (undo-tree-id340 . -318) (undo-tree-id341 . -318) (undo-tree-id342 . -318) (undo-tree-id343 . -318) (undo-tree-id344 . -318) (undo-tree-id345 . -318) (undo-tree-id346 . -318) (undo-tree-id347 . -318) (undo-tree-id348 . -318) (undo-tree-id349 . -318) (undo-tree-id350 . -318) (undo-tree-id351 . -318) (undo-tree-id352 . -318) (undo-tree-id353 . -318) (undo-tree-id354 . -318) (undo-tree-id355 . -318) (undo-tree-id356 . -318) (undo-tree-id357 . -318) (undo-tree-id358 . -318) (undo-tree-id359 . -318) (undo-tree-id360 . -318) (undo-tree-id361 . -318) (t 25314 14545 117486 168000)) ((5010 . 5328) (#("		\"a\" 'org-agenda
		\"b\" 'counsel-ibuffer
		\"c\" 'org-capture
		\"c\" 'org-insert-structure-template
		\"lb\" 'counsel-bookmark
		\"m\" '(lambda () (interactive) (find-file (expand-file-name \"~/.emacs.d/init.el\")))
		\"o\" 'counsel-find-file
		\"s\" 'swiper ))
		;; \"f\" '(lambda () (interactive) (org-ql-search 'org-agenda-files))
" 0 2 (fontified t) 2 5 (face font-lock-string-face fontified t) 5 17 (fontified t) 17 18 (fontified t) 18 20 (fontified t) 20 23 (face font-lock-string-face fontified t) 23 40 (fontified t) 40 41 (fontified t) 41 43 (fontified t) 43 46 (face font-lock-string-face fontified t) 46 59 (fontified t) 59 60 (fontified t) 60 61 (fontified t) 61 62 (rear-nonsticky t fontified t) 62 65 (face font-lock-string-face fontified t) 65 96 (fontified t) 96 97 (fontified t) 97 99 (fontified t) 99 103 (face font-lock-string-face fontified t) 103 121 (fontified t) 121 122 (fontified t) 122 124 (fontified t) 124 127 (face font-lock-string-face fontified t) 127 129 (fontified t) 129 130 (face (rainbow-delimiters-depth-3-face) fontified t) 130 137 (fontified t) 137 138 (face (rainbow-delimiters-depth-4-face) fontified t) 138 139 (face (rainbow-delimiters-depth-4-face) fontified t) 139 140 (fontified t) 140 141 (face (rainbow-delimiters-depth-4-face) fontified t) 141 152 (face font-lock-keyword-face fontified t) 152 153 (face (rainbow-delimiters-depth-4-face) fontified t) 153 154 (fontified t) 154 155 (face (rainbow-delimiters-depth-4-face) fontified t) 155 165 (fontified t) 165 166 (face (rainbow-delimiters-depth-5-face) fontified t) 166 183 (fontified t) 183 203 (face font-lock-string-face fontified t) 203 204 (face (rainbow-delimiters-depth-5-face) fontified t) 204 205 (face (rainbow-delimiters-depth-4-face) fontified t) 205 206 (face (rainbow-delimiters-depth-3-face) fontified t) 206 207 (fontified t) 207 209 (fontified t) 209 212 (face font-lock-string-face fontified t) 212 231 (fontified t) 231 232 (fontified t) 232 234 (fontified t) 234 237 (face font-lock-string-face fontified t) 237 246 (fontified t) 246 247 (face (rainbow-delimiters-depth-2-face) fontified t) 247 248 (face (rainbow-delimiters-depth-1-face) fontified t) 248 249 (fontified t) 249 251 (fontified t) 251 254 (face font-lock-comment-delimiter-face fontified t) 254 318 (face font-lock-comment-face fontified t) 318 319 (face font-lock-comment-face fontified t)) . 5010) (5329 . 5330)) (25314 14552 943351 0) 0 nil])
([nil nil ((6380 . 6385) (6379 . 6381) (#("(" 0 1 (fontified nil)) . -6379) (6379 . 6380) (6378 . 6380) (#("'" 0 1 (fontified nil)) . -6378) (6378 . 6379) (6375 . 6378) (6360 . 6375) (#("'" 0 1 (fontified t)) . -6360) (undo-tree-id847 . -1) 6361 (6353 . 6360) (#("u" 0 1 (face (font-lock-constant-face) fontified t)) . -6353) (undo-tree-id848 . -1) 6354 (6347 . 6354) (6346 . 6348) (#("'" 0 1 (fontified nil)) . -6346) (6342 . 6347) (#("y" 0 1 (fontified t)) . -6342) (undo-tree-id849 . -1) (#("i" 0 1 (fontified t)) . -6343) (undo-tree-id850 . -1) (#("s" 0 1 (fontified t)) . -6344) (undo-tree-id851 . -1) (#("t" 0 1 (fontified t)) . -6345) (undo-tree-id852 . -1) (#(" " 0 1 (fontified t)) . -6346) (undo-tree-id853 . -1) (#("'" 0 1 (fontified nil)) . -6347) (undo-tree-id854 . -1) (#("'" 0 1 (fontified t)) . 6348) (6347 . 6349) (#("'" 0 1 (fontified nil)) . -6347) (6334 . 6348) (#("s" 0 1 (fontified t)) . -6334) (undo-tree-id855 . -1) (#("e" 0 1 (fontified t)) . -6335) (undo-tree-id856 . -1) (#("t" 0 1 (fontified t)) . -6336) (undo-tree-id857 . -1) (#("q" 0 1 (face font-lock-keyword-face fontified t)) . -6337) (undo-tree-id858 . -1) (#(" " 0 1 (fontified t)) . -6338) (undo-tree-id859 . -1) 6339 (6334 . 6339) (#("e" 0 1 (fontified t)) . -6334) (undo-tree-id860 . -1) 6335 (6334 . 6335) (6333 . 6335) (#("(" 0 1 (fontified nil)) . -6333) (6333 . 6334) (6328 . 6333) (t 25314 14561 729929 547000) 6327) nil (25314 14722 910091 0) 0 nil])
nil
([nil nil ((6384 . 6386) (#("\"" 0 1 (fontified nil)) . -6384) (6383 . 6385) (6381 . 6382) (6380 . 6382) (#("\"" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -6380) (6380 . 6381) (#(" " 0 1 (fontified t)) . -6380) (undo-tree-id845 . -1) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -6381) (undo-tree-id846 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . 6382) (6381 . 6383) (#("\"" 0 1 (fontified nil)) . -6381) (6380 . 6382)) nil (25314 14722 910066 0) 0 nil])
([nil nil ((#("	   " 0 4 (fontified t)) . -6387) (undo-tree-id844 . -4) 6391 (6386 . 6391) 6384) nil (25314 14722 910061 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 6388 . 6389) (#("
" 0 1 (fontified nil)) . -6551) (6387 . 6552)) nil (25314 14722 910058 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6387) (undo-tree-id843 . -1)) nil (25314 14722 910057 0) 0 nil])
([nil nil ((6381 . 6382) (#("t" 0 1 (face font-lock-string-face fontified t)) . 6381)) nil (25314 14722 910055 0) 0 nil])
([nil nil ((#("\"i\" \"Inbox\" entry (file \"~/Personal Library/Org/Desktop.org\")
	    	  \"* INBOX %^{Inbox item}\\n:PROPERTIES:\\n:CREATED :%U\\n:END:\\n %^{Additional information}\"" 0 3 (face font-lock-string-face fontified t) 3 4 (fontified t) 4 11 (face font-lock-string-face fontified t) 11 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-6-face) fontified t) 19 24 (fontified t) 24 60 (face font-lock-string-face fontified t) 60 61 (face (rainbow-delimiters-depth-6-face) fontified t) 61 62 (fontified t) 62 70 (fontified t) 70 158 (face font-lock-string-face fontified t)) . 6391) (undo-tree-id842 . -1) 6392) nil (25314 14722 910054 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 6541 . 6542) (nil fontified nil 6384 . 6542) (6384 . 6542) 6386 (#("\"\"" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t)) . 6384) (undo-tree-id838 . -2) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) 6386) nil (25314 14722 910051 0) 0 nil])
([nil nil ((#(" \"i\" \"Inbox\" entry (file \"~/Personal Library/Org/Desktop.org\")" 0 1 (fontified t) 1 4 (face font-lock-string-face fontified t) 4 5 (fontified t) 5 12 (face font-lock-string-face fontified t) 12 19 (fontified t) 19 20 (face (rainbow-delimiters-depth-4-face) fontified t) 20 25 (fontified t) 25 61 (face font-lock-string-face fontified t) 61 62 (face (rainbow-delimiters-depth-4-face) fontified t)) . 6383) (undo-tree-id827 . -61) (undo-tree-id828 . -61) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -61) (undo-tree-id832 . -1) (undo-tree-id833 . -61) (undo-tree-id834 . 1) (undo-tree-id835 . -62) (undo-tree-id836 . 43) (undo-tree-id837 . -20) 6444) nil (25314 14722 910044 0) 0 nil])
([nil nil ((6383 . 6384) (#("	    	  " 0 8 (fontified nil)) . 6383) (undo-tree-id825 . 8) (#("
" 0 1 (fontified t)) . -6383) (undo-tree-id826 . 1) 6382) nil (25314 14722 910032 0) 0 nil])
([nil nil ((#("	'(()
" 0 1 (fontified t rear-nonsticky t) 1 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-4-face) fontified t) 3 4 (face (rainbow-delimiters-depth-5-face) fontified t) 4 5 (face (rainbow-delimiters-depth-5-face) fontified t) 5 6 (fontified t)) . 6473) (undo-tree-id819 . 1) (undo-tree-id820 . -4) (undo-tree-id821 . 2) (undo-tree-id822 . -5) (undo-tree-id823 . 3) (undo-tree-id824 . -4) 6477) nil (25314 14722 910028 0) 0 nil])
([nil nil ((#("'" 0 1 (face (font-lock-warning-face) help-echo "Easy to misread; consider moving the element to the next line" fontified t)) . 6478)) nil (25314 15117 298139 0) 0 nil])
([nil nil ((6478 . 6481)) ((#("
	 " 0 1 (fontified t) 1 3 (fontified t)) . 6478) (undo-tree-id975 . -3) (undo-tree-id976 . -3) (undo-tree-id977 . -3) (undo-tree-id978 . -2) (undo-tree-id979 . -2) (undo-tree-id980 . -2) (undo-tree-id981 . -2) (undo-tree-id982 . -2) (undo-tree-id983 . -2) (undo-tree-id984 . -2) (undo-tree-id985 . -2) (undo-tree-id986 . -2) (undo-tree-id987 . -2) (undo-tree-id988 . -2) (undo-tree-id989 . -2) (undo-tree-id990 . -2) (undo-tree-id991 . -2) (undo-tree-id992 . -2) (undo-tree-id993 . -2) (undo-tree-id994 . -2) (undo-tree-id995 . -2) (undo-tree-id996 . -2) (undo-tree-id997 . -2) (undo-tree-id998 . -2) (undo-tree-id999 . -3) (undo-tree-id1000 . -3) (undo-tree-id1001 . -3) (undo-tree-id1002 . -3) (undo-tree-id1003 . -3) (undo-tree-id1004 . -3) (undo-tree-id1005 . -3) (undo-tree-id1006 . -3) (undo-tree-id1007 . -3) (undo-tree-id1008 . -3) (undo-tree-id1009 . -3) (undo-tree-id1010 . -3) (undo-tree-id1011 . -3) (undo-tree-id1012 . -3) (undo-tree-id1013 . -3) (undo-tree-id1014 . -3) (undo-tree-id1015 . -3) (undo-tree-id1016 . -3) (undo-tree-id1017 . -3) (undo-tree-id1018 . -3) (undo-tree-id1019 . -3) (undo-tree-id1020 . -3) (undo-tree-id1021 . -3) (undo-tree-id1022 . -3) (undo-tree-id1023 . -3) (undo-tree-id1024 . -3) (undo-tree-id1025 . -3) (undo-tree-id1026 . -3) (undo-tree-id1027 . -3) (undo-tree-id1028 . -3) (undo-tree-id1029 . -3) (undo-tree-id1030 . -3) (undo-tree-id1031 . -3) (undo-tree-id1032 . -3) (undo-tree-id1033 . -3) (undo-tree-id1034 . -3) (undo-tree-id1035 . -3) (undo-tree-id1036 . -3) (undo-tree-id1037 . -3) (undo-tree-id1038 . -3) (undo-tree-id1039 . -3) (undo-tree-id1040 . -3) (undo-tree-id1041 . -3) (undo-tree-id1042 . -3) (undo-tree-id1043 . -3) (undo-tree-id1044 . -3) (undo-tree-id1045 . -3) (undo-tree-id1046 . -3) (undo-tree-id1047 . -3) (undo-tree-id1048 . -3) (undo-tree-id1049 . -3) (undo-tree-id1050 . -3) (undo-tree-id1051 . -3) (undo-tree-id1052 . -3) (undo-tree-id1053 . -3) (undo-tree-id1054 . -3) (undo-tree-id1055 . -3) (undo-tree-id1056 . -3) (undo-tree-id1057 . -3) (undo-tree-id1058 . -3) (undo-tree-id1059 . -3) (undo-tree-id1060 . -3) (undo-tree-id1061 . -3) (undo-tree-id1062 . -3) (undo-tree-id1063 . -3) (undo-tree-id1064 . -3) (undo-tree-id1065 . -3) (undo-tree-id1066 . -3) (undo-tree-id1067 . -3) (undo-tree-id1068 . -3) (undo-tree-id1069 . -3) (undo-tree-id1070 . -3) (undo-tree-id1071 . -3) (undo-tree-id1072 . -3) (undo-tree-id1073 . -3) (undo-tree-id1074 . -3) (undo-tree-id1075 . -3) (undo-tree-id1076 . -3) (undo-tree-id1077 . -3) (undo-tree-id1078 . -3) (undo-tree-id1079 . -3) (undo-tree-id1080 . -3) (undo-tree-id1081 . -3) (undo-tree-id1082 . -3) (undo-tree-id1083 . -3) (undo-tree-id1084 . -3) (undo-tree-id1085 . -3) (undo-tree-id1086 . -3) (undo-tree-id1087 . -3) (undo-tree-id1088 . -3) (undo-tree-id1089 . -3) (undo-tree-id1090 . -3) (undo-tree-id1091 . -3) (undo-tree-id1092 . -3) (undo-tree-id1093 . -3) (undo-tree-id1094 . -3) (undo-tree-id1095 . -3) (undo-tree-id1096 . -3)) (25314 15118 697753 0) 0 nil])
([nil nil ((#("	   " 0 4 (fontified nil)) . 6472) (#("
" 0 1 (fontified t)) . -6472) 6380) nil (25314 15125 922722 0) 0 nil] [nil nil ((#("	   " 0 4 (fontified nil)) . 6472) (#("
" 0 1 (fontified t)) . -6472) 6377) ((6472 . 6473) (6472 . 6476)) (25314 15115 396319 0) 0 nil])
([nil nil ((6337 . 6338) (#(" " 0 1 (fontified t)) . -6337) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) 6338) nil (25314 15125 922719 0) 0 nil])
([nil nil ((#("%^{Inbox item}" 0 14 (face font-lock-string-face fontified t)) . 6393) (undo-tree-id890 . -13) (undo-tree-id891 . -13) (undo-tree-id892 . -13) (undo-tree-id893 . -13) 6406 (t 25314 14722 921888 689000)) ((6393 . 6407)) (25314 15115 135076 0) 0 nil])
([nil nil ((6340 . 6341) (#(" " 0 1 (fontified t)) . -6340) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) 6341) nil (25314 15125 922683 0) 0 nil])
([nil nil ((#("%^{Additional information" 0 25 (face font-lock-string-face fontified t)) . 6431) (undo-tree-id886 . -24) (undo-tree-id887 . -24) (undo-tree-id888 . -24) (undo-tree-id889 . -24) 6455) ((6431 . 6456)) (25314 15115 100595 0) 0 nil])
([nil nil ((5073 . 5074) (#("c" 0 1 (fontified t face font-lock-string-face)) . 5073) (t 25314 15125 933480 491000)) nil (25314 15184 538109 0) 0 nil])
([nil nil ((#("}" 0 1 (face font-lock-string-face fontified t)) . 6431) (undo-tree-id885 . 1)) ((6431 . 6432)) (25314 15114 682843 0) 0 nil])
([nil nil ((6383 . 6385) (t 25314 15184 587958 85000)) nil (25314 15229 347943 0) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . 6430) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id866 . -1) (undo-tree-id868 . -1) (undo-tree-id870 . -1) (undo-tree-id872 . -1) (undo-tree-id874 . -1) (undo-tree-id876 . -1) (undo-tree-id878 . -1) (undo-tree-id880 . -1) (undo-tree-id882 . -1) (undo-tree-id884 . -1)) ((6430 . 6431)) (25314 15114 510242 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 492 . 493) (nil fontified nil 465 . 493) (465 . 493) (464 . 465) (t 25314 15229 359074 451000) 444) nil (25322 14746 201518 0) 0 nil])
([nil nil ((6337 . 6338) (#(" " 0 1 (fontified t)) . -6337) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) 6338 (t 25314 15098 243177 182000)) ((6337 . 6338) (#("-" 0 1 (fontified t)) . 6337) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1)) (25314 15114 331946 0) 0 nil])
([nil nil ((#("(setq make-backup-files nil)
" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) rear-nonsticky t fontified t) 28 29 (fontified t)) . 465) (undo-tree-id0 . 2) (undo-tree-id1 . -28) (undo-tree-id2 . 29) (undo-tree-id3 . -1) (undo-tree-id4 . 1) (undo-tree-id5 . -27) (undo-tree-id6 . -27) (undo-tree-id7 . -27) (undo-tree-id8 . -27) (undo-tree-id9 . -27) (undo-tree-id10 . -27) (undo-tree-id11 . -27) (undo-tree-id12 . -27) (undo-tree-id13 . -27) (undo-tree-id14 . -27) (undo-tree-id15 . -27) (undo-tree-id16 . -27) (undo-tree-id17 . -27) (undo-tree-id18 . -27) (undo-tree-id19 . -27) (undo-tree-id20 . -27) (undo-tree-id21 . -27) (undo-tree-id22 . -27) (undo-tree-id23 . -27) (undo-tree-id24 . -27) (undo-tree-id25 . -27) (undo-tree-id26 . -27) (undo-tree-id27 . -27) (undo-tree-id28 . -27) (undo-tree-id29 . -27) (undo-tree-id30 . -27) (undo-tree-id31 . -27) (undo-tree-id32 . -27) (undo-tree-id33 . -27) (undo-tree-id34 . -27) (undo-tree-id35 . -27) (undo-tree-id36 . -27) (undo-tree-id37 . -27) (undo-tree-id38 . -27) (undo-tree-id39 . -27) (undo-tree-id40 . -27) (undo-tree-id41 . -27) (undo-tree-id42 . -27) (undo-tree-id43 . -27) (undo-tree-id44 . -27) (undo-tree-id45 . -27) (undo-tree-id46 . -27) (undo-tree-id47 . -27) (undo-tree-id48 . -27) (undo-tree-id49 . -27) 492 (t 25322 14746 288864 904000)) nil (25322 14747 428726 0) 0 nil])
([nil nil ((6340 . 6341) (#(" " 0 1 (fontified t)) . -6340) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) 6341) ((6340 . 6341) (#("-" 0 1 (fontified t)) . 6340) (t 25314 15109 397848 221000)) (25314 15109 386462 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 491 . 492) (nil fontified nil 465 . 492) (465 . 492) (464 . 465) (t 25322 14747 440137 222000) 436) nil (25324 5469 645932 0) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -512) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 513 (502 . 513) (#("a" 0 1 (fontified t face font-lock-comment-face)) . -502) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) 503 (494 . 503) (#(" " 0 1 (fontified t face font-lock-comment-delimiter-face)) . -494) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) 495 (493 . 495) (492 . 493)) nil (25324 5469 645921 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 5156 . 5157) (#("
" 0 1 (fontified nil)) . -5191) (5154 . 5192) 5136 (t 25324 5469 700360 655000)) nil (25330 8822 108419 0) 0 nil])
([nil nil ((5158 . 5159) (#("t" 0 1 (face font-lock-string-face fontified t)) . 5158)) nil (25330 8822 108418 0) 0 nil])
([nil nil ((5166 . 5172) (#("insert" 0 6 (fontified t)) . 5166) (undo-tree-id2 . -6) (undo-tree-id3 . -6) (undo-tree-id4 . -6) (undo-tree-id5 . -6) (undo-tree-id6 . -6) (undo-tree-id7 . -6) (undo-tree-id8 . -6) (undo-tree-id9 . -6) (undo-tree-id10 . -6) (undo-tree-id11 . -6) (undo-tree-id12 . -6) (undo-tree-id13 . -6) (undo-tree-id14 . -6) (undo-tree-id15 . -6) (undo-tree-id16 . -6) (undo-tree-id17 . -6) (undo-tree-id18 . -6) (undo-tree-id19 . -6) (undo-tree-id20 . -6) (undo-tree-id21 . -6) (undo-tree-id22 . -6)) nil (25330 8822 108416 0) 0 nil])
([nil nil ((5173 . 5177) (#("structure" 0 9 (fontified t)) . 5173)) nil (25330 13494 626474 0) 0 nil])
([nil nil ((5178 . 5184) (#("template" 0 8 (fontified t)) . 5178)) ((5178 . 5186) (#("action" 0 6 (fontified t)) . 5178)) (25330 13496 20700 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 7945 . 7946) (7941 . 8040) (t 25330 13498 65572 320000)) ((#("	    (org-ql-block '(and (todo \"TODO\")
				(tags \"study\"))
			    ((org-ql-block-header \"Study\")))
" 0 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil rear-nonsticky nil) 5 6 (fontified nil face (rainbow-delimiters-depth-5-face)) 6 13 (fontified nil) 13 20 (fontified nil) 20 21 (fontified nil face (rainbow-delimiters-depth-6-face)) 21 25 (fontified nil) 25 26 (fontified nil face (rainbow-delimiters-depth-7-face)) 26 30 (fontified nil) 30 31 (fontified nil) 31 32 (fontified nil face font-lock-string-face) 32 33 (fontified nil face font-lock-string-face) 33 34 (fontified nil face font-lock-string-face) 34 35 (fontified nil face font-lock-string-face) 35 36 (fontified nil face font-lock-string-face) 36 37 (fontified nil face font-lock-string-face) 37 38 (fontified nil face (rainbow-delimiters-depth-7-face)) 38 39 (fontified nil) 39 43 (fontified t) 43 44 (fontified t face (rainbow-delimiters-depth-7-face)) 44 49 (fontified t) 49 56 (fontified t face font-lock-string-face) 56 57 (fontified t face (rainbow-delimiters-depth-7-face)) 57 58 (fontified t face (rainbow-delimiters-depth-6-face)) 58 59 (fontified t) 59 66 (fontified t) 66 67 (fontified t face (rainbow-delimiters-depth-6-face)) 67 68 (fontified t face (rainbow-delimiters-depth-7-face)) 68 88 (fontified t) 88 89 (fontified t face font-lock-string-face) 89 94 (fontified t face font-lock-string-face) 94 95 (fontified t face font-lock-string-face) 95 96 (fontified t face (rainbow-delimiters-depth-7-face)) 96 97 (fontified t face (rainbow-delimiters-depth-6-face)) 97 98 (fontified t face (rainbow-delimiters-depth-5-face)) 98 99 (fontified t)) . 7941) (undo-tree-id1493 . -98) (undo-tree-id1495 . -99) (undo-tree-id1497 . -97) (undo-tree-id1499 . -26) (undo-tree-id1501 . -26) (undo-tree-id1503 . -26) (undo-tree-id1505 . -36) (undo-tree-id1507 . -36) (undo-tree-id1509 . -36) (undo-tree-id1511 . -36) (undo-tree-id1513 . -36) (undo-tree-id1515 . -36) (undo-tree-id1517 . -36) (undo-tree-id1519 . -36) (undo-tree-id1521 . -36) (undo-tree-id1523 . -36) (undo-tree-id1525 . -89) (undo-tree-id1527 . -89) (undo-tree-id1529 . -89) (undo-tree-id1531 . -89) (undo-tree-id1533 . -89) (undo-tree-id1535 . -89) (undo-tree-id1537 . -89) (nil rear-nonsticky t 7945 . 7946)) (25330 13520 872525 0) 0 nil] [nil nil ((nil rear-nonsticky nil 7907 . 7908) (#("
" 0 1 (fontified nil)) . -8001) (7902 . 8002) 7877 (t 25330 8822 150772 446000)) ((#("
	    (org-ql-block '(and (todo \"TODO\")
				(tags \"study\"))
			    ((org-ql-block-header \"Study\")))
" 0 1 (fontified t) 1 5 (fontified nil) 5 6 (fontified nil rear-nonsticky nil) 6 7 (fontified nil face (rainbow-delimiters-depth-5-face)) 7 14 (fontified nil) 14 21 (fontified nil) 21 22 (fontified nil face (rainbow-delimiters-depth-6-face)) 22 26 (fontified nil) 26 27 (fontified nil face (rainbow-delimiters-depth-7-face)) 27 32 (fontified nil) 32 33 (fontified nil face font-lock-string-face) 33 37 (fontified nil face font-lock-string-face) 37 38 (fontified nil face font-lock-string-face) 38 39 (fontified nil face (rainbow-delimiters-depth-7-face)) 39 40 (fontified nil) 40 44 (fontified t) 44 45 (fontified t face (rainbow-delimiters-depth-7-face)) 45 50 (fontified t) 50 57 (fontified t face font-lock-string-face) 57 58 (fontified t face (rainbow-delimiters-depth-7-face)) 58 59 (fontified t face (rainbow-delimiters-depth-6-face)) 59 60 (fontified t) 60 67 (fontified nil) 67 68 (fontified nil face (rainbow-delimiters-depth-6-face)) 68 69 (fontified nil face (rainbow-delimiters-depth-7-face)) 69 89 (fontified nil) 89 96 (fontified nil face font-lock-string-face) 96 97 (fontified nil face (rainbow-delimiters-depth-7-face)) 97 98 (fontified nil face (rainbow-delimiters-depth-6-face)) 98 99 (fontified nil face (rainbow-delimiters-depth-5-face)) 99 100 (fontified nil)) . 7902) (undo-tree-id0 . -99) (undo-tree-id1 . -1) (undo-tree-id2 . -99) (undo-tree-id3 . 63) (undo-tree-id4 . -33) (undo-tree-id5 . -33) (undo-tree-id6 . -33) (undo-tree-id7 . -33) (undo-tree-id8 . -1) (undo-tree-id9 . -33) (undo-tree-id10 . -33) (undo-tree-id11 . -33) (undo-tree-id12 . -33) (undo-tree-id13 . -33) (undo-tree-id14 . -33) (undo-tree-id15 . -33) (undo-tree-id16 . -33) (undo-tree-id17 . -33) (undo-tree-id18 . -33) (undo-tree-id19 . -33) (undo-tree-id20 . -33) (undo-tree-id21 . -33) (undo-tree-id22 . -33) (undo-tree-id23 . -33) (8001 . 8002) (nil rear-nonsticky t 7907 . 7908)) (25330 9340 638302 0) 0 nil])
([nil nil ((8030 . 8039) (#("Study" 0 5 (face font-lock-string-face fontified t)) . 8030)) ((8030 . 8035) (#("Important" 0 9 (fontified t face font-lock-string-face)) . 8030)) (25330 13521 530262 0) 0 nil])
([nil nil ((7935 . 7940) (#("TODO" 0 4 (fontified t face font-lock-string-face)) . 7935)) ((7935 . 7939) (#("INBOX" 0 5 (fontified t face font-lock-string-face)) . 7935)) (25330 9340 638198 0) 0 nil])
([nil nil ((7973 . 7974) (#("TODO" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t)) . 7973)) ((7973 . 7977) (#("A" 0 1 (fontified t face font-lock-string-face)) . 7973)) (25330 13522 217976 0) 0 nil])
nil
([nil nil ((7967 . 7975) (#("todo" 0 4 (fontified t)) . 7967)) ((7967 . 7971) (#("priority" 0 8 (fontified t)) . 7967) (undo-tree-id1335 . -3) (undo-tree-id1337 . -3) (undo-tree-id1339 . -3) (undo-tree-id1341 . -3) (undo-tree-id1343 . -3) (undo-tree-id1345 . -3) (undo-tree-id1347 . -3)) (25330 13522 441914 0) 0 nil])
([nil nil ((#("and " 0 4 (fontified t)) . 7962)) ((7962 . 7966)) (25330 13522 855126 0) 0 nil] [nil nil ((#("				(tags \"study\"))
" 0 4 (fontified t) 4 5 (fontified t face (rainbow-delimiters-depth-7-face)) 5 10 (fontified t) 10 17 (fontified t face font-lock-string-face) 17 18 (fontified t face (rainbow-delimiters-depth-7-face)) 18 19 (fontified t face (rainbow-delimiters-depth-6-face)) 19 20 (fontified t)) . 7981) (undo-tree-id28 . -11) (undo-tree-id29 . -12) (undo-tree-id30 . -12) (undo-tree-id31 . -12) (undo-tree-id32 . -12) (undo-tree-id33 . -12) (undo-tree-id34 . -12) (undo-tree-id35 . -12) (undo-tree-id36 . -12) (undo-tree-id37 . -12) (undo-tree-id38 . -12) (undo-tree-id39 . -12) (undo-tree-id40 . -12) (undo-tree-id41 . -12) (undo-tree-id42 . -12) (undo-tree-id43 . -12) (undo-tree-id44 . -12) (undo-tree-id45 . -12) (undo-tree-id46 . -12) (undo-tree-id47 . -12) (undo-tree-id48 . -12) (undo-tree-id49 . -12) (undo-tree-id50 . -12) (undo-tree-id51 . -12) (undo-tree-id52 . -12) (undo-tree-id53 . -12) (undo-tree-id54 . -12) (undo-tree-id55 . -12) (undo-tree-id56 . -12) (undo-tree-id57 . -12) (undo-tree-id58 . -12) (undo-tree-id59 . -12) (undo-tree-id60 . -12) (undo-tree-id61 . -12) (undo-tree-id62 . -12) (undo-tree-id63 . -12) (undo-tree-id64 . -12) (undo-tree-id65 . -12) (undo-tree-id66 . -12) (undo-tree-id67 . -12) (undo-tree-id68 . -12) (undo-tree-id69 . -12) (undo-tree-id70 . -12) (undo-tree-id71 . -12) (undo-tree-id72 . -12) (undo-tree-id73 . -12) (undo-tree-id74 . -12) (undo-tree-id75 . -12) (undo-tree-id76 . -12) (undo-tree-id77 . -12) (undo-tree-id78 . -12) (undo-tree-id79 . -12) (undo-tree-id80 . -12) (undo-tree-id81 . -12) (undo-tree-id82 . -12) (undo-tree-id83 . -12) (undo-tree-id84 . -12) (undo-tree-id85 . -12) (undo-tree-id86 . -12) (undo-tree-id87 . -12) (undo-tree-id88 . -12) (undo-tree-id89 . -12) (undo-tree-id90 . -12) (undo-tree-id91 . -12) (undo-tree-id92 . -12) (undo-tree-id93 . -12) (undo-tree-id94 . -12) (undo-tree-id95 . -12) (undo-tree-id96 . -12) (undo-tree-id97 . -12) (undo-tree-id98 . -12) (undo-tree-id99 . -11) (undo-tree-id100 . -11) (undo-tree-id101 . -11) (undo-tree-id102 . -11) (undo-tree-id103 . -11) (undo-tree-id104 . -11) (undo-tree-id105 . -11) (undo-tree-id106 . -11) (undo-tree-id107 . -11) (undo-tree-id108 . -11) (undo-tree-id109 . -11) (undo-tree-id110 . -11) (undo-tree-id111 . -11) (undo-tree-id112 . -11) (undo-tree-id113 . -11) (undo-tree-id114 . -11) (undo-tree-id115 . -11) (undo-tree-id116 . -11) (undo-tree-id117 . -11) (undo-tree-id118 . -11) (undo-tree-id119 . -11) (undo-tree-id120 . -11) (undo-tree-id121 . -11) (undo-tree-id122 . -11) (undo-tree-id123 . -11) (undo-tree-id124 . -11) (undo-tree-id125 . -11) (undo-tree-id126 . -11) (undo-tree-id127 . -11) (undo-tree-id128 . -11) (undo-tree-id129 . -11) (undo-tree-id130 . -11) (undo-tree-id131 . -11) (undo-tree-id132 . -11) (undo-tree-id133 . -11) (undo-tree-id134 . -11) (undo-tree-id135 . -11) (undo-tree-id136 . -11) (undo-tree-id137 . -11) (undo-tree-id138 . -11) (undo-tree-id139 . -11) (undo-tree-id140 . -11) (undo-tree-id141 . -11) (undo-tree-id142 . -11) (undo-tree-id143 . -11) (undo-tree-id144 . -11) (undo-tree-id145 . -11) (undo-tree-id146 . -11) (undo-tree-id147 . -11) (undo-tree-id148 . -11) (undo-tree-id149 . -11) (undo-tree-id150 . -11) (undo-tree-id151 . -11) (undo-tree-id152 . -11) (undo-tree-id153 . -11) (undo-tree-id154 . -11) (undo-tree-id155 . -11) (undo-tree-id156 . -11) (undo-tree-id157 . -11) (undo-tree-id158 . -11) (undo-tree-id159 . -11) (undo-tree-id160 . -11) (undo-tree-id161 . -11) (undo-tree-id162 . -11) (undo-tree-id163 . -11) (undo-tree-id164 . -11) (undo-tree-id165 . -11) (undo-tree-id166 . -11) (undo-tree-id167 . -11) (undo-tree-id168 . -11) (undo-tree-id169 . -11) (undo-tree-id170 . -11) (undo-tree-id171 . -11) (undo-tree-id172 . -11) (undo-tree-id173 . -11) (undo-tree-id174 . -11) (undo-tree-id175 . -11) (undo-tree-id176 . -11) (undo-tree-id177 . -11) (undo-tree-id178 . -11) (undo-tree-id179 . -11) (undo-tree-id180 . -11) (undo-tree-id181 . -11) (undo-tree-id182 . -11) (undo-tree-id183 . -11) (undo-tree-id184 . -11) (undo-tree-id185 . -11) (undo-tree-id186 . -11) (undo-tree-id187 . -11) (undo-tree-id188 . -11) (undo-tree-id189 . -11) (undo-tree-id190 . -11) (undo-tree-id191 . -11) (undo-tree-id192 . -11) (undo-tree-id193 . -11) (undo-tree-id194 . -11) (undo-tree-id195 . -11) (undo-tree-id196 . -11) (undo-tree-id197 . -11) 7992 (t 25330 13249 843750 37000)) ((7981 . 8001)) (25330 13262 908844 0) 0 nil])
([nil nil ((#("(tags \"study\")" 0 1 (face (rainbow-delimiters-depth-7-face) fontified t) 1 6 (fontified t) 6 13 (face font-lock-string-face fontified t) 13 14 (face (rainbow-delimiters-depth-7-face) fontified t)) . 7981)) ((7981 . 7995)) (25330 13523 133806 0) 0 nil])
nil
([nil nil ((#("				" 0 4 (fontified nil)) . 7976) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -4) (undo-tree-id11 . -4) (undo-tree-id12 . -4) (undo-tree-id13 . -4) (undo-tree-id14 . -4) (undo-tree-id15 . -4) (#("
" 0 1 (fontified t)) . 7976) (undo-tree-id16 . -1)) ((7976 . 7977) (7976 . 7980)) (25330 13523 394678 0) 0 nil])
([nil nil ((7962 . 7966)) ((#("and " 0 4 (fontified t)) . 7962)) (25330 13523 948186 0) 0 nil] [nil nil ((7972 . 7975) (t 25330 13275 335382 272000)) ((#(">= " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 7972)) (25330 13347 324379 0) 0 nil])
([nil nil ((7995 . 7999) (7994 . 7996) (#("\"" 0 1 (fontified nil)) . 7994) (7989 . 7995) (7988 . 7990) (#("(" 0 1 (fontified nil)) . 7988) (7979 . 7989) (#("  " 0 1 (fontified nil) 1 2 (fontified nil rear-nonsticky t)) . 7944) (7980 . 7981)) ((#("
" 0 1 (fontified nil)) . 7980) (undo-tree-id1216 . -1) (undo-tree-id1218 . -1) (undo-tree-id1220 . -1) (undo-tree-id1222 . -1) (undo-tree-id1224 . -1) (undo-tree-id1226 . -1) (undo-tree-id1228 . -1) (undo-tree-id1230 . -1) (undo-tree-id1232 . -1) (undo-tree-id1234 . -1) (undo-tree-id1236 . -1) (undo-tree-id1238 . -1) (undo-tree-id1240 . -1) (undo-tree-id1242 . -1) (undo-tree-id1244 . -1) (undo-tree-id1246 . -1) (undo-tree-id1248 . -1) (undo-tree-id1250 . -1) (undo-tree-id1252 . -1) (undo-tree-id1254 . -1) (undo-tree-id1256 . -1) (undo-tree-id1258 . -1) (undo-tree-id1260 . -1) (undo-tree-id1262 . -1) (undo-tree-id1264 . -1) (undo-tree-id1266 . -1) (undo-tree-id1268 . -1) (undo-tree-id1270 . -1) (undo-tree-id1272 . -1) (undo-tree-id1274 . -1) (undo-tree-id1276 . -1) (undo-tree-id1278 . -1) (undo-tree-id1280 . -1) (undo-tree-id1282 . -1) (undo-tree-id1284 . -1) (undo-tree-id1286 . -1) (undo-tree-id1288 . -1) (undo-tree-id1290 . -1) (undo-tree-id1292 . -1) (undo-tree-id1294 . -1) (undo-tree-id1296 . -1) (undo-tree-id1298 . -1) (undo-tree-id1300 . -1) (undo-tree-id1302 . -1) (undo-tree-id1304 . -1) (undo-tree-id1306 . -1) (undo-tree-id1308 . -1) (undo-tree-id1310 . -1) (undo-tree-id1312 . -1) (undo-tree-id1314 . -1) (undo-tree-id1316 . -1) (undo-tree-id1318 . -1) (7944 . 7946) (#("			      " 0 9 (fontified nil)) . 7979) (undo-tree-id1321 . -1) (undo-tree-id1323 . -1) (undo-tree-id1325 . -1) (undo-tree-id1327 . -1) (undo-tree-id1329 . -1) (undo-tree-id1331 . -1) (undo-tree-id1333 . -1) (#("(" 0 1 (fontified nil)) . 7988) (7988 . 7989) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-7-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-7-face))) . 7988) (#("todo \"" 0 5 (fontified nil) 5 6 (fontified nil)) . 7989) (7994 . 7995) (#("\"\"" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face)) . 7994) (#("TODO" 0 4 (fontified t face font-lock-string-face)) . 7995)) (25330 13524 417829 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-7-face))) . 7978) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . 1) (undo-tree-id1017 . -1) (t 25330 13296 579872 198000)) ((7978 . 7979)) (25330 13347 140672 0) 0 nil])
([nil nil ((#("	  " 0 3 (fontified nil)) . 7946) (7941 . 7946)) ((#("	    " 0 5 (fontified nil)) . 7941) (7946 . 7949)) (25330 13525 190342 0) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-7-face))) . 7962) (undo-tree-id997 . -1) (undo-tree-id999 . -1) (undo-tree-id1001 . -1) (undo-tree-id1003 . -1) (undo-tree-id1005 . -1) (undo-tree-id1007 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . 1) (undo-tree-id1011 . -1)) ((7962 . 7963)) (25330 13346 954321 0) 0 nil])
([nil nil ((#("			      " 0 9 (fontified nil)) . 7985) (7981 . 7985)) ((#("				" 0 4 (fontified nil)) . 7981) (7985 . 7994)) (25330 13526 13601 0) 0 nil])
([nil nil ((#(">" 0 1 (fontified t)) . 7971) (undo-tree-id1047 . -1) (undo-tree-id1049 . -1) (undo-tree-id1051 . -1) (undo-tree-id1053 . -1) (undo-tree-id1055 . -1) (undo-tree-id1057 . -1) (undo-tree-id1059 . -1) (t 25330 13302 921718 980000)) ((7971 . 7972)) (25330 13346 672899 0) 0 nil])
([nil nil ((#("			    " 0 7 (fontified nil)) . 8004) (8000 . 8004)) ((#("				" 0 4 (fontified nil)) . 8000) (8004 . 8011)) (25330 13526 414469 0) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . 7971) (undo-tree-id1033 . -1) (undo-tree-id1035 . -1) (undo-tree-id1037 . -1) (undo-tree-id1039 . -1) (undo-tree-id1041 . -1) (undo-tree-id1043 . -1) (undo-tree-id1045 . -1)) ((7971 . 7972)) (25330 13346 365647 0) 0 nil])
([nil nil ((#("			    " 0 7 (fontified nil)) . 8104) (8100 . 8104)) ((#("				" 0 4 (fontified nil)) . 8100) (8104 . 8111)) (25330 13526 685589 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 7971) (undo-tree-id1019 . -1) (undo-tree-id1021 . -1) (undo-tree-id1023 . -1) (undo-tree-id1025 . -1) (undo-tree-id1027 . -1) (undo-tree-id1029 . -1) (undo-tree-id1031 . -1)) ((7971 . 7972)) (25330 13346 100305 0) 0 nil])
([nil nil ((7976 . 7979)) ((#("== " 0 2 (fontified t) 2 3 (fontified t)) . 7976)) (25330 13527 473877 0) 0 nil])
([nil nil ((7971 . 7973) (t 25330 13308 619289 565000)) ((#(">=" 0 1 (fontified t) 1 2 (fontified t)) . 7971) (undo-tree-id1063 . -2) (undo-tree-id1064 . -2) (undo-tree-id1065 . -2) (undo-tree-id1066 . -2) (undo-tree-id1067 . -2) (undo-tree-id1068 . -2) (undo-tree-id1069 . -2) (undo-tree-id1070 . -2) (undo-tree-id1071 . -2) (undo-tree-id1072 . -2) (undo-tree-id1073 . -2) (undo-tree-id1074 . -2) (undo-tree-id1075 . -2) (undo-tree-id1076 . -2) (undo-tree-id1077 . -2) (undo-tree-id1078 . -2) (undo-tree-id1079 . -2) (undo-tree-id1080 . -2) (undo-tree-id1081 . -2) (undo-tree-id1082 . -2) (undo-tree-id1083 . -2) (undo-tree-id1084 . -2) (undo-tree-id1085 . -2) (t 25330 13324 76904 375000)) (25330 13346 14132 0) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . 7976)) nil (25330 13530 737703 0) 0 nil] [nil nil ((7976 . 7978) (#("==" 0 2 (fontified t)) . 7976) (t 25330 13417 863310 665000)) ((7976 . 7978) (#(">=" 0 2 (fontified t)) . 7976)) (25330 13468 577218 0) 0 nil])
([nil nil ((7971 . 7974) (#(">" 0 1 (fontified t)) . -7971) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (#("=" 0 1 (fontified t)) . -7972) (undo-tree-id1062 . -1) 7973 (t 25330 13324 76904 375000)) ((7971 . 7973) (#("== " 0 3 (fontified t)) . 7971)) (25330 13346 13836 0) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . 7976)) nil (25330 13530 737701 0) 0 nil])
([nil nil ((#("	    (org-ql-block '(and (priority >= \"A\")
				(todo \"TODO\"))
				((org-ql-block-header \"Important\")))
" 0 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-5-face)) 6 13 (fontified t) 13 20 (fontified t) 20 21 (fontified t face (rainbow-delimiters-depth-6-face)) 21 25 (fontified t) 25 26 (fontified t face (rainbow-delimiters-depth-7-face)) 26 34 (fontified t) 34 38 (fontified t) 38 41 (fontified t face font-lock-string-face) 41 42 (fontified t face (rainbow-delimiters-depth-7-face)) 42 43 (fontified t) 43 47 (fontified t) 47 48 (fontified t face (rainbow-delimiters-depth-7-face)) 48 53 (fontified t) 53 58 (fontified t face font-lock-string-face) 58 59 (fontified t face font-lock-string-face) 59 60 (fontified t face (rainbow-delimiters-depth-7-face)) 60 61 (fontified t face (rainbow-delimiters-depth-6-face)) 61 62 (fontified t) 62 66 (fontified t) 66 67 (fontified t face (rainbow-delimiters-depth-6-face)) 67 68 (fontified t face (rainbow-delimiters-depth-7-face)) 68 88 (fontified t) 88 99 (fontified t face font-lock-string-face) 99 100 (fontified t face (rainbow-delimiters-depth-7-face)) 100 101 (fontified t face (rainbow-delimiters-depth-6-face)) 101 102 (fontified t face (rainbow-delimiters-depth-5-face)) 102 103 (fontified t)) . 7941) (undo-tree-id1090 . -62) (undo-tree-id1091 . -62) (undo-tree-id1092 . -102) (undo-tree-id1093 . 66) (undo-tree-id1094 . -103) (undo-tree-id1095 . -42) (undo-tree-id1096 . -101) (undo-tree-id1097 . -62) (undo-tree-id1098 . -43) (undo-tree-id1099 . -43) (undo-tree-id1100 . -43) (undo-tree-id1101 . -43) (undo-tree-id1102 . -43) (undo-tree-id1103 . -43) (undo-tree-id1104 . -43) (undo-tree-id1105 . -43) (undo-tree-id1106 . -43) (undo-tree-id1107 . -43) (undo-tree-id1108 . -43) (undo-tree-id1109 . -43) (undo-tree-id1110 . -43) (undo-tree-id1111 . -43) (undo-tree-id1112 . -43) (undo-tree-id1113 . -43) (undo-tree-id1114 . -43) (undo-tree-id1115 . -43) (undo-tree-id1116 . -43) (undo-tree-id1117 . -43) (undo-tree-id1118 . -43) (undo-tree-id1119 . -43) (undo-tree-id1120 . -43) (undo-tree-id1121 . -43) (undo-tree-id1122 . -43) (undo-tree-id1123 . -43) (undo-tree-id1124 . -43) (undo-tree-id1125 . -43) (undo-tree-id1126 . -43) (undo-tree-id1127 . -43) (undo-tree-id1128 . -43) (undo-tree-id1129 . -43) (undo-tree-id1130 . -43) (undo-tree-id1131 . -43) (undo-tree-id1132 . -43) (undo-tree-id1133 . -43) (undo-tree-id1134 . -43) (undo-tree-id1135 . -43) (undo-tree-id1136 . -43) (undo-tree-id1137 . -43) (undo-tree-id1138 . -43) (undo-tree-id1139 . -43) (undo-tree-id1140 . -43) (undo-tree-id1141 . -43) (undo-tree-id1142 . -43) (undo-tree-id1143 . -43) (undo-tree-id1144 . -43) (undo-tree-id1145 . -43) (undo-tree-id1146 . -43) (undo-tree-id1147 . -43) (undo-tree-id1148 . -43) (undo-tree-id1149 . -43) (undo-tree-id1150 . -43) (undo-tree-id1151 . -43) (undo-tree-id1152 . -43) (undo-tree-id1153 . -43) (undo-tree-id1154 . -43) (undo-tree-id1155 . -43) (undo-tree-id1156 . -43) (undo-tree-id1157 . -43) (undo-tree-id1158 . -43) (undo-tree-id1159 . -43) (undo-tree-id1160 . -43) (undo-tree-id1161 . -43) (undo-tree-id1162 . -43) (undo-tree-id1163 . -43) (undo-tree-id1164 . -43) (undo-tree-id1165 . -43) (undo-tree-id1166 . -43) (undo-tree-id1167 . -43) (undo-tree-id1168 . -103) (undo-tree-id1169 . -62) (undo-tree-id1170 . -43) (undo-tree-id1171 . -43) (undo-tree-id1172 . -43) (undo-tree-id1173 . -43) (undo-tree-id1174 . -43) (undo-tree-id1175 . -43) (undo-tree-id1176 . -43) (undo-tree-id1177 . -43) (undo-tree-id1178 . -43) (undo-tree-id1179 . -43) (undo-tree-id1180 . -43) (undo-tree-id1181 . -43) (undo-tree-id1182 . -43) (undo-tree-id1183 . -43) (undo-tree-id1184 . -43) (undo-tree-id1185 . -43) (undo-tree-id1186 . -43) (undo-tree-id1187 . -43) (undo-tree-id1188 . -43) (undo-tree-id1189 . -43) (undo-tree-id1190 . -43) (undo-tree-id1191 . -62) (undo-tree-id1192 . -62) (undo-tree-id1193 . -62) (undo-tree-id1194 . -62) (undo-tree-id1195 . -62) (undo-tree-id1196 . -62) (undo-tree-id1197 . -62) (undo-tree-id1198 . -62) (undo-tree-id1199 . -62) (undo-tree-id1200 . -62) (undo-tree-id1201 . -62) (undo-tree-id1202 . -62) (undo-tree-id1203 . -62) (undo-tree-id1204 . -62) (undo-tree-id1205 . -62) (undo-tree-id1206 . -62) (undo-tree-id1207 . -62) (undo-tree-id1208 . -62) (undo-tree-id1209 . -62) (undo-tree-id1210 . -62) (undo-tree-id1211 . -62) (undo-tree-id1212 . -62) (undo-tree-id1213 . -62) 8003 (t 25330 13441 69229 322000)) ((7941 . 8044) (t 25330 13462 191880 523000)) (25330 13462 177601 0) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t)) . 7976)) nil (25330 13530 737695 0) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 543 . 544) (nil fontified nil 513 . 544) (513 . 544) (512 . 513) (t 25330 13530 769508 591000) 465) nil (25359 16391 33065 0) 0 nil])
([nil nil ((542 . 543) (#("5" 0 1 (fontified t)) . 542) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (t 25359 16391 68054 433000)) nil (25359 16393 426882 0) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-string-face fontified t)) . 7488) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (t 25359 16393 440102 424000)) nil (25359 17048 796888 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 7844 . 7845) (#("
" 0 1 (fontified nil)) . -7946) (7843 . 7947) 7839 (t 25359 17048 815405 556000)) nil (25359 17210 765985 0) 0 nil])
([nil nil ((7847 . 7848) (#("i" 0 1 (face font-lock-string-face fontified t)) . 7847)) nil (25359 17210 765944 0) 0 nil])
([nil nil ((7847 . 7848) (#("s" 0 1 (face font-lock-string-face fontified t)) . 7847)) nil (25359 17210 765943 0) 0 nil])
([nil nil ((7851 . 7858) (#("I" 0 1 (face font-lock-string-face fontified t)) . -7851) (undo-tree-id75 . -1) (#("N" 0 1 (face font-lock-string-face fontified t)) . -7852) (undo-tree-id76 . -1) (#("B" 0 1 (face font-lock-string-face fontified t)) . -7853) (undo-tree-id77 . -1) (#("O" 0 1 (face font-lock-string-face fontified t)) . -7854) (undo-tree-id78 . -1) 7855 (7851 . 7855) (#("Inbox" 0 5 (face font-lock-string-face fontified t)) . 7851)) nil (25359 17210 765941 0) 0 nil])
([nil nil ((7858 . 7872)) nil (25359 17210 765934 0) 0 nil])
([nil nil ((7902 . 7909) (#("INBOX" 0 5 (face font-lock-string-face fontified t)) . 7902)) nil (25359 17210 765933 0) 0 nil])
([nil nil ((7896 . 7899) (7895 . 7897) (#("(" 0 1 (fontified nil)) . -7895) (7895 . 7896)) nil (25359 17210 765932 0) 0 nil])
([nil nil ((#("(todo \"SOMEDAY\")" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t) 1 6 (fontified t) 6 15 (face font-lock-string-face fontified t) 15 16 (face (rainbow-delimiters-depth-6-face) fontified t)) . 7900) (undo-tree-id67 . -15) (undo-tree-id68 . -15) (undo-tree-id69 . -15) (undo-tree-id70 . -15) (undo-tree-id71 . 1) (undo-tree-id72 . -16) (undo-tree-id73 . 16) (undo-tree-id74 . -1) 7915) nil (25359 17210 765929 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 7914 . 7915) (nil fontified nil 7899 . 7915) (7899 . 7915)) nil (25359 17210 765916 0) 0 nil])
([nil nil ((7917 . 7921) (7916 . 7918) (#("(" 0 1 (fontified nil)) . -7916) (7915 . 7917)) nil (25359 17210 765915 0) 0 nil])
([nil nil ((7928 . 7933) (#("u" 0 1 (face font-lock-string-face fontified t)) . -7928) (undo-tree-id66 . -1) 7929 (7928 . 7929) (7927 . 7929) (#("\"" 0 1 (fontified nil)) . -7927) (7922 . 7928) (7921 . 7923) (#("(" 0 1 (fontified nil)) . -7921) (7920 . 7922)) nil (25359 17210 765912 0) 0 nil])
([nil nil ((7923 . 7927) (7922 . 7924) (#("(" 0 1 (face (rainbow-delimiters-depth-8-face) fontified nil)) . -7922) (7922 . 7923)) nil (25359 17210 765909 0) 0 nil])
([nil nil ((#("tags \"music\"" 0 5 (fontified t) 5 11 (face font-lock-string-face fontified t) 11 12 (face font-lock-string-face fontified t)) . 7928) (undo-tree-id62 . -11) (undo-tree-id63 . -11) (undo-tree-id64 . -11) (undo-tree-id65 . -11) 7939) nil (25359 17210 765907 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 7938 . 7939) (nil fontified nil 7927 . 7939) (7927 . 7939)) nil (25359 17210 765902 0) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-9-face) fontified t)) . 7922) (undo-tree-id60 . 1) (undo-tree-id61 . -1)) nil (25359 17210 765900 0) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-8-face) fontified t)) . 7938) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . 1) (undo-tree-id57 . -1) (undo-tree-id58 . 1) (undo-tree-id59 . -1)) nil (25359 17210 765897 0) 0 nil])
([nil nil ((7926 . 7928) (#("(" 0 1 (fontified nil)) . -7926) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (7926 . 7927)) nil (25359 17210 765889 0) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-9-face) fontified t)) . 7927) (undo-tree-id48 . 1) (undo-tree-id49 . 1) (undo-tree-id50 . -1)) nil (25359 17210 765885 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 7939 . 7940) (nil fontified nil 7939 . 7940) (7939 . 7940) 7938) nil (25359 17210 765881 0) 0 nil])
([nil nil ((7948 . 7956) (7947 . 7949) (#("\"" 0 1 (fontified nil)) . -7947) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (7942 . 7948) (7941 . 7943) (#("(" 0 1 (fontified nil)) . -7941) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (7940 . 7942)) nil (25359 17210 765878 0) 0 nil])
([nil nil ((7993 . 8000) (#("Inbox" 0 5 (face font-lock-string-face fontified t)) . 7993) (undo-tree-id30 . -5) (undo-tree-id31 . -5) (undo-tree-id32 . -5) (undo-tree-id33 . -5) (undo-tree-id34 . -5) (undo-tree-id35 . -5) (undo-tree-id36 . -5) (undo-tree-id37 . -5) (undo-tree-id38 . -5) (undo-tree-id39 . -5) (undo-tree-id40 . -5) (undo-tree-id41 . -5) (undo-tree-id42 . -5) (undo-tree-id43 . -5)) nil (25359 17210 765871 0) 0 nil])
([nil nil ((8001 . 8014) (#("f" 0 1 (face font-lock-string-face fontified t)) . -8001) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) 8002 (8000 . 8002)) nil (25359 17210 765852 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 8135 . 8136) (#("
" 0 1 (fontified nil)) . -8237) (8134 . 8238) 8133 (t 25359 17210 826140 320000)) nil (25359 17375 172185 0) 0 nil])
([nil nil ((8142 . 8147) (#("M" 0 1 (fontified t face font-lock-string-face)) . -8142) (undo-tree-id16 . -1) (#("U" 0 1 (fontified t face font-lock-string-face)) . -8143) (undo-tree-id17 . -1) (#("S" 0 1 (fontified t face font-lock-string-face)) . -8144) (undo-tree-id18 . -1) (#("I" 0 1 (fontified t face font-lock-string-face)) . -8145) (undo-tree-id19 . -1) (#("C" 0 1 (fontified t face font-lock-string-face)) . -8146) (undo-tree-id20 . -1) 8147 (8142 . 8147) (#("Inbox" 0 5 (fontified t face font-lock-string-face)) . 8142)) nil (25359 17375 172182 0) 0 nil])
([nil nil ((8142 . 8147) (#("Films" 0 5 (fontified t face font-lock-string-face)) . 8142)) nil (25359 17375 172174 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -8340) (8237 . 8341) 8236) nil (25359 17375 172173 0) 0 nil])
([nil nil ((8245 . 8250) (#("FILMS" 0 5 (fontified t face font-lock-string-face)) . 8245)) nil (25359 17375 172171 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -8443) (8340 . 8444) 8339) nil (25359 17375 172170 0) 0 nil])
([nil nil ((8349 . 8355) (#("o" 0 1 (fontified t face font-lock-string-face)) . -8349) (undo-tree-id14 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -8350) (undo-tree-id15 . -1) 8351 (8348 . 8351) (#("BOOKS" 0 5 (fontified t face font-lock-string-face)) . 8348)) nil (25359 17375 172168 0) 0 nil])
([nil nil ((#("	(\"i\" \"FILMS\"
	    ((org-ql-block '(todo \"INBOX\")
			    ((org-ql-block-header \"Inbox\")))
          ))
	(\"i\" \"BOOKS\"
	    ((org-ql-block '(todo \"INBOX\")
			    ((org-ql-block-header \"Inbox\")))
          ))
	(\"i\" \"CONTENT\"
	    ((org-ql-block '(todo \"INBOX\")
			    ((org-ql-block-header \"Inbox\")))
          ))
" 0 1 (fontified t rear-nonsticky t) 1 2 (fontified t face (rainbow-delimiters-depth-3-face)) 2 5 (fontified t face font-lock-string-face) 5 6 (fontified t) 6 13 (fontified t face font-lock-string-face) 13 14 (fontified t) 14 19 (fontified t) 19 20 (fontified t face (rainbow-delimiters-depth-4-face)) 20 21 (fontified t face (rainbow-delimiters-depth-5-face)) 21 35 (fontified t) 35 36 (fontified t face (rainbow-delimiters-depth-6-face)) 36 41 (fontified t) 41 42 (fontified t face font-lock-string-face) 42 48 (fontified t face font-lock-string-face) 48 49 (fontified t face (rainbow-delimiters-depth-6-face)) 49 57 (fontified t) 57 58 (fontified t face (rainbow-delimiters-depth-6-face)) 58 59 (fontified t face (rainbow-delimiters-depth-7-face)) 59 79 (fontified t) 79 86 (fontified t face font-lock-string-face) 86 87 (fontified t face (rainbow-delimiters-depth-7-face)) 87 88 (fontified t face (rainbow-delimiters-depth-6-face)) 88 89 (fontified t face (rainbow-delimiters-depth-5-face)) 89 90 (fontified t) 90 100 (fontified t) 100 101 (fontified t face (rainbow-delimiters-depth-4-face)) 101 102 (fontified t face (rainbow-delimiters-depth-3-face)) 102 103 (fontified t) 103 104 (rear-nonsticky t fontified t) 104 105 (fontified t face (rainbow-delimiters-depth-3-face)) 105 108 (fontified t face font-lock-string-face) 108 109 (fontified t) 109 116 (fontified t face font-lock-string-face) 116 117 (fontified t) 117 122 (fontified t) 122 123 (fontified t face (rainbow-delimiters-depth-4-face)) 123 124 (fontified t face (rainbow-delimiters-depth-5-face)) 124 138 (fontified t) 138 139 (fontified t face (rainbow-delimiters-depth-6-face)) 139 144 (fontified t) 144 145 (fontified t face font-lock-string-face) 145 151 (fontified t face font-lock-string-face) 151 152 (fontified t face (rainbow-delimiters-depth-6-face)) 152 160 (fontified t) 160 161 (fontified t face (rainbow-delimiters-depth-6-face)) 161 162 (fontified t face (rainbow-delimiters-depth-7-face)) 162 182 (fontified t) 182 189 (fontified t face font-lock-string-face) 189 190 (fontified t face (rainbow-delimiters-depth-7-face)) 190 191 (fontified t face (rainbow-delimiters-depth-6-face)) 191 192 (fontified t face (rainbow-delimiters-depth-5-face)) 192 193 (fontified t) 193 203 (fontified t) 203 204 (fontified t face (rainbow-delimiters-depth-4-face)) 204 205 (fontified t face (rainbow-delimiters-depth-3-face)) 205 206 (fontified t) 206 207 (rear-nonsticky t fontified t) 207 208 (fontified t face (rainbow-delimiters-depth-3-face)) 208 211 (fontified t face font-lock-string-face) 211 212 (fontified t) 212 221 (fontified t face font-lock-string-face) 221 222 (fontified t) 222 227 (fontified t) 227 228 (fontified t face (rainbow-delimiters-depth-4-face)) 228 229 (fontified t face (rainbow-delimiters-depth-5-face)) 229 243 (fontified t) 243 244 (fontified t face (rainbow-delimiters-depth-6-face)) 244 249 (fontified t) 249 250 (fontified t face font-lock-string-face) 250 256 (fontified t face font-lock-string-face) 256 257 (fontified t face (rainbow-delimiters-depth-6-face)) 257 265 (fontified t) 265 266 (fontified t face (rainbow-delimiters-depth-6-face)) 266 267 (fontified t face (rainbow-delimiters-depth-7-face)) 267 287 (fontified t) 287 294 (fontified t face font-lock-string-face) 294 295 (fontified t face (rainbow-delimiters-depth-7-face)) 295 296 (fontified t face (rainbow-delimiters-depth-6-face)) 296 297 (fontified t face (rainbow-delimiters-depth-5-face)) 297 308 (fontified t) 308 309 (fontified t face (rainbow-delimiters-depth-4-face)) 309 310 (fontified t face (rainbow-delimiters-depth-3-face)) 310 311 (fontified t)) . 8135) (undo-tree-id5 . -310) (undo-tree-id6 . -310) (undo-tree-id7 . -12) (undo-tree-id8 . -310) (undo-tree-id9 . -206) (undo-tree-id10 . -310) (undo-tree-id11 . 91) (undo-tree-id12 . -12) (undo-tree-id13 . -310) 8445) nil (25359 17375 172163 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -8154) (7843 . 8155) 7842) nil (25359 17375 172152 0) 0 nil])
([nil nil ((7847 . 7848) (#("i" 0 1 (fontified t face font-lock-string-face)) . 7847)) nil (25359 17376 435249 0) 0 nil])
([nil nil ((7880 . 7884) (#("todo" 0 4 (fontified t)) . 7880)) nil (25359 17400 87143 0) 0 nil] [nil nil ((7880 . 7883) (7879 . 7881) (#("(" 0 1 (fontified nil)) . -7879) (7879 . 7880)) ((#("(" 0 1 (fontified nil)) . 7879) (undo-tree-id25 . 1) (undo-tree-id26 . 1) (7879 . 7880) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-6-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-6-face))) . 7879) (undo-tree-id27 . -1) (undo-tree-id28 . 1) (undo-tree-id29 . -2) (undo-tree-id30 . 2) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("and" 0 3 (fontified t)) . 7880) (undo-tree-id61 . -3) (undo-tree-id62 . -3) (undo-tree-id63 . -3) (undo-tree-id64 . -3) (undo-tree-id65 . -3) (undo-tree-id66 . -3) (undo-tree-id67 . -3) (undo-tree-id68 . -3) (undo-tree-id69 . -3) (undo-tree-id70 . -3) (undo-tree-id71 . -3) (undo-tree-id72 . -3) (undo-tree-id73 . -3) (undo-tree-id74 . -3) (undo-tree-id75 . -3) (undo-tree-id76 . -3) (undo-tree-id77 . -3) (undo-tree-id78 . -3) (undo-tree-id79 . -3) (undo-tree-id80 . -3) (undo-tree-id81 . -3) (undo-tree-id82 . -3) (undo-tree-id83 . -3) (undo-tree-id84 . -3) (undo-tree-id85 . -3) (undo-tree-id86 . -3) (undo-tree-id87 . -3) (undo-tree-id88 . -3) (undo-tree-id89 . -3) (undo-tree-id90 . -3)) (25359 17376 65136 0) 0 nil])
([nil nil ((7888 . 7890) (#("m" 0 1 (fontified t face font-lock-string-face)) . -7888) (undo-tree-id91 . -1) 7889 (7886 . 7889) (#("INBOX" 0 5 (fontified t face font-lock-string-face)) . 7886)) nil (25359 17400 87244 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-6-face))) . 7883) (undo-tree-id2 . 1) (undo-tree-id3 . 1) (undo-tree-id4 . -1)) ((7883 . 7884)) (25359 17375 716639 0) 0 nil])
([nil nil ((7964 . 7967) (#("   " 0 3 (fontified nil)) . -7962) (7966 . 7967)) nil (25359 17441 778078 0) 0 nil] [nil nil ((nil rear-nonsticky nil 7937 . 7938) (#("
" 0 1 (fontified nil)) . -8007) (7932 . 8008) 7912) ((#("
	    ((org-ql-block '(tags \"film\")
			    ((org-ql-block-header \"Inbox\")))
" 0 1 (fontified t) 1 5 (fontified nil) 5 6 (fontified nil rear-nonsticky nil) 6 7 (fontified nil face (rainbow-delimiters-depth-5-face)) 7 8 (fontified nil face (rainbow-delimiters-depth-6-face)) 8 22 (fontified nil) 22 23 (fontified nil face (rainbow-delimiters-depth-7-face)) 23 27 (fontified nil) 27 28 (fontified nil) 28 33 (fontified nil face font-lock-string-face) 33 34 (fontified nil face font-lock-string-face) 34 35 (fontified nil face (rainbow-delimiters-depth-7-face)) 35 36 (fontified nil) 36 43 (fontified nil) 43 44 (fontified nil face (rainbow-delimiters-depth-7-face)) 44 45 (fontified nil face (rainbow-delimiters-depth-8-face)) 45 65 (fontified nil) 65 72 (fontified nil face font-lock-string-face) 72 73 (fontified nil face (rainbow-delimiters-depth-8-face)) 73 74 (fontified nil face (rainbow-delimiters-depth-7-face)) 74 75 (fontified nil face (rainbow-delimiters-depth-6-face)) 75 76 (fontified nil)) . 7932) (undo-tree-id92 . -6) (undo-tree-id93 . -75) (undo-tree-id94 . -1) (undo-tree-id95 . -75) (undo-tree-id96 . -1) (undo-tree-id97 . 70) (undo-tree-id98 . -7) (undo-tree-id99 . -6) (8007 . 8008) (nil rear-nonsticky t 7937 . 7938)) (25359 17400 87125 0) 0 nil])
([nil nil ((7897 . 7898)) ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-6-face))) . 7897) (undo-tree-id24 . 1)) (25359 17375 372254 0) 0 nil])
([nil nil ((7862 . 7865) (#("   " 0 3 (fontified nil)) . -7860) (7864 . 7865)) nil (25359 17441 778077 0) 0 nil])
nil
([nil nil ((7883 . 7884)) ((#(" " 0 1 (fontified t)) . 7883)) (25359 17375 172290 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 7936 . 7937) (#("
" 0 1 (fontified nil)) . -8005) (7933 . 8006) 7895) nil (25359 17441 778075 0) 0 nil])
([nil nil ((7899 . 7901) (#("(" 0 1 (fontified nil)) . -7899) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (7898 . 7900)) ((#(" (" 0 1 (fontified nil) 1 2 (fontified nil)) . 7898) (undo-tree-id21 . -2) (undo-tree-id22 . -2) (7899 . 7900) (#("()" 0 1 (fontified t face (rainbow-delimiters-depth-7-face)) 1 2 (fontified t face (rainbow-delimiters-depth-7-face))) . 7899) (undo-tree-id23 . 1)) (25359 17375 172136 0) 0 nil])
([nil nil ((7882 . 7886) (7881 . 7883) (#("(" 0 1 (fontified nil)) . -7881) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (7880 . 7882)) nil (25359 17441 778073 0) 0 nil])
nil
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-6-face))) . 7886) (undo-tree-id104 . 1) (undo-tree-id105 . 1) (undo-tree-id106 . -1)) nil (25359 17441 778069 0) 0 nil])
([nil nil ((7899 . 7901)) nil (25359 17441 778064 0) 0 nil])
([nil nil ((7907 . 7911) (7906 . 7908) (#("\"" 0 1 (fontified nil)) . -7906) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (7906 . 7907) (7901 . 7906) (7900 . 7902) (#("(" 0 1 (fontified nil)) . -7900) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (7899 . 7901)) nil (25359 17441 778140 0) 0 nil])
([nil nil ((#("	  (org-ql-block ' (and (tags \"film\") (todo \"TODO\") )
			    ((org-ql-block-header \"Inbox\")))
" 0 3 (fontified t) 3 4 (fontified t face (rainbow-delimiters-depth-5-face)) 4 19 (fontified t) 19 20 (fontified t face (rainbow-delimiters-depth-6-face)) 20 23 (fontified t face font-lock-keyword-face) 23 24 (fontified t) 24 25 (fontified t face (rainbow-delimiters-depth-7-face)) 25 29 (fontified t) 29 30 (fontified t) 30 35 (fontified t face font-lock-string-face) 35 36 (fontified t face font-lock-string-face) 36 37 (fontified t face (rainbow-delimiters-depth-7-face)) 37 38 (fontified t) 38 39 (fontified t face (rainbow-delimiters-depth-7-face)) 39 44 (fontified t) 44 49 (fontified t face font-lock-string-face) 49 50 (fontified t face font-lock-string-face) 50 51 (fontified t face (rainbow-delimiters-depth-7-face)) 51 52 (fontified t) 52 53 (fontified t face (rainbow-delimiters-depth-6-face)) 53 54 (fontified t) 54 61 (fontified t) 61 62 (fontified t face (rainbow-delimiters-depth-6-face)) 62 63 (fontified t face (rainbow-delimiters-depth-7-face)) 63 83 (fontified t) 83 90 (fontified t face font-lock-string-face) 90 91 (fontified t face (rainbow-delimiters-depth-7-face)) 91 92 (fontified t face (rainbow-delimiters-depth-6-face)) 92 93 (fontified t face (rainbow-delimiters-depth-5-face)) 93 94 (fontified t)) . 7862) (undo-tree-id119 . -91) (undo-tree-id120 . -91) (undo-tree-id121 . -51) (undo-tree-id122 . -91) (undo-tree-id123 . -94) (undo-tree-id124 . 45) (undo-tree-id125 . -51) (undo-tree-id126 . -91) (undo-tree-id127 . 3) (undo-tree-id128 . -92) (undo-tree-id129 . 33) (undo-tree-id130 . -62) 7953) nil (25359 17495 575908 0) 0 nil] [nil nil ((#(" " 0 1 (fontified t)) . 7913)) ((7913 . 7914)) (25359 17441 778043 0) 0 nil])
([nil nil ((#("	  " 0 2 (fontified nil) 2 3 (rear-nonsticky t fontified nil)) . 7861) (undo-tree-id112 . 3) (undo-tree-id113 . 3) (#("
" 0 1 (fontified t)) . -7861) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) 7860) nil (25359 17495 575895 0) 0 nil])
nil
([nil nil ((7920 . 7925) (#("Inbox" 0 5 (fontified t face font-lock-string-face)) . 7920)) nil (25359 17495 575886 0) 0 nil])
([nil nil ((7946 . 7947) (#("i" 0 1 (fontified t face font-lock-string-face)) . 7946)) nil (25359 17495 575885 0) 0 nil])
([nil nil ((#("	  " 0 3 (fontified nil)) . 7960) (#("
" 0 1 (fontified t)) . -7960) 7959) nil (25359 17495 575884 0) 0 nil])
([nil nil ((7978 . 7980) (#("b" 0 1 (fontified t)) . -7978) (undo-tree-id111 . -1) 7979 (7976 . 7979) (#("todo" 0 4 (fontified t)) . 7976)) nil (25359 17495 575882 0) 0 nil])
([nil nil ((7982 . 7986) (#("INBOX" 0 5 (fontified t face font-lock-string-face)) . 7982)) nil (25359 17495 575880 0) 0 nil])
([nil nil ((8019 . 8024) (#("K" 0 1 (fontified t face font-lock-string-face)) . -8019) (undo-tree-id109 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -8020) (undo-tree-id110 . -1) 8021 (8019 . 8021) (#("Inbox" 0 5 (fontified t face font-lock-string-face)) . 8019)) nil (25359 17495 575878 0) 0 nil])
([nil nil ((8080 . 8084) (#("todo" 0 4 (fontified t)) . 8080)) nil (25359 17495 575863 0) 0 nil])
([nil nil ((8086 . 8093) (#("INBOX" 0 5 (fontified t face font-lock-string-face)) . 8086)) nil (25359 17495 575862 0) 0 nil])
([nil nil ((8045 . 8046) (#("i" 0 1 (fontified t face font-lock-string-face)) . 8045)) nil (25359 17495 575860 0) 0 nil])
([nil nil ((8152 . 8153) (#("S" 0 1 (fontified t face font-lock-string-face)) . 8152)) nil (25359 17495 575853 0) 0 nil])
([nil nil ((7877 . 7881) (7876 . 7878) (#("(" 0 1 (fontified nil)) . -7876) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (7876 . 7877) (t 25359 17495 605858 347000)) nil (25359 17555 839816 0) 0 nil])
([nil nil ((#("(tags \"film\")" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t) 1 6 (fontified t) 6 12 (face font-lock-string-face fontified t) 12 13 (face (rainbow-delimiters-depth-6-face) fontified t)) . 7882) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) 7883) nil (25359 17555 839885 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 7893 . 7894) (nil fontified nil 7881 . 7894) (7881 . 7894)) nil (25359 17637 977203 0) 0 nil] [nil nil ((nil rear-nonsticky nil 7894 . 7895) (nil fontified nil 7882 . 7895) (7882 . 7895) 7881) ((#("(tags \"film\")" 0 1 (face (rainbow-delimiters-depth-6-face) fontified nil) 1 6 (fontified nil) 6 12 (face font-lock-string-face fontified nil) 12 13 (face (rainbow-delimiters-depth-6-face) rear-nonsticky nil fontified nil)) . 7882) (undo-tree-id67 . -12) (undo-tree-id68 . 1) (undo-tree-id69 . -13) (undo-tree-id70 . 13) (undo-tree-id71 . -1) (undo-tree-id72 . -12) (undo-tree-id73 . -12) (nil rear-nonsticky t 7894 . 7895)) (25359 17555 839717 0) 0 nil])
([nil nil ((7901 . 7905) (7902 . 7904) (7901 . 7903) (#("(" 0 1 (face (rainbow-delimiters-depth-8-face) fontified nil)) . -7901) (7901 . 7902) (7900 . 7902) (#("(" 0 1 (fontified nil)) . -7900) (7896 . 7901) (7895 . 7897) (#("(" 0 1 (fontified nil)) . -7895) (7895 . 7896) (#("(" 0 1 (face (rainbow-delimiters-depth-7-face) fontified nil)) . -7895) (undo-tree-id90 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-7-face) fontified t)) . 7896) (7895 . 7897) (#("(" 0 1 (fontified nil)) . -7895) (7894 . 7896)) nil (25359 17637 977200 0) 0 nil])
nil
([nil nil ((7912 . 7916) (7911 . 7913) (#("\"" 0 1 (fontified nil)) . -7911) (7907 . 7912) (#("a" 0 1 (fontified t)) . -7907) (undo-tree-id89 . -1) 7908) nil (25359 17637 977195 0) 0 nil])
([nil nil ((7926 . 7935) (7925 . 7927) (#("\"" 0 1 (fontified nil)) . -7925) (7925 . 7926) (#("C" 0 1 (fontified t)) . -7925) (undo-tree-id88 . -1) 7926 (7924 . 7926) (7920 . 7924) (7919 . 7921) (#("(" 0 1 (fontified nil)) . -7919) (7918 . 7920)) nil (25359 17637 977191 0) 0 nil])
([nil nil ((7413 . 7414)) nil (25359 17637 977187 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 8010 . 8011) (8009 . 8092) 8041 (#("	 ((org-ql-block '(tags \"book\")
" 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-4-face) fontified t) 3 4 (face (rainbow-delimiters-depth-5-face) fontified t) 4 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-6-face) fontified t) 19 24 (fontified t) 24 30 (face font-lock-string-face fontified t) 30 31 (face (rainbow-delimiters-depth-6-face) fontified t) 31 32 (fontified t)) . 8009) (undo-tree-id80 . -30) (undo-tree-id81 . -32) (undo-tree-id82 . 2) (undo-tree-id83 . -31) (undo-tree-id84 . 14) (undo-tree-id85 . -19) (undo-tree-id86 . -30) (undo-tree-id87 . -30) 8041) nil (25359 17637 977185 0) 0 nil])
([nil nil ((8039 . 8043) (#("film" 0 4 (face font-lock-string-face fontified t)) . 8039)) nil (25359 17637 977175 0) 0 nil])
([nil nil ((8161 . 8244) 8199 (#("	    ((org-ql-block '(tags \"content\")
" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t) 6 7 (face (rainbow-delimiters-depth-5-face) fontified t) 7 21 (fontified t) 21 22 (face (rainbow-delimiters-depth-6-face) fontified t) 22 27 (fontified t) 27 36 (face font-lock-string-face fontified t) 36 37 (face (rainbow-delimiters-depth-6-face) fontified t) 37 38 (fontified t)) . 8161) (undo-tree-id74 . -33) (undo-tree-id75 . -38) (undo-tree-id76 . -33) (undo-tree-id77 . -33) (undo-tree-id78 . -33) (undo-tree-id79 . -33) 8199) nil (25359 17637 977173 0) 0 nil])
([nil nil ((8191 . 8198) (#("book" 0 4 (face font-lock-string-face fontified t)) . 8191)) nil (25359 17637 977151 0) 0 nil])
([nil nil ((7902 . 7904) (#("and" 0 3 (fontified t face font-lock-keyword-face)) . 7902) (t 25359 17637 995842 548000)) nil (25359 17761 701099 0) 0 nil])
([nil nil ((8051 . 8053) (#("and" 0 3 (fontified t face font-lock-keyword-face)) . 8051)) nil (25359 17761 701096 0) 0 nil])
([nil nil ((8205 . 8207) (#("and" 0 3 (fontified t face font-lock-keyword-face)) . 8205)) nil (25364 29562 422392 0) 0 nil])
([nil nil ((nil font-lock-multiline nil 849 . 850) (nil htmlize-link nil 849 . 850) (nil help-echo nil 849 . 850) (nil keymap nil 849 . 850) (nil mouse-face nil 849 . 850) (nil font-lock-multiline nil 820 . 849) (nil htmlize-link nil 820 . 849) (nil help-echo nil 820 . 849) (nil keymap nil 820 . 849) (nil mouse-face nil 820 . 849) (nil face font-lock-string-face 849 . 850) (nil face font-lock-string-face 820 . 849) (nil rear-nonsticky nil 849 . 850) (nil font-lock-multiline nil 780 . 781) (nil htmlize-link nil 780 . 781) (nil help-echo nil 780 . 781) (nil keymap nil 780 . 781) (nil mouse-face nil 780 . 781) (nil font-lock-multiline nil 756 . 780) (nil htmlize-link nil 756 . 780) (nil help-echo nil 756 . 780) (nil keymap nil 756 . 780) (nil mouse-face nil 756 . 780) (nil face font-lock-string-face 780 . 781) (nil face font-lock-string-face 756 . 780) (nil rear-nonsticky nil 780 . 781) (nil font-lock-multiline nil 717 . 718) (nil htmlize-link nil 717 . 718) (nil help-echo nil 717 . 718) (nil keymap nil 717 . 718) (nil mouse-face nil 717 . 718) (nil font-lock-multiline nil 692 . 717) (nil htmlize-link nil 692 . 717) (nil help-echo nil 692 . 717) (nil keymap nil 692 . 717) (nil mouse-face nil 692 . 717) (nil face font-lock-comment-face 717 . 718) (nil face font-lock-comment-face 692 . 717) (nil rear-nonsticky nil 717 . 718) (nil font-lock-multiline nil 669 . 670) (nil htmlize-link nil 669 . 670) (nil help-echo nil 669 . 670) (nil keymap nil 669 . 670) (nil mouse-face nil 669 . 670) (nil font-lock-multiline nil 615 . 669) (nil htmlize-link nil 615 . 669) (nil help-echo nil 615 . 669) (nil keymap nil 615 . 669) (nil mouse-face nil 615 . 669) (nil face font-lock-string-face 669 . 670) (nil face font-lock-string-face 615 . 669) (nil rear-nonsticky nil 669 . 670) (t 25359 17761 723541 934000)) nil (25364 31203 703826 0) 0 nil] [nil nil ((nil font-lock-multiline nil 849 . 850) (nil htmlize-link nil 849 . 850) (nil help-echo nil 849 . 850) (nil keymap nil 849 . 850) (nil mouse-face nil 849 . 850) (nil font-lock-multiline nil 820 . 849) (nil htmlize-link nil 820 . 849) (nil help-echo nil 820 . 849) (nil keymap nil 820 . 849) (nil mouse-face nil 820 . 849) (nil face font-lock-string-face 849 . 850) (nil face font-lock-string-face 820 . 849) (nil rear-nonsticky nil 849 . 850) (nil font-lock-multiline nil 780 . 781) (nil htmlize-link nil 780 . 781) (nil help-echo nil 780 . 781) (nil keymap nil 780 . 781) (nil mouse-face nil 780 . 781) (nil font-lock-multiline nil 756 . 780) (nil htmlize-link nil 756 . 780) (nil help-echo nil 756 . 780) (nil keymap nil 756 . 780) (nil mouse-face nil 756 . 780) (nil face font-lock-string-face 780 . 781) (nil face font-lock-string-face 756 . 780) (nil rear-nonsticky nil 780 . 781) (nil font-lock-multiline nil 717 . 718) (nil htmlize-link nil 717 . 718) (nil help-echo nil 717 . 718) (nil keymap nil 717 . 718) (nil mouse-face nil 717 . 718) (nil font-lock-multiline nil 692 . 717) (nil htmlize-link nil 692 . 717) (nil help-echo nil 692 . 717) (nil keymap nil 692 . 717) (nil mouse-face nil 692 . 717) (nil face font-lock-comment-face 717 . 718) (nil face font-lock-comment-face 692 . 717) (nil rear-nonsticky nil 717 . 718) (nil font-lock-multiline nil 669 . 670) (nil htmlize-link nil 669 . 670) (nil help-echo nil 669 . 670) (nil keymap nil 669 . 670) (nil mouse-face nil 669 . 670) (nil font-lock-multiline nil 615 . 669) (nil htmlize-link nil 615 . 669) (nil help-echo nil 615 . 669) (nil keymap nil 615 . 669) (nil mouse-face nil 615 . 669) (nil face font-lock-string-face 669 . 670) (nil face font-lock-string-face 615 . 669) (nil rear-nonsticky nil 669 . 670) (t 25359 17761 723541 934000)) ((nil rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) 669 . 670) (nil face (org-link font-lock-string-face) 615 . 669) (nil face (org-link font-lock-string-face) 669 . 670) (nil mouse-face highlight 615 . 669) (nil keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) 615 . 669) (nil help-echo "LINK: https://www.mirrorservice.org/sites/melpa.org/packages/" 615 . 669) (nil htmlize-link (:uri "https://www.mirrorservice.org/sites/melpa.org/packages/") 615 . 669) (nil font-lock-multiline t 615 . 669) (nil mouse-face highlight 669 . 670) (nil keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) 669 . 670) (nil help-echo "LINK: https://www.mirrorservice.org/sites/melpa.org/packages/" 669 . 670) (nil htmlize-link (:uri "https://www.mirrorservice.org/sites/melpa.org/packages/") 669 . 670) (nil font-lock-multiline t 669 . 670) (nil rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) 717 . 718) (nil face (org-link font-lock-comment-face) 692 . 717) (nil face (org-link font-lock-comment-face) 717 . 718) (nil mouse-face highlight 692 . 717) (nil keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) 692 . 717) (nil help-echo "LINK: https://melpa.org/packages" 692 . 717) (nil htmlize-link (:uri "https://melpa.org/packages") 692 . 717) (nil font-lock-multiline t 692 . 717) (nil mouse-face highlight 717 . 718) (nil keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) 717 . 718) (nil help-echo "LINK: https://melpa.org/packages" 717 . 718) (nil htmlize-link (:uri "https://melpa.org/packages") 717 . 718) (nil font-lock-multiline t 717 . 718) (nil rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) 780 . 781) (nil face (org-link font-lock-string-face) 756 . 780) (nil face (org-link font-lock-string-face) 780 . 781) (nil mouse-face highlight 756 . 780) (nil keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) 756 . 780) (nil help-echo "LINK: https://orgmode.org/elpa/" 756 . 780) (nil htmlize-link (:uri "https://orgmode.org/elpa/") 756 . 780) (nil font-lock-multiline t 756 . 780) (nil mouse-face highlight 780 . 781) (nil keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) 780 . 781) (nil help-echo "LINK: https://orgmode.org/elpa/" 780 . 781) (nil htmlize-link (:uri "https://orgmode.org/elpa/") 780 . 781) (nil font-lock-multiline t 780 . 781) (nil rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) 849 . 850) (nil face (org-link font-lock-string-face) 820 . 849) (nil face (org-link font-lock-string-face) 849 . 850) (nil mouse-face highlight 820 . 849) (nil keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) 820 . 849) (nil help-echo "LINK: https://elpa.gnu.org/packages/" 820 . 849) (nil htmlize-link (:uri "https://elpa.gnu.org/packages/") 820 . 849) (nil font-lock-multiline t 820 . 849) (nil mouse-face highlight 849 . 850) (nil keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) 849 . 850) (nil help-echo "LINK: https://elpa.gnu.org/packages/" 849 . 850) (nil htmlize-link (:uri "https://elpa.gnu.org/packages/") 849 . 850) (nil font-lock-multiline t 849 . 850)) (25364 29562 421675 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 184 . 185) (#("
" 0 1 (fontified nil)) . -233) (184 . 234) 148 (t 25364 31203 774912 111000)) nil (25368 18544 292776 0) 0 nil])
nil
([nil nil ((209 . 210) (#("u" 0 1 (fontified t face font-lock-string-face)) . 209)) nil (25368 18544 292774 0) 0 nil])
([nil current ((214 . 227) (#("universal-argument" 0 18 (fontified t)) . 214) (undo-tree-id0 . -17) (undo-tree-id1 . -17) (undo-tree-id2 . -17) (undo-tree-id3 . -18) (undo-tree-id4 . -17) (undo-tree-id5 . -8) (undo-tree-id6 . -8) (undo-tree-id7 . -8) (undo-tree-id8 . -8) (undo-tree-id9 . -8) (undo-tree-id10 . -8) (undo-tree-id11 . -8) (undo-tree-id12 . -8) (undo-tree-id13 . -8) (undo-tree-id14 . -8) (undo-tree-id15 . -8) (undo-tree-id16 . -8) (undo-tree-id17 . -8) (undo-tree-id18 . -8) (undo-tree-id19 . -8) (undo-tree-id20 . -8) (undo-tree-id21 . -8) (undo-tree-id22 . -8) (undo-tree-id23 . -8) (undo-tree-id24 . -8) (undo-tree-id25 . -8) (undo-tree-id26 . -9) (undo-tree-id27 . -9) (undo-tree-id28 . -9) (undo-tree-id29 . -9) (undo-tree-id30 . -9) (undo-tree-id31 . -9) (undo-tree-id32 . -9) (undo-tree-id33 . -9) (undo-tree-id34 . -9) (undo-tree-id35 . -9) (undo-tree-id36 . -9) (undo-tree-id37 . -9) (undo-tree-id38 . -9) (undo-tree-id39 . -9) (undo-tree-id40 . -9) (undo-tree-id41 . -9) (undo-tree-id42 . -9) (undo-tree-id43 . -9) (undo-tree-id44 . -9) (undo-tree-id45 . -9) (undo-tree-id46 . -9) (undo-tree-id47 . -9) (undo-tree-id48 . -9) (undo-tree-id49 . -9) (undo-tree-id50 . -9) (undo-tree-id51 . -9) (undo-tree-id52 . -9) (undo-tree-id53 . -9) (undo-tree-id54 . -17) (undo-tree-id55 . -17) (undo-tree-id56 . -17) (undo-tree-id57 . -17) (undo-tree-id58 . -17) (undo-tree-id59 . -17) (undo-tree-id60 . -17) (undo-tree-id61 . -17) (undo-tree-id62 . -17) (undo-tree-id63 . -17) (undo-tree-id64 . -17) (undo-tree-id65 . -17) (undo-tree-id66 . -17) (undo-tree-id67 . -17) (undo-tree-id68 . -17) (undo-tree-id69 . -17) (undo-tree-id70 . -17) (undo-tree-id71 . -17) (undo-tree-id72 . -17) (undo-tree-id73 . -17) (undo-tree-id74 . -17) (undo-tree-id75 . -17) 231) nil (25368 18544 292768 0) 0 nil])
nil
